Implicit User Modeling for Personalized Search
ABSTRACT
Information retrieval systems (e.g., web search engines) are critical
for overcoming information overload. A major deficiency of
existing retrieval systems is that they generally lack user modeling
and are not adaptive to individual users, resulting in inherently
non-optimal retrieval performance. For example, a tourist and a
programmer may use the same word "java" to search for different
information, but the current search systems would return the same
results. In this paper, we study how to infer a user's interest from
the user's search context and use the inferred implicit user model
for personalized search . We present a decision theoretic framework
and develop techniques for implicit user modeling in information
retrieval. We develop an intelligent client-side web search agent
(UCAIR) that can perform eager implicit feedback, e.g., query expansion
based on previous queries and immediate result reranking
based on clickthrough information. Experiments on web search
show that our search agent can improve search accuracy over the
popular Google search engine.
Categories and Subject Descriptors
H.3.3 [Information Search and Retrieval]: Retrieval models, Relevance
feedback, Search Process
General Terms
Algorithms

INTRODUCTION
Although many information retrieval systems (e.g., web search
engines and digital library systems) have been successfully deployed,
the current retrieval systems are far from optimal. A major deficiency
of existing retrieval systems is that they generally lack user
modeling and are not adaptive to individual users [17]. This inherent
non-optimality is seen clearly in the following two cases:
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CIKM'05, October 31Â­November 5, 2005, Bremen, Germany.
Copyright 2005 ACM 1-59593-140-6/05/0010 ...
$
5.00.
(1) Different users may use exactly the same query (e.g., "Java") to
search for different information (e.g., the Java island in Indonesia or
the Java programming language), but existing IR systems return the
same results for these users. Without considering the actual user, it
is impossible to know which sense "Java" refers to in a query. (2)
A user's information needs may change over time. The same user
may use "Java" sometimes to mean the Java island in Indonesia
and some other times to mean the programming language. Without
recognizing the search context, it would be again impossible to
recognize the correct sense.
In order to optimize retrieval accuracy, we clearly need to model
the user appropriately and personalize search according to each individual
user. The major goal of user modeling for information
retrieval is to accurately model a user's information need, which is,
unfortunately, a very difficult task. Indeed, it is even hard for a user
to precisely describe what his/her information need is.
What information is available for a system to infer a user's information
need? Obviously, the user's query provides the most direct
evidence. Indeed, most existing retrieval systems rely solely on
the query to model a user's information need. However, since a
query is often extremely short, the user model constructed based
on a keyword query is inevitably impoverished . An effective way
to improve user modeling in information retrieval is to ask the user
to explicitly specify which documents are relevant (i.e., useful for
satisfying his/her information need), and then to improve user modeling
based on such examples of relevant documents. This is called
relevance feedback, which has been proved to be quite effective for
improving retrieval accuracy [19, 20]. Unfortunately, in real world
applications, users are usually reluctant to make the extra effort to
provide relevant examples for feedback [11].
It is thus very interesting to study how to infer a user's information
need based on any implicit feedback information, which
naturally exists through user interactions and thus does not require
any extra user effort. Indeed, several previous studies have shown
that implicit user modeling can improve retrieval accuracy. In [3],
a web browser (Curious Browser) is developed to record a user's
explicit relevance ratings of web pages (relevance feedback) and
browsing behavior when viewing a page, such as dwelling time,
mouse click, mouse movement and scrolling (implicit feedback).
It is shown that the dwelling time on a page, amount of scrolling
on a page and the combination of time and scrolling have a strong
correlation with explicit relevance ratings, which suggests that implicit
feedback may be helpful for inferring user information need.
In [10], user clickthrough data is collected as training data to learn
a retrieval function, which is used to produce a customized ranking
of search results that suits a group of users' preferences. In [25],
the clickthrough data collected over a long time period is exploited
through query expansion to improve retrieval accuracy.
824
While a user may have general long term interests and preferences
for information, often he/she is searching for documents to
satisfy an "ad hoc" information need, which only lasts for a short
period of time; once the information need is satisfied, the user
would generally no longer be interested in such information. For
example, a user may be looking for information about used cars
in order to buy one, but once the user has bought a car, he/she is
generally no longer interested in such information. In such cases,
implicit feedback information collected over a long period of time
is unlikely to be very useful, but the immediate search context and
feedback information, such as which of the search results for the
current information need are viewed, can be expected to be much
more useful. Consider the query "Java" again. Any of the following
immediate feedback information about the user could potentially
help determine the intended meaning of "Java" in the query:
(1) The previous query submitted by the user is "hashtable" (as opposed
to, e.g., "travel Indonesia"). (2) In the search results, the user
viewed a page where words such as "programming", "software",
and "applet" occur many times.
To the best of our knowledge, how to exploit such immediate
and short-term search context to improve search has so far not been
well addressed in the previous work. In this paper, we study how to
construct and update a user model based on the immediate search
context and implicit feedback information and use the model to improve
the accuracy of ad hoc retrieval. In order to maximally benefit
the user of a retrieval system through implicit user modeling,
we propose to perform "eager implicit feedback". That is, as soon
as we observe any new piece of evidence from the user, we would
update the system's belief about the user's information need and
respond with improved retrieval results based on the updated user
model. We present a decision-theoretic framework for optimizing
interactive information retrieval based on eager user model updating
, in which the system responds to every action of the user by
choosing a system action to optimize a utility function. In a traditional
retrieval paradigm, the retrieval problem is to match a query
with documents and rank documents according to their relevance
values. As a result, the retrieval process is a simple independent
cycle of "query" and "result display". In the proposed new retrieval
paradigm, the user's search context plays an important role and the
inferred implicit user model is exploited immediately to benefit the
user. The new retrieval paradigm is thus fundamentally different
from the traditional paradigm, and is inherently more general.
We further propose specific techniques to capture and exploit two
types of implicit feedback information: (1) identifying related immediately
preceding query and using the query and the corresponding
search results to select appropriate terms to expand the current
query, and (2) exploiting the viewed document summaries to immediately
rerank any documents that have not yet been seen by the
user. Using these techniques, we develop a client-side web search
agent UCAIR (User-Centered Adaptive Information Retrieval) on
top of a popular search engine (Google). Experiments on web
search show that our search agent can improve search accuracy over
Google. Since the implicit information we exploit already naturally
exists through user interactions, the user does not need to make any
extra effort. Thus the developed search agent can improve existing
web search performance without additional effort from the user.
The remaining sections are organized as follows. In Section 2,
we discuss the related work. In Section 3, we present a decision-theoretic
interactive retrieval framework for implicit user modeling.
In Section 4, we present the design and implementation of an intelligent
client-side web search agent (UCAIR) that performs eager
implicit feedback. In Section 5, we report our experiment results
using the search agent. Section 6 concludes our work.
RELATED WORK
Implicit user modeling for personalized search has been studied
in previous work, but our work differs from all previous work
in several aspects: (1) We emphasize the exploitation of immediate
search context such as the related immediately preceding query
and the viewed documents in the same session, while most previous
work relies on long-term collection of implicit feedback information
[25]. (2) We perform eager feedback and bring the benefit of
implicit user modeling as soon as any new implicit feedback information
is available, while the previous work mostly exploits long-term
implicit feedback [10]. (3) We propose a retrieval framework
to integrate implicit user modeling with the interactive retrieval process
, while the previous work either studies implicit user modeling
separately from retrieval [3] or only studies specific retrieval models
for exploiting implicit feedback to better match a query with
documents [23, 27, 22]. (4) We develop and evaluate a personalized
Web search agent with online user studies, while most existing
work evaluates algorithms offline without real user interactions.
Currently some search engines provide rudimentary personalization
, such as Google Personalized web search [6], which allows
users to explicitly describe their interests by selecting from predefined
topics, so that those results that match their interests are
brought to the top, and My Yahoo! search [16], which gives users
the option to save web sites they like and block those they dislike
. In contrast, UCAIR personalizes web search through implicit
user modeling without any additional user efforts. Furthermore, the
personalization of UCAIR is provided on the client side. There are
two remarkable advantages on this. First, the user does not need to
worry about the privacy infringement, which is a big concern for
personalized search [26]. Second, both the computation of personalization
and the storage of the user profile are done at the client
side so that the server load is reduced dramatically [9].
There have been many works studying user query logs [1] or
query dynamics [13]. UCAIR makes direct use of a user's query
history to benefit the same user immediately in the same search
session. UCAIR first judges whether two neighboring queries belong
to the same information session and if so, it selects terms from
the previous query to perform query expansion.
Our query expansion approach is similar to automatic query expansion
[28, 15, 5], but instead of using pseudo feedback to expand
the query, we use user's implicit feedback information to expand
the current query. These two techniques may be combined.
OPTIMIZATION IN INTERACTIVE IR
In interactive IR, a user interacts with the retrieval system through
an "action dialogue", in which the system responds to each user action
with some system action. For example, the user's action may
be submitting a query and the system's response may be returning
a list of 10 document summaries. In general, the space of user actions
and system responses and their granularities would depend on
the interface of a particular retrieval system.
In principle, every action of the user can potentially provide new
evidence to help the system better infer the user's information need.
Thus in order to respond optimally, the system should use all the
evidence collected so far about the user when choosing a response.
When viewed in this way, most existing search engines are clearly
non-optimal. For example, if a user has viewed some documents on
the first page of search results, when the user clicks on the "Next"
link to fetch more results, an existing retrieval system would still
return the next page of results retrieved based on the original query
without considering the new evidence that a particular result has
been viewed by the user.
825
We propose to optimize retrieval performance by adapting system
responses based on every action that a user has taken, and cast
the optimization problem as a decision task. Specifically, at any
time, the system would attempt to do two tasks: (1) User model
updating: Monitor any useful evidence from the user regarding
his/her information need and update the user model as soon as such
evidence is available; (2) Improving search results: Rerank immediately
all the documents that the user has not yet seen, as soon
as the user model is updated. We emphasize eager updating and
reranking, which makes our work quite different from any existing
work. Below we present a formal decision theoretic framework for
optimizing retrieval performance through implicit user modeling in
interactive information retrieval.
3.1
A decision-theoretic framework
Let A be the set of all user actions and R(a) be the set of all
possible system responses to a user action a  A. At any time, let
A
t
= (a
1
, ..., a
t
) be the observed sequence of user actions so far
(up to time point t) and R
t-1
= (r
1
, ..., r
t-1
) be the responses that
the system has made responding to the user actions. The system's
goal is to choose an optimal response r
t
R(a
t
) for the current
user action a
t
.
Let M be the space of all possible user models. We further define
a loss function L(a, r, m)
, where a  A is a user action,
r  R(a) is a system response, and m  M is a user model.
L(a, r, m) encodes our decision preferences and assesses the optimality
of responding with r when the current user model is m
and the current user action is a. According to Bayesian decision
theory, the optimal decision at time t is to choose a response that
minimizes the Bayes risk, i.e.,
r

t
= argmin
rR(a
t
)
M
L(a
t
, r, m
t
)P (m
t
|U, D, A
t
, R
t-1
)dm
t
(1)
where P (m
t
|U, D, A
t
, R
t-1
) is the posterior probability of the
user model m
t
given all the observations about the user U we have
made up to time t.
To simplify the computation of Equation 1, let us assume that the
posterior probability mass P (m
t
|U, D, A
t
, R
t-1
) is mostly concentrated
on the mode m

t
= argmax
m
t
P (m
t
|U, D, A
t
, R
t-1
).
We can then approximate the integral with the value of the loss
function at m

t
. That is,
r

t
argmin
rR(a
t
)
L(a
t
, r, m

t
)
(2)
where m

t
= argmax
m
t
P (m
t
|U, D, A
t
, R
t-1
).
Leaving aside how to define and estimate these probabilistic models
and the loss function, we can see that such a decision-theoretic
formulation suggests that, in order to choose the optimal response
to a
t
, the system should perform two tasks: (1) compute the current
user model and obtain m

t
based on all the useful information
. (2) choose a response r
t
to minimize the loss function value
L(a
t
, r
t
, m

t
). When a
t
does not affect our belief about m

t
, the
first step can be omitted and we may reuse m

t-1
for m

t
.
Note that our framework is quite general since we can potentially
model any kind of user actions and system responses. In most
cases, as we may expect, the system's response is some ranking of
documents, i.e., for most actions a, R(a) consists of all the possible
rankings of the unseen documents, and the decision problem
boils down to choosing the best ranking of unseen documents based
on the most current user model. When a is the action of submitting
a keyword query, such a response is exactly what a current retrieval
system would do. However, we can easily imagine that a more intelligent
web search engine would respond to a user's clicking of
the "Next" link (to fetch more unseen results) with a more opti-mized
ranking of documents based on any viewed documents in
the current page of results. In fact, according to our eager updating
strategy, we may even allow a system to respond to a user's clicking
of browser's "Back" button after viewing a document in the same
way, so that the user can maximally benefit from implicit feedback.
These are precisely what our UCAIR system does.
3.2
User models
A user model m  M represents what we know about the user
U , so in principle, it can contain any information about the user
that we wish to model. We now discuss two important components
in a user model.
The first component is a component model of the user's information
need. Presumably, the most important factor affecting the optimality
of the system's response is how well the response addresses
the user's information need. Indeed, at any time, we may assume
that the system has some "belief" about what the user is interested
in, which we model through a term vector x = (x
1
, ..., x
|V |
),
where V = {w
1
, ..., w
|V |
} is the set of all terms (i.e., vocabulary)
and x
i
is the weight of term w
i
. Such a term vector is commonly
used in information retrieval to represent both queries and documents
. For example, the vector-space model, assumes that both
the query and the documents are represented as term vectors and
the score of a document with respect to a query is computed based
on the similarity between the query vector and the document vector
[21]. In a language modeling approach, we may also regard
the query unigram language model [12, 29] or the relevance model
[14] as a term vector representation of the user's information need.
Intuitively, x would assign high weights to terms that characterize
the topics which the user is interested in.
The second component we may include in our user model is the
documents that the user has already viewed. Obviously, even if a
document is relevant, if the user has already seen the document, it
would not be useful to present the same document again. We thus
introduce another variable S  D (D is the whole set of documents
in the collection) to denote the subset of documents in the search
results that the user has already seen/viewed.
In general, at time t, we may represent a user model as m
t
=
(S, x, A
t
, R
t-1
), where S is the seen documents, x is the system's
"understanding" of the user's information need, and (A
t
, R
t-1
)
represents the user's interaction history. Note that an even more
general user model may also include other factors such as the user's
reading level and occupation.
If we assume that the uncertainty of a user model m
t
is solely
due to the uncertainty of x, the computation of our current estimate
of user model m

t
will mainly involve computing our best estimate
of x. That is, the system would choose a response according to
r

t
= argmin
rR(a
t
)
L(a
t
, r, S, x

, A
t
, R
t-1
)
(3)
where x

= argmax
x
P (x|U, D, A
t
, R
t-1
). This is the decision
mechanism implemented in the UCAIR system to be described
later. In this system, we avoided specifying the probabilistic model
P (x|U, D, A
t
, R
t-1
) by computing x

directly with some existing
feedback method.
3.3
Loss functions
The exact definition of loss function L depends on the responses,
thus it is inevitably application-specific. We now briefly discuss
some possibilities when the response is to rank all the unseen documents
and present the top k of them. Let r = (d
1
, ..., d
k
) be the
top k documents, S be the set of seen documents by the user, and
x

be the system's best guess of the user's information need. We
826
may simply define the loss associated with r as the negative sum
of the probability that each of the d
i
is relevant, i.e., L(a, r, m) =
k
i=1
P (relevant|d
i
, m). Clearly, in order to minimize this
loss function, the optimal response r would contain the k documents
with the highest probability of relevance, which is intuitively
reasonable.
One deficiency of this "top-k loss function" is that it is not sensitive
to the internal order of the selected top k documents, so switching
the ranking order of a non-relevant document and a relevant one
would not affect the loss, which is unreasonable. To model ranking
, we can introduce a factor of the user model Â­ the probability
of each of the k documents being viewed by the user, P (view|d
i
),
and define the following "ranking loss function":
L(a, r, m) = k
i=1
P (view|d
i
)P (relevant|d
i
, m)
Since in general, if d
i
is ranked above d
j
(i.e., i &lt; j), P (view|d
i
) &gt;
P (view|d
j
), this loss function would favor a decision to rank relevant
documents above non-relevant ones, as otherwise, we could
always switch d
i
with d
j
to reduce the loss value. Thus the system
should simply perform a regular retrieval and rank documents
according to the probability of relevance [18].
Depending on the user's retrieval preferences, there can be many
other possibilities. For example, if the user does not want to see
redundant documents, the loss function should include some redundancy
measure on r based on the already seen documents S.
Of course, when the response is not to choose a ranked list of
documents, we would need a different loss function. We discuss
one such example that is relevant to the search agent that we implement
. When a user enters a query q
t
(current action), our search
agent relies on some existing search engine to actually carry out
search. In such a case, even though the search agent does not have
control of the retrieval algorithm, it can still attempt to optimize the
search results through refining the query sent to the search engine
and/or reranking the results obtained from the search engine. The
loss functions for reranking are already discussed above; we now
take a look at the loss functions for query refinement.
Let f be the retrieval function of the search engine that our agent
uses so that f (q) would give us the search results using query q.
Given that the current action of the user is entering a query q
t
(i.e.,
a
t
= q
t
), our response would be f (q) for some q. Since we have
no choice of f , our decision is to choose a good q. Formally,
r

t
= argmin
r
t
L(a, r
t
, m)
= argmin
f (q)
L(a, f (q), m)
= f (argmin
q
L(q
t
, f (q), m))
which shows that our goal is to find q

= argmin
q
L(q
t
, f (q), m),
i.e., an optimal query that would give us the best f (q). A different
choice of loss function L(q
t
, f (q), m) would lead to a different
query refinement strategy. In UCAIR, we heuristically compute q

by expanding q
t
with terms extracted from r
t-1
whenever q
t-1
and
q
t
have high similarity. Note that r
t-1
and q
t-1
are contained in
m as part of the user's interaction history.
3.4
Implicit user modeling
Implicit user modeling is captured in our framework through
the computation of x

= argmax
x
P (x|U, D, A
t
, R
t-1
), i.e., the
system's current belief of what the user's information need is. Here
again there may be many possibilities, leading to different algorithms
for implicit user modeling. We now discuss a few of them.
First, when two consecutive queries are related, the previous
query can be exploited to enrich the current query and provide more
search context to help disambiguation. For this purpose, instead of
performing query expansion as we did in the previous section, we
could also compute an updated x

based on the previous query and
retrieval results. The computed new user model can then be used to
rank the documents with a standard information retrieval model.
Second, we can also infer a user's interest based on the summaries
of the viewed documents. When a user is presented with a
list of summaries of top ranked documents, if the user chooses to
skip the first n documents and to view the (n + 1)-th document, we
may infer that the user is not interested in the displayed summaries
for the first n documents, but is attracted by the displayed summary
of the (n + 1)-th document. We can thus use these summaries as
negative and positive examples to learn a more accurate user model
x

. Here many standard relevance feedback techniques can be exploited
[19, 20]. Note that we should use the displayed summaries,
as opposed to the actual contents of those documents, since it is
possible that the displayed summary of the viewed document is
relevant, but the document content is actually not. Similarly, a displayed
summary may mislead a user to skip a relevant document.
Inferring user models based on such displayed information, rather
than the actual content of a document is an important difference
between UCAIR and some other similar systems.
In UCAIR, both of these strategies for inferring an implicit user
model are implemented.
UCAIR A PERSONALIZED SEARCH AGENT
In this section, we present a client-side web search agent called
UCAIR, in which we implement some of the methods discussed
in the previous section for performing personalized search through
implicit user modeling. UCAIR is a web browser plug-in
1
that
acts as a proxy for web search engines. Currently, it is only implemented
for Internet Explorer and Google, but it is a matter of
engineering to make it run on other web browsers and interact with
other search engines.
The issue of privacy is a primary obstacle for deploying any real
world applications involving serious user modeling, such as personalized
search. For this reason, UCAIR is strictly running as
a client-side search agent, as opposed to a server-side application.
This way, the captured user information always resides on the computer
that the user is using, thus the user does not need to release
any information to the outside. Client-side personalization also allows
the system to easily observe a lot of user information that may
not be easily available to a server. Furthermore, performing personalized
search on the client-side is more scalable than on the serverside
, since the overhead of computation and storage is distributed
among clients.
As shown in Figure 1, the UCAIR toolbar has 3 major components
: (1) The (implicit) user modeling module captures a user's
search context and history information, including the submitted
queries and any clicked search results and infers search session
boundaries. (2) The query modification module selectively improves
the query formulation according to the current user model.
(3) The result re-ranking module immediately re-ranks any unseen
search results whenever the user model is updated.
In UCAIR, we consider four basic user actions: (1) submitting a
keyword query; (2) viewing a document; (3) clicking the "Back"
button; (4) clicking the "Next" link on a result page. For each
of these four actions, the system responds with, respectively, (1)
1
UCAIR is available at: http://sifaka.cs.uiuc.edu/ir/ucair/download.html
827

Search  
Engine
(e.g.,
Google)
Search History Log
(e.g.,past queries,
clicked results)
Query
Modification
Result
Re-Ranking
User
Modeling
Result Buffer
UCAIR
User
query
results
clickthrough...
Figure 1: UCAIR architecture
generating a ranked list of results by sending a possibly expanded
query to a search engine; (2) updating the information need model
x; (3) reranking the unseen results on the current result page based
on the current model x; and (4) reranking the unseen pages and
generating the next page of results based on the current model x.
Behind these responses, there are three basic tasks: (1) Decide
whether the previous query is related to the current query and if so
expand the current query with useful terms from the previous query
or the results of the previous query. (2) Update the information
need model x based on a newly clicked document summary. (3)
Rerank a set of unseen documents based on the current model x.
Below we describe our algorithms for each of them.
4.2
Session boundary detection and query expansion
To effectively exploit previous queries and their corresponding
clickthrough information, UCAIR needs to judge whether two adjacent
queries belong to the same search session (i.e., detect session
boundaries). Existing work on session boundary detection is
mostly in the context of web log analysis (e.g., [8]), and uses statistical
information rather than textual features. Since our client-side
agent does not have access to server query logs, we make session
boundary decisions based on textual similarity between two
queries. Because related queries do not necessarily share the same
words (e.g., "java island" and "travel Indonesia"), it is insufficient
to use only query text. Therefore we use the search results of the
two queries to help decide whether they are topically related. For
example, for the above queries "java island" and "travel Indone-sia"'
, the words "java", "bali", "island", "indonesia" and "travel"
may occur frequently in both queries' search results, yielding a high
similarity score.
We only use the titles and summaries of the search results to calculate
the similarity since they are available in the retrieved search
result page and fetching the full text of every result page would sig-nificantly
slow down the process. To compensate for the terseness
of titles and summaries, we retrieve more results than a user would
normally view for the purpose of detecting session boundaries (typ-ically
50 results).
The similarity between the previous query q and the current
query q is computed as follows. Let {s
1
, s
2
, . . . , s
n
} and
{s
1
, s
2
, . . . , s
n
} be the result sets for the two queries.
We use
the pivoted normalization TF-IDF weighting formula [24] to compute
a term weight vector s
i
for each result s
i
. We define the average
result s
avg
to be the centroid of all the result vectors, i.e.,
(s
1
+ s
2
+ . . . + s
n
)/n. The cosine similarity between the two
average results is calculated as
s
avg
Â· s
avg
/ s
2
avg
Â· s
2
avg
If the similarity value exceeds a predefined threshold, the two queries
will be considered to be in the same information session.
If the previous query and the current query are found to belong
to the same search session, UCAIR would attempt to expand the
current query with terms from the previous query and its search
results. Specifically, for each term in the previous query or the
corresponding search results, if its frequency in the results of the
current query is greater than a preset threshold (e.g. 5 results out
of 50), the term would be added to the current query to form an
expanded query. In this case, UCAIR would send this expanded
query rather than the original one to the search engine and return
the results corresponding to the expanded query. Currently, UCAIR
only uses the immediate preceding query for query expansion; in
principle, we could exploit all related past queries.
4.3
Information need model updating
Suppose at time t, we have observed that the user has viewed
k documents whose summaries are s
1
, ..., s
k
. We update our user
model by computing a new information need vector with a standard
feedback method in information retrieval (i.e., Rocchio [19]). According
to the vector space retrieval model, each clicked summary
s
i
can be represented by a term weight vector s
i
with each term
weighted by a TF-IDF weighting formula [21]. Rocchio computes
the centroid vector of all the summaries and interpolates it with the
original query vector to obtain an updated term vector. That is,
x = q + (1 - ) 1
k
k
i=1
s
i
where q is the query vector, k is the number of summaries the user
clicks immediately following the current query and  is a parameter
that controls the influence of the clicked summaries on the inferred
information need model. In our experiments,  is set to 0.5. Note
that we update the information need model whenever the user views
a document.
4.4
Result reranking
In general, we want to rerank all the unseen results as soon as the
user model is updated. Currently, UCAIR implements reranking in
two cases, corresponding to the user 