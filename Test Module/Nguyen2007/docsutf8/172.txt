Scalable Data Aggregation for Dynamic Events in Sensor Networks
Abstract
Computing and maintaining network structures for efficient
data aggregation incurs high overhead for dynamic
events where the set of nodes sensing an event changes with
time. Moreover, structured approaches are sensitive to the
waiting-time which is used by nodes to wait for packets from
their children before forwarding the packet to the sink. Although
structure-less approaches can address these issues,
the performance does not scale well with the network size.
We propose a semi-structured approach that uses a structure-less
technique locally followed by Dynamic Forwarding on
an implicitly constructed packet forwarding structure to support
network scalability. The structure, ToD, is composed of
multiple shortest path trees. After performing local aggregation
, nodes dynamically decide the forwarding tree based on
the location of the sources. The key principle behind ToD is
that adjacent nodes in a graph will have low stretch in one
of these trees in ToD, thus resulting in early aggregation of
packets. Based on simulations on a 2000 nodes network and
real experiments on a 105 nodes Mica2-based network, we
conclude that efficient aggregation in large scale networks
can be achieved by our semi-structured approach.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]:
Network
Architecture and Design--Wireless communication
General Terms
Design, Performance

*This work was partially supported by NSF's CAREER program
(Grant number CNS 0546630) and NSF's RI program (Grant
number CNS 0403342)
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior specific permission and/or a fee.
SenSys'06, November 1­3, 2006, Boulder, Colorado, USA.
Copyright 2006 ACM 1-59593-343-3/06/0011 ...$5.00
Introduction
Data aggregation is an effective technique for conserving
communication energy in sensor networks. In sensor
networks, the communication cost is often several orders of
magnitude larger than the computation cost. Due to inherent
redundancy in raw data collected from sensors, in-network
data aggregation can often reduce the communication cost
by eliminating redundancy and forwarding only the extracted
information from the raw data. As reducing consumption
of communication energy extends the network lifetime, it is
critical for sensor networks to support in-network data aggregation
.
Various data aggregation approaches have been proposed
for data gathering applications and event-based applications.
These approaches make use of cluster based structures [1, 2]
or tree based structures [3­8]. In data gathering applications,
such as environment and habitat monitoring [9­12], nodes
periodically report the sensed data to the sink. As the traffic
pattern is unchanging, these structure-based approaches
incur low maintenance overhead and are therefore suitable
for such applications. However, in event-based applications,
such as intrusion detection [13, 14] and biological hazard detection
[15], the source nodes are not known in advance.
Therefore the approaches that use fixed structures can not
efficiently aggregate data, while the approaches that change
the structure dynamically incur high maintenance overhead
[4, 5]. The goal of this paper is to design a scalable and efficient
data aggregation protocol that incurs low maintenance
overhead and is suited for event-based applications.
Constructing an optimal structure for data aggregation for
various aggregation functions has been proven to be an NP-hard
problem [16, 17]. Although heuristics can be used to
construct structures for data aggregation, another problem
associated with the convergecast traffic pattern, where nodes
transmit their packets to the cluster-head or parent in cluster
or tree structures, results in low performance of structure
based data aggregation protocols. In [18] the simulation
results show that the packet dropping rate in Shortest Path
Tree (SPT) is higher because of heavy contention caused by
the convergecast traffic. This results in more packet drops
and increased delays. As a result, enforcing a fixed order
of packet transmissions becomes difficult, which impacts the
performance of data aggregation in structured approaches.
Typically, packets have to be transmitted in a fixed order
181
from leaves to the root in a tree-like structure to achieve maximum
aggregation. Dropped packets not only make the optimal
structure sub-optimal, but also waste energy on transmitting
packets that are unable to reach the sink.
In [19] it shows that the performance gain by using heuristics
to create the Steiner Minimum Tree (SMT) for aggregation
is not significant compared with using only the Shortest
Path Tree (SPT), not to mention that the overhead of
constructing such a structure may negate the benefit resulting
from data aggregation. However, their conclusions were
based on the assumption of randomly located data sources,
which is different from the scenarios in event-based sensor
networks where a set of close-by nodes is expected to sense
an event.
Realizing the shortcomings of structured approaches, [20]
proposes an anycast based structure-less approach at the
MAC layer to aggregate packet. It involves mechanisms
to increase the chance of packets meeting at the same node
(Spatial Aggregation) at the same time (Temporal Aggregation
). As the approach does not guarantee aggregation of all
packets from a single event, the cost of forwarding unaggregated
packets increases with the scale of the network and the
distance of the event from the sink.
To benefit from the strengths of the structured and the
structure-less approaches, we propose a semi-structured approach
in this paper. The main challenge in designing such
a protocol is to determine the packet forwarding strategy in
absence of a pre-constructed global structure to achieve early
aggregation. Our approach uses a structure-less technique locally
followed by Dynamic Forwarding on an implicitly constructed
packet forwarding structure to support network scalability
. The structure, ToD (Tree on Directed acyclic graph),
is composed of multiple shortest path trees. After performing
local aggregation, nodes dynamically decide the forwarding
tree based on the location of the source nodes. The key principle
behind ToD is that adjacent nodes in a graph will have
low stretch in at least one of these trees in ToD, thus resulting
in early aggregation of packets. This paper makes the
following contributions:
· We propose an efficient and scalable data aggregation
mechanism that can achieve early aggregation without
incurring any overhead of constructing a structure.
· We implement the ToD approach on TinyOS and compare
its performance against other approaches on a 105
nodes sensor network.
· For studying the scalability aspects of our approach, we
implement ToD in the ns2 simulator and study its performance
in networks of up to 2000 nodes.
The organization of the rest of the paper is as follows.
Section 2 presents background and related work. Section
3 presents the structure-less approach. Section 4 analyzes
the performance of ToD in the worst case. The performance
evaluation of the protocols using simulations and experiments
is presented in Section 5. Finally Section 6 concludes
the paper.
Related Work
Data aggregation has been an active research area in sensor
networks for its ability to reduce energy consumption.
Some works focus on how to aggregate data from different
nodes [21­24], some focus on how to construct and maintain
a structure to facilitate data aggregation [1­8,17,25­30],
and some focus on how to efficiently compress and aggregate
data by taking the correlation of data into consideration
[17, 31­34]. As our work focuses on how to facilitate
data aggregation without incurring the overhead of constructing
a structure, we briefly describe the structure-based
as well as structure-less approaches in current research.
In [1,2], the authors propose the LEACH protocol to cluster
sensor nodes and let the cluster-heads aggregate data. The
cluster-heads then communicate directly with the base station
. PEGASIS [26] extends LEACH by organizing all nodes
in a chain and letting nodes be the head in turn. [26, 27] extend
PEGASIS by allowing simultaneous transmission that
balances the energy and delay cost for data gathering. Both
LEACH and PEGASIS assume that any node in the network
can reach the base-station directly in one-hop, which limits
the size of the network for them to be applicable.
GIT [3] uses a different approach as compared to LEACH.
GIT is built on top of a routing protocol, Directed Diffusion
[21,22], which is one of the earliest proposed attribute-based
routing protocols. In Directed Diffusion, data can be aggregated
opportunistically when they meet at any intermediate
node. Based on Directed Diffusion, the Greedy Incremental
Tree (GIT) establishes an energy-efficient tree by attaching
all sources greedily onto an established energy-efficient path
and pruning less energy efficient paths. However due to the
overhead of pruning branches, GIT might lead to high cost
in moving event scenarios.
In [4, 5], the authors propose DCTC, Dynamic Convoy
Tree-Based Collaboration, to reduce the overhead of tree migration
in mobile event scenarios. DCTC assumes that the
distance to the event is known to each sensor and uses the
node near the center of the event as the root to construct and
maintain the aggregation tree dynamically. However it involves
heavy message exchanges which might offset the benefit
of aggregation in large-scale networks. From the simulation
results in DCTC [5], the energy consumption of tree
expansion, pruning and reconfiguration is about 33% of the
data collection.
In [8], the authors propose an aggregation tree construction
algorithm to simultaneously approximate the optimum
trees for all non-decreasing and concave aggregation functions
. The algorithm uses a simple min-cost perfect matching
to construct the tree. [7] also uses similar min-cost matching
process to construct an aggregation tree that takes the data
fusion cost into consideration. Other works, such as SMT
(Steiner Minimum Tree) and MST (Multiple Shared Tree)
for multicast algorithms which can be used in data aggregation
[17, 19, 30], build a structure in advance for data aggregation
. In addition to their complexity and overhead, they
are only suitable for networks where the sources are known
in advance. Therefore they are not suitable for networks with
mobile events.
Moreover, fixed tree structure might have long stretch between
adjacent nodes. A stretch of two nodes u and v in a
tree T on a graph G is the ratio between the distance from
node u to v in T and their distance in G.
Long stretch
182
implies packets from adjacent nodes have to be forwarded
many hops away before they can be aggregated. This problem
has been studied as MSST (Minimum Stretch Spanning
Tree) [35] and MAST (Minimum Average Stretch Spanning
Tree) [36]. They are also NP-hard problems, and it has
been shown that for any graph, the lower bound of the average
stretch is O
(log(n)) [36], and it can be as high as
O
(n) for the worst case [37]. Even for a grid network, it
has been shown that the lower bound for the worst case is
O
(n) [36]. [38] proposes a polynomial time algorithm to
construct a group-independent spanning tree that can achieve
O
(log(n)) stretch. However the delay in [38] is high in large
networks if only nodes near the sink are triggered.
[20] is the first proposed structure-less data aggregation
protocol that can achieve high aggregation without incurring
the overhead of structure approaches. [20] uses anycast to
forward packets to one-hop neighbors that have packets for
aggregation. It can efficiently aggregate packets near the
sources and effectively reduce the number of transmissions.
However, it does not guarantee the aggregation of all packets
from a single event. As the network grows, the cost of
forwarding packets that were unable to be aggregated will
negate the benefit of energy saving resulted from eliminating
the control overhead.
In order to get benefit from structure-less approaches even
in large networks, scalability has to be considered in the design
of the aggregation protocol. In this paper, we propose
a scalable structure-less protocol, ToD, that can achieve efficient
aggregation even in large networks. ToD uses a semi-structure
approach that does not have the long stretch problem
in fixed structure nor incur structure maintenance overhead
of dynamic structure, and further improves the performance
of the structure-less approach.
Scalable Data Aggregation
As described before, the goal of our protocol is to achieve
aggregation of data near the sources without explicitly constructing
a structure for mobile event scenarios. Aggregating
packets near the sources is critical for reducing the number of
transmissions. Aggregating without using an explicit structure
reduces the overhead of construction and maintenance
of the structure. In this section, we propose a highly scalable
approach that is suitable for very large sensor networks.
Our protocol is based on the Data Aware Anycast (DAA)
and Randomized Waiting (RW) approaches
1
proposed in
[20]. There are two phases in our protocol: DAA and Dynamic
Forwarding. In the first phase, packets are forwarded
and aggregated to a selected node, termed aggregator, using
DAA. In DAA [20], packets were destined to the sink,
whereas in our approach they are destined to an aggregator.
In the second phase, the leftover un-aggregated or partially
aggregated packets are forwarded on a structure, termed Tree
on DAG (ToD), for further aggregation. First we briefly describe
the DAA protocol proposed in [20].
3.1
Data Aware Anycast [20]
Data Aware Anycast is a structure-less protocol that aggregates
packets by improving the Spatial and Temporal con-1
In rest of this paper, we use DAA or Data Aware Anycast to
refer to the combination of the two approaches.
vergence. Spatial convergence and temporal convergence
during transmission are two necessary conditions for aggregation
. Packets have to be transmitted to the same node
at the same time to be aggregated. Structured approaches
achieve these two conditions by letting nodes transmit packets
to their parents in the aggregation tree and parents wait
for packets from all their children before transmitting the aggregated
packets. Without explicit message exchanges in
structure-less aggregation, nodes do not know where they
should send packets to and how long they should wait for
aggregation. Therefore improving spatial or temporal convergence
is critical for improving the chance of aggregation.
Spatial Convergence is achieved by using anycast to forward
packets to nodes that can achieve aggregation. Anycast
is a routing scheme whereby packets are forwarded to
the best one, or any one, of a group of target destinations
based on some routing metrics. By exploiting the nature
of wireless radio transmission in sensor networks where all
nodes within the transmission range can receive the packet,
nodes are able to tell if they can aggregate the transmitting
packet, and the anycast mechanism allows the sender to forward
packets to any one of them. Transmitting packets to
nodes that can achieve aggregation reduces the number of
remaining packets in the network, thereby reducing the total
number of transmissions.
Temporal Convergence is used to further improve the aggregation
. Randomized Waiting is a simple technique for
achieving temporal convergence, in which nodes wait for a
random delay before transmitting. In mobile event triggered
networks, nodes are unable to know which nodes are triggered
and have packets to transmit in advance. Therefore
nodes can not know if they should wait for their upstream
nodes and how long they should wait for aggregation. A
naive approach of using a fixed delay depending on the distance
to the sink may make the detection delay very high.
For example, as shown in Fig. 1, nodes closer to the sink
must wait longer for packets from possible upstream nodes
if fixed waiting time is employed. When events are closer to
the sink, the longer delay chosen by nodes closer to the sink
is unnecessary. Random delay is used to avoid long delay in
large networks while increasing the chance of aggregation.

sink
...... 
......
= 0
= 1
= n-2
= n-1
= n
nodes triggered by an event
Figure 1.
Longer delay is unnecessary but is inevitable using fixed
delay when the event is closer to the sink. Nodes closer to the sink have
longer delay (
) because they have to wait for packets from possible
upstream nodes.
When a node detects an event and generates a packet for
reporting, it picks a random delay between 0 and
before
transmitting, where
is a network parameter that specifies
the maximum delay. After delaying the packet, the node
183
broadcasts an RTS packet containing an Aggregation ID.
In [20], the timestamp is used as the Aggregation ID, which
means that packets generated at the same time can be aggregated
. When a node receives an RTS packet, it checks if it
has packets with the same Aggregation ID. If it does, it has
higher priority for replying with a CTS than nodes that do
not have packets for aggregation. The priority is decided by
the delay of replying a CTS packet. Nodes with higher priority
reply a CTS with shorter delay. If a node overhears any
traffic before transmitting its CTS packet, it cancels the CTS
transmission in order to avoid collision of multiple CTS responses
at the sender. Therefore, nodes can send their packets
for aggregation as long as at least one of its neighbors has
a packet with the same Aggregation ID. More details and extensions
of the DAA approach can be found in [20].
However, DAA can not guarantee that all packets will be
aggregated into one packet. When more packets are transmitted
from sources to the sink without aggregation, more
energy is wasted. This effect becomes more severe when the
network is very large and the sources are very far away from
the sink. Therefore, instead of forwarding packets directly to
the sink when DAA can not aggregate packets any more, we
propose the use of Dynamic Forwarding for further packet
aggregation. We now describe the Dynamic Forwarding and
the construction of ToD.
3.2
Dynamic Forwarding over ToD

sink
nodes triggered by event B
nodes triggered by event A

Figure 2.
Fixed tree structure for aggregation can have long distance
(link-stretch) between adjacent nodes, as in the case of nodes triggered
by event B. In this example we assume that nodes in the range of event
B are within transmission range of each other.
We adopt the pre-constructed structure approach in the
second phase to achieve further aggregation. Having a structure
to direct all packets to a single node is inevitable if
we want to aggregate all packets into one. Constructing a
structure dynamically with explicit message exchanges incurs
high overhead. Therefore we use an implicitly computed
pre-constructed structure that remains unchanged for
relatively long time periods (several hours or days). However
, using a fixed structure has the long stretch problem as
described in Section 2. Take Fig. 2 as an example of pre-computed
tree structure where gray nodes are the sources.
The fixed tree structure works well if the nodes that generate
packets are triggered by event A because their packets can be
aggregated immediately on the tree. However, if the nodes
that generate packets are triggered by event B, their packets
can not be aggregated even if they are adjacent to each other.
Therefore we design a dynamic forwarding mechanism over
ToD, to avoid the problem of long stretch.
3.2.1
ToD in One Dimensional Networks


......
........................ 
........................
......
network
one row instance of the network
sink

Figure 3.
We illustrate the ToD construction from one row's point of
view to simplify the discussion.
For illustrating the concept of ToD, we first describe the
construction of ToD for a 1-D (a single row of nodes) network
, as shown in Fig. 3. We assume that the nodes can communicate
with their adjacent nodes in the same row through
one hop.
We define a cell as a square with side length
where  is
greater than the maximum diameter of the area that an event
can span. The network is divided into cells. These cells are
grouped into clusters, called F-clusters (First-level clusters).
The size of the F-clusters must be large enough to cover the
cells an event can span, which is two when we only consider
1-D cells in the network. All nodes in F-clusters send their
packets to their cluster-heads, called F-aggregators (First-level
aggregators). Note that nodes in the F-cluster can be
multiple hops away from the F-aggregator. The formation
of the clusters and the election of the aggregators are discussed
later in Section 3.2.3. Each F-aggregator then creates
a shortest path to the sink. Therefore the structure is a shortest
path tree where the root is the sink and the leaves are
F-aggregators. We call this tree an F-Tree. Fig. 4(a) shows
the construction of the F-Tree.
In addition to the F-clusters, we create the second type
of clusters, S-clusters (Second-level clusters) for these cells.
The size of an S-cluster must also be large enough to
cover all cells spanned by an event, and it must interleave
with the F-clusters so it can cover adjacent cells in different
F-clusters. Each S-cluster also has a cluster-head, S-aggregator
, for aggregating packets. Each S-aggregator creates
a shortest path to the sink, and forms a second shortest
path tree in the network. We call it S-Tree. The illustration of
an S-Tree is shown in Fig. 4(b). For all sets of nearby cells
that can be triggered by an event, either they will be in the
same F-cluster, or they will be in the same S-cluster. This
property is exploited by Dynamic Forwarding to avoid the
long stretch problem discussed earlier.
After the S-Tree is constructed, the F-aggregators connect
themselves to the S-aggregators of S-clusters which its
F-cluster overlaps with, as shown in Fig. 4(c). For example,
in Fig. 4(c), the F-aggregator F4 connects to S-aggregators
S3 and S4 because its F-cluster overlaps with S-cluster 3 and
4. Thus, the combination of F-Tree and S-Tree creates a Di-184
A B
C D
F1
F2
S2
F4
S4
F6
S6
F8
F3
F5
F7
S1
S3
S5
S7
Cells
Other nodes in the 
network
F-Aggregators
Cells with packets
F1
F2 F4 F6
F8
F3 F5 F7
F-Tree S-Tree
Overlapping
ToD
(a)
(b)
(c)
A B
C D
F-clusters
A
B
C
D
S-clusters
S-Aggregators
S2
S4 S6
S1
S3
S5
S7

Figure 4.
The construction of F-Tree, S-Tree, and ToD. (a) Leaf nodes are cells. Pairs of neighbor cells define F-clusters. Each F-cluster has an
F-aggregator, and F-aggregators form the F-Tree. (b) Each pair of adjacent cells not in the same F-cluster form an S-cluster. Each S-cluster has an
S-aggregator, and S-aggregators form the S-Tree. Nodes on the network boundary do not need to be in any S-cluster. (c) Each F-aggregator connects
to two S-aggregators of S-clusters which its F-cluster overlaps with. This structure called the Tree on DAG or ToD. F-aggregator in ToD uses Dynamic
Forwarding to forward packets to the root, or through an S-aggregator in the S-Tree based on where the packets come from.
rected Acyclic Graph, which we refer to as the ToD (Tree on
DAG).
Nodes first use the Data Aware Anycast (DAA) approach
to aggregate as many packets as possible. When no further
aggregation can be achieved by DAA, nodes forward their
packets to the F-aggregator in its F-cluster. If an event only
triggers nodes within a single F-cluster, its packets can be
aggregated at the F-aggregator, and be forwarded to the sink
using the F-Tree. However, in case the event spans multiple
F-clusters, the corresponding packets will be forwarded to
different F-aggregators. As we assumed that the event size
is not larger than the size of a cell, an event on the boundary
of F-clusters will only trigger nodes in cells on the boundary
of the F-clusters. By the construction of S-clusters, adjacent
cells on the boundary of F-clusters belong to the same S-cluster
. Thus, F-aggregators can exploit the information collected
from received packets to select the S-aggregator that
is best suited for further aggregation. This information is obtained
from the source of traffic that can be encoded in the
packets. Often such information is readily available in the
packet. Otherwise, 4 extra bits can be used to indicate which
cell the packet comes from.
Consider the example in Fig. 4(c). Since the maximum
number of cells an event can span is two, either these two
cells are in the same F-cluster, or they are in the same S-cluster
. If they are in the same F-cluster, their packets can
be aggregated at the F-aggregator. For example, if the event
spans A and B, F1 knows that no other F-cluster has packets
for aggregation, and it can forward the packets using
the F-Tree. If the event spans two cells that are in different
F-clusters, the two F-aggregators in the two F-clusters
will receive packets only from one of their cells. The F-aggregators
then conjecture which F-cluster might also have
packets based on which cells the packets come from. For example
, if the event spans C and D, F4 will only receive packets
from C. Therefore F4 can know either the event happens
only in C, or the event spans C and D. Consequently, F4 can
forward packets to S4, the S-aggregator of its overlapped S-clusters
covering C. Also F5 will forward its packets to S4 if
packets only come from D. Therefore these packets can be
aggregated at S4.
Note that we do not specifically assign cells on the boundary
of the network to any S-cluster. They do not need to be in
any S-cluster if they are not adjacent to any other F-cluster,
or they can be assigned to the same S-cluster as its adjacent
cell.
The ToD for the one dimensional network has the
following property.
Property 1. For any two adjacent nodes in ToD in one dimensional
network, their packets will be aggregated either
at a first level aggregator, or will be aggregated at a second
level aggregator.
Proof. There are only three possibilities when an event triggers
nodes to generate packets. If only nodes in one cell are
triggered and generate the packets, their packets can be aggregated
at one F-aggregator since all nodes in a cell reside
185
in the same F-cluster, and all packets in an F-cluster will be
aggregated at the F-aggregator.
If an event triggers nodes in two cells, and these two cells
are in the same F-cluster, the packets can be aggregated at
the F-aggregator as well.
If an event triggers nodes in two cells, but these two
cells are in different F-clusters, they must reside in the same
S-cluster because S-clusters and F-clusters are interleaved.
Moreover, packets in one F-cluster will only originate from
the cell that is closer to the other F-cluster that also has packets
. Therefore the F-aggregator can forward packets to the
S-aggregator for aggregation accordingly, and packets will
be aggregated at the S-aggregator.
Since the cell is not smaller than the maximum size of an
event, it is impossible for an event to trigger more than two
cells, and this completes the proof.
3.2.2
ToD in Two Dimensional Networks
Section 3.2.1 only demonstrates the construction for one
row of nodes to illustrate the basic idea of dynamic forwarding
, and it works because each cell is only adjacent to one (or
none, if the cell is on the boundary of the network) of the F-clusters
. Therefore if an event spans two cells, the two cells
are either in the same F-cluster or in the same S-cluster, and
the F-aggregator can conjecture whether to forward the packets
to the S-aggregator, or to the sink directly. When we consider
other cells and F-clusters in the adjacent row, a cell on
the boundary of an F-cluster might be adjacent to multiple F-clusters
. If an event spans multiple cells, each F-aggregator
may have multiple choices of S-aggregators if the cells in
their F-cluster are adjacent to multiple F-clusters. If these F-aggregators
select different S-aggregators, their packets will
not be aggregated. However, the ideas presented in 1D networks
can be extended for the 2D networks. But instead of
guaranteeing that packets will be aggregated within two steps
as in the 1D case (aggregating either at an F-aggregator or an
S-aggregator), the ToD in 2D guarantees that the packets can
be aggregated within three steps.
We first define the cells and clusters in two dimensions.
For the ease of understanding, we use grid clustering to illustrate
the construction. As defined before, the size of a cell is
not less than the maximum size of an event, and an F-cluster
must cover all the cells that an event might span, which is
four cells in 2D grid-clustering. Therefore the entire network
is divided into F-clusters, and each F-cluster contains
four cells. The S-clusters have to cover all adjacent cells in
different F-clusters. Each F-cluster and S-cluster also has
a cluster-head acting as the aggregator to aggregate packets
. Fig. 5 shows a 5
× 5 network with its F-clusters and
S-clusters.
Since the size of a cell (one side of the square cell) must
be greater or equal to the maximum size of an event (diameter
of the event), an event can span only one, two, three, or
four cells as illustrated in Fig. 6. If the event only spans cells
in the same F-cluster, the packets can be aggregated at the
F-aggregator. Therefore we only consider scenarios where
an event spans cells in multiple F-clusters.

(a) F-clusters
(c) S-cluters
A B
C
D
(b) Cells
G H
I
E
F
C1
A4 B3
B1 C2
A3
A1 A2
B2
B4  C3 C4
D3
D1 D2
D4 E3
E1 E2
E4 F3
F1 F2
F4
G3
G1 G2
G4 H3
H1 H2
H4 I3
I1 I2
I4
S1 S2
S3 S4
C1
A4
B3
B1 C2
A3
A1
A2
B2
B4  C3 C4
D3
D1
D2
D4
E3
E1 E2
E4 F3
F1 F2
F4
G3
G1 G2
G4 H3
H1 H2
H4 I3
I1 I2
I4
2
2
2


Figure 5.
Grid-clustering for a two-dimension network. (a) The network
is divided into 5
× 5 F-clusters. (b) Each F-cluster contains four
cells. For example the F-cluster A in (a) contains cell A1, A2, A3, and A4.
(c) The S-clusters have to cover all adjacent cells in different F-clusters.
Each S-cluster contains four cells from four different F-clusters.


Figure 6.
The possible numbers of cells an event may span in 2
× 2
cells, which are one, two, three, and four from left to right. The four
cells in each case are any instance of four cells in the network. They
may be in the same F-cluster or different F-clusters.
Fig. 7 shows four basic scenarios that an F-aggregator
may encounter when collecting all packets generated in its
F-cluster. All other scenarios are only different combinations
of these four scenarios. If packets originate from three
or four cells in the same F-cluster, the F-aggregator knows
that no other nodes in other F-clusters have packets, and it
can forward the packets directly to the sink. If only one or
two cells generate packets, it is possible that other F-clusters
also have packets. We assume that the region spanned by an
event is contiguous. So simultaneous occurrence of scenarios
of (a) and (c), or (b) and (d), is impossible in the F-cluster.
However, such scenarios are possible in presence of losses in
a real environment where packets from third or fourth cluster
are lost. In such cases the F-aggregator can just forward the
packets directly to the sink because no other F-cluster will
have packets from the same event.

Figure 7.
All possible scenarios in an F-aggregator's point of view.
Each case shows 3
× 3 F-clusters, and the aggregator of the center F-cluster
is making the decision. The dark grayed squares are cells that
generate packets, and the light grayed squares represent the corresponding
S-cluster of the dark grayed cells.
When the F-aggregator collects all packets within its cluster
, it knows which cells the packets come from and forwards
the packets to best suited S-aggregator for further aggregation
. For example, if the packets only come from one cell
as in case (a) in Fig. 7, the F-aggregator can forward the
packet to the S-aggregator of the S-cluster that covers that
186
cell. However, if packets come from two cells in an F-cluster,
the two cells must be in different S-clusters. For example,
as in Fig. 8 where the F-aggregator of F-cluster X receives
packets from two cells, is the combination of case (a) and (b)
in Fig. 7. It is possible that the F-aggregator of F-cluster Y
may 