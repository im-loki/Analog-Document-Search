Parallel Crawlers
ABSTRACT
In this paper we study how we can design an effective parallel
crawler. As the size of the Web grows, it becomes imperative
to parallelize a crawling process, in order to finish downloading
pages in a reasonable amount of time. We first propose
multiple architectures for a parallel crawler and identify fundamental
issues related to parallel crawling. Based on this
understanding, we then propose metrics to evaluate a parallel
crawler, and compare the proposed architectures using
40 million pages collected from the Web. Our results clarify
the relative merits of each architecture and provide a good
guideline on when to adopt which architecture.
Categories and Subject Descriptors
H.5.4 [Hypertext/Hypermedia]: Architectures;
H.3.4 [Systems and Software]: Distributed Systems

General Terms
Management, Performance, Design

INTRODUCTION
A crawler is a program that downloads and stores Web
pages, often for a Web search engine. Roughly, a crawler
starts off by placing an initial set of URLs, S
0
, in a queue,
where all URLs to be retrieved are kept and prioritized.
From this queue, the crawler gets a URL (in some order),
downloads the page, extracts any URLs in the downloaded
page, and puts the new URLs in the queue. This process is
repeated until the crawler decides to stop. Collected pages
are later used for other applications, such as a Web search
engine or a Web cache.
As the size of the Web grows, it becomes more difficult to
retrieve the whole or a significant portion of the Web using
a single process. Therefore, many search engines often run
multiple processes in parallel to perform the above task, so
that download rate is maximized. We refer to this type of
crawler as a parallel crawler.
In this paper we study how we should design a parallel
crawler, so that we can maximize its performance (e.g.,
Copyright is held by the author/owner(s).
WWW2002
, May 7­11, 2002, Honolulu, Hawaii, USA.
ACM 1-58113-449-5/02/0005.
download rate) while minimizing the overhead from parallelization
. We believe many existing search engines already
use some sort of parallelization, but there has been little
scientific research conducted on this topic. Thus, little has
been known on the tradeoffs among various design choices
for a parallel crawler. In particular, we believe the following
issues make the study of a parallel crawler challenging and
interesting:
· Overlap: When multiple processes run in parallel to
download pages, it is possible that different processes
download the same page multiple times. One process
may not be aware that another process has already
downloaded the page. Clearly, such multiple downloads
should be minimized to save network bandwidth
and increase the crawler's effectiveness. Then how can
we coordinate the processes to prevent overlap?
· Quality: Often, a crawler wants to download "important"
pages first, in order to maximize the "quality"
of the downloaded collection. However, in a parallel
crawler, each process may not be aware of the whole
image of the Web that they have collectively downloaded
so far. For this reason, each process may make
a crawling decision solely based on its own image of
the Web (that itself has downloaded) and thus make
a poor crawling decision. Then how can we make sure
that the quality of the downloaded pages is as good for
a parallel crawler as for a centralized one?
· Communication bandwidth: In order to prevent overlap
, or to improve the quality of the downloaded pages,
crawling processes need to periodically communicate
to coordinate with each other. However, this communication
may grow significantly as the number of crawling
processes increases. Exactly what do they need to
communicate and how significant would this overhead
be? Can we minimize this communication overhead
while maintaining the effectiveness of the crawler?
While challenging to implement, we believe that a parallel
crawler has many important advantages, compared to a
single-process crawler:
· Scalability: Due to enormous size of the Web, it is often
imperative to run a parallel crawler. A single-process
crawler simply cannot achieve the required download
rate in certain cases.
· Network-load dispersion: Multiple crawling processes
of a parallel crawler may run at geographically distant
124
locations, each downloading "geographically-adjacent"
pages. For example, a process in Germany may download
all European pages, while another one in Japan
crawls all Asian pages. In this way, we can disperse
the network load to multiple regions. In particular,
this dispersion might be necessary when a single network
cannot handle the heavy load from a large-scale
crawl.
· Network-load reduction: In addition to the dispersing
load, a parallel crawler may actually reduce the network
load.
For example, assume that a crawler in
North America retrieves a page from Europe. To be
downloaded by the crawler, the page first has to go
through the network in Europe, then the Europe-to-North
America inter-continental network and finally
the network in North America. Instead, if a crawling
process in Europe collects all European pages, and
if another process in North America crawls all North
American pages, the overall network load will be reduced
, because pages go through only "local" networks.
Note that the downloaded pages may need to be transferred
later to a central location, so that a central index
can be built. However, even in that case, we believe
that the transfer can be significantly smaller than the
original page download traffic, by using some of the
following methods:
­
Compression: Once the pages are collected and
stored, it is easy to compress the data before sending
them to a central location.
­
Difference: Instead of sending the entire image
with all downloaded pages, we may first take difference
between previous image and the current
one and send only this difference. Since many
pages are static and do not change very often,
this scheme can significantly reduce the network
traffic.
­
Summarization: In certain cases, we may need
only a central index, not the original pages themselves
. In this case, we may extract the necessary
information for the index construction (e.g., postings
list) and transfer this data only.
To build an effective web crawler, we clearly need to address
many more challenges than just parallelization. For
example, a crawler needs to figure out how often a page
changes and how often it would revisit the page in order to
maintain the page up to date [7, 10]. Also, it has to make
sure that a particular Web site is not flooded with its HTTP
requests during a crawl [17, 12, 24]. In addition, it has to
carefully select what page to download and store in its limited
storage space in order to make the best use of its stored
collection of pages [9, 5, 11]. While all of these issues are
important, we focus on the crawler parallelization in this
paper, because this problem has been paid significantly less
attention than the others.
In summary, we believe a parallel crawler has many advantages
and poses interesting challenges. In particular, we
believe our paper makes the following contributions:
· We identify major issues and problems related to a
parallel crawler and discuss how we can solve these
problems.
· We present multiple techniques for a parallel crawler
and discuss their advantages and disadvantages. As far
as we know most of these techniques have not been described
in open literature. (Very little is known about
the internals of crawlers, as they are closely guarded
secrets.)
· Using a large dataset (40M web pages) collected from
the Web, we experimentally compare the design choices
and study their tradeoffs quantitatively.
· We propose various optimization techniques that can
minimize the coordination effort between crawling processes
, so that they can operate more independently
while maximizing their effectiveness.
1.1
Related work
Web crawlers have been studied since the advent of the
Web [18, 23, 4, 22, 14, 6, 19, 12, 9, 5, 11, 10, 7]. These
studies can be roughly categorized into one of the following
topics:
· General architecture [22, 14, 6, 19, 12]: The work in
this category describes the general architecture of a
Web crawler and studies how a crawler works. For example
, Reference [14] describes the architecture of the
Compaq SRC crawler and its major design goals. Some
of these studies briefly describe how the crawling task
is parallelized. For instance, Reference [22] describes
a crawler that distributes individual URLs to multiple
machines, which download Web pages in parallel.
The downloaded pages are then sent to a central machine
, on which links are extracted and sent back to
the crawling machines. However, these studies do not
carefully compare various issues related to a parallel
crawler and how design choices affect performance. In
this paper, we first identify multiple techniques for a
parallel crawler and compare their relative merits using
real Web data.
· Page selection [9, 5, 11]: Since many crawlers can
download only a small subset of the Web, crawlers need
to carefully decide what page to download. By retrieving
"important" or "relevant" pages early, a crawler
may improve the "quality" of the downloaded pages.
The studies in this category explore how a crawler can
discover and identify "important" pages early, and propose
various algorithms to achieve this goal. In our paper
, we study how parallelization affects some of these
techniques and explain how we can fix the problems
introduced by parallelization.
· Page update [10, 7]: Web crawlers need to update the
downloaded pages periodically, in order to maintain
the pages up to date. The studies in this category
discuss various page revisit policies to maximize the
"freshness" of the downloaded pages.
For example,
Reference [7] studies how a crawler should adjust revisit
frequencies for pages when the pages change at
different rates. We believe these studies are orthogonal
to what we discuss in this paper.
There also exists a significant body of literature studying
the general problem of parallel and distributed computing
[21, 25]. Some of these studies focus on the design of efficient
parallel algorithms. For example, References [20, 16]
125
present various architectures for parallel computing, propose
algorithms that solve various problems (e.g., finding
maximum cliques) under the architecture, and study the
complexity of the proposed algorithms. While the general
principles described are being used in our work,
1
none of
the existing solutions can be directly applied to the crawling
problem.
Another body of literature designs and implements distributed
operating systems, where a process can use distributed
resources transparently (e.g., distributed memory,
distributed file systems) [25, 1]. Clearly, such OS-level support
makes it easy to build a general distributed application
, but we believe that we cannot simply run a centralized
crawler on a distributed OS to achieve parallelism. A web
crawler contacts millions of web sites in a short period of
time and consumes extremely large network, storage and
memory resources. Since these loads push the limit of existing
hardwares, the task should be carefully partitioned
among processes and they should be carefully coordinated.
Therefore, a general-purpose distributed operating system
that does not understand the semantics of web crawling will
lead to unacceptably poor performance.
ARCHITECTURE OF A PARALLEL CRAWLER
In Figure 1 we illustrate the general architecture of a parallel
crawler. A parallel crawler consists of multiple crawling
processes, which we refer to as
C-proc's. Each C-proc performs
the basic tasks that a single-process crawler conducts.
It downloads pages from the Web, stores the pages locally,
extracts URLs from the downloaded pages and follows links.
Depending on how the
C-proc's split the download task,
some of the extracted links may be sent to other
C-proc's.
The
C-proc's performing these tasks may be distributed either
on the same local network or at geographically distant
locations.
· Intra-site parallel crawler: When all C-proc's run on
the same local network and communicate through a
high speed interconnect (such as LAN), we call it an
intra-site parallel crawler. In Figure 1, this scenario
corresponds to the case where all
C-proc's run only on
the local network on the top. In this case, all
C-proc's
use the same local network when they download pages
from remote Web sites. Therefore, the network load
from
C-proc's is centralized at a single location where
they operate.
· Distributed crawler: When C-proc's run at geographically
distant locations connected by the Internet (or
a wide area network), we call it a distributed crawler.
For example, one
C-proc may run in the US, crawling
all US pages, and another
C-proc may run in France,
crawling all European pages. As we discussed in the
introduction, a distributed crawler can disperse and
even reduce the load on the overall network.
When
C-proc's run at distant locations and communicate
through the Internet, it becomes important how
often and how much
C-proc's need to communicate.
The bandwidth between
C-proc's may be limited and
1
For example, we may consider that our proposed solution
is a variation of "divide and conquer" approach, since we
partition and assign the Web to multiple processes.
C-proc
. . .
C-proc
Local connect
C-proc
collected pages
queues of URLs to visit
. . .
C-proc
Local connect
NET
INTER
Figure 1: General architecture of a parallel crawler
1
S
2
S
1
2
(C  )
(C  )
b
a
c
d
e
f
g
h
i
Figure 2: Site S
1
is crawled by C
1
and site S
2
is
crawled by C
2
sometimes unavailable, as is often the case with the
Internet.
When multiple
C-proc's download pages in parallel, different
C-proc's may download the same page multiple times. In
order to avoid this overlap,
C-proc's need to coordinate with
each other on what pages to download. This coordination
can be done in one of the following ways:
· Independent: At one extreme, C-proc's may download
pages totally independently without any coordination.
That is, each
C-proc starts with its own set of seed
URLs and follows links without consulting with other
C-proc's. In this scenario, downloaded pages may overlap
, but we may hope that this overlap will not be significant
, if all
C-proc's start from different seed URLs.
While this scheme has minimal coordination overhead
and can be very scalable, we do not directly study
this option due to its overlap problem. Later we will
consider an improved version of this option, which significantly
reduces overlap.
· Dynamic assignment: When there exists a central coordinator
that logically divides the Web into small partitions
(using a certain partitioning function) and dy-namically
assigns each partition to a
C-proc for download
, we call it dynamic assignment.
For example, assume that a central coordinator partitions
the Web by the site name of a URL. That
is, pages in the same site (e.g., http://cnn.com/top.
html and http://cnn.com/content.html) belong to
126
the same partition, while pages in different sites belong
to different partitions. Then during a crawl, the
central coordinator constantly decides on what partition
to crawl next (e.g., the site cnn.com) and sends
URLs within this partition (that have been discovered
so far) to a
C-proc as seed URLs. Given this request,
the
C-proc downloads the pages and extracts links from
them. When the extracted links point to pages in the
same partition (e.g., http://cnn.com/article.html),
the
C-proc follows the links, but if a link points to a
page in another partition (e.g., http://nytimes.com/
index.html), the
C-proc reports the link to the central
coordinator. The central coordinator later uses
this link as a seed URL for the appropriate partition.
Note that the Web can be partitioned at various gran-ularities
. At one extreme, the central coordinator may
consider every page as a separate partition and assign
individual URLs to
C-proc's for download. In this case,
a
C-proc does not follow links, because different pages
belong to separate partitions.
It simply reports all
extracted URLs back to the coordinator. Therefore,
the communication between a
C-proc and the central
coordinator may vary dramatically, depending on the
granularity of the partitioning function.
· Static assignment: When the Web is partitioned and
assigned to each
C-proc before they start to crawl, we
call it static assignment. In this case, every
C-proc
knows which
C-proc is responsible for which page during
a crawl, and the crawler does not need a central
coordinator. We will shortly discuss in more detail
how
C-proc's operate under this scheme.
In this paper, we mainly focus on static assignment because
of its simplicity and scalability, and defer the study of
dynamic assignment to future work. Note that in dynamic
assignment, the central coordinator may become the major
bottleneck, because it has to maintain a large number of
URLs reported from all
C-proc's and has to constantly coordinate
all
C-proc's. Thus the coordinator itself may also
need to be parallelized.
CRAWLING MODES FOR STATIC ASSIGNMENT
Under static assignment, each
C-proc is responsible for
a certain partition of the Web and has to download pages
within the partition. However, some pages in the partition
may have links to pages in another partition. We refer to
this type of link as an inter-partition link. To illustrate how
a
C-proc may handle inter-partition links, we use Figure 2 as
our example. In the figure, we assume two
C-proc's, C
1
and
C
2
, are responsible for sites S
1
and S
2
, respectively. For
now, we assume that the Web is partitioned by sites and
that the Web has only S
1
and S
2
. Also, we assume that
each
C-proc starts its crawl from the root page of each site,
a and f.
1. Firewall mode: In this mode, each
C-proc downloads
only the pages within its partition and does not follow
any inter-partition link. All inter-partition links are
ignored and thrown away. For example, the links a

g, c
g and h  d in Figure 2 are ignored and thrown
away by C
1
and C
2
.
In this mode, the overall crawler does not have any
overlap in the downloaded pages, because a page can
be downloaded by only one
C-proc, if ever. However,
the overall crawler may not download all pages that it
has to download, because some pages may be reachable
only through inter-partition links. For example,
in Figure 2, C
1
can download a, b and c, but not d and
e, because they can be reached only through h
d
link. However,
C-proc's can run quite independently
in this mode, because they do not conduct any run-time
coordination or URL exchanges.
2. Cross-over mode: Primarily, each
C-proc downloads
pages within its partition, but when it runs out of
pages in its partition, it also follows inter-partition
links. For example, consider C
1
in Figure 2. Process
C
1
first downloads pages a, b and c by following links
from a. At this point, C
1
runs out of pages in S
1
, so
it follows a link to g and starts exploring S
2
. After
downloading g and h, it discovers a link to d in S
1
, so
it comes back to S
1
and downloads pages d and e.
In this mode, downloaded pages may clearly overlap
(pages g and h are downloaded twice), but the overall
crawler can download more pages than the firewall
mode (C
1
downloads d and e in this mode). Also, as
in the firewall mode,
C-proc's do not need to communicate
with each other, because they follow only the
links discovered by themselves.
3. Exchange mode: When
C-proc's periodically and
incrementally exchange inter-partition URLs, we say
that they operate in an exchange mode. Processes do
not follow inter-partition links.
For example, C
1
in Figure 2 informs C
2
of page g after
it downloads page a (and c) and C
2
transfers the URL
of page d to C
1
after it downloads page h. Note that
C
1
does not follow links to page g. It only transfers
the links to C
2
, so that C
2
can download the page. In
this way, the overall crawler can avoid overlap, while
maximizing coverage.
Note that the firewall and the cross-over modes give
C-proc's
much independence (C-proc's do not need to communicate
with each other), but they may download the same
page multiple times, or may not download some pages. In
contrast, the exchange mode avoids these problems but requires
constant URL exchange between
C-proc's.
3.1
URL exchange minimization
To reduce URL exchange, a crawler based on the exchange
mode may use some of the following techniques:
1. Batch communication: Instead of transferring an
inter-partition URL immediately after it is discovered,
a
C-proc may wait for a while, to collect a set of URLs
and send them in a batch. That is, with batching, a
C-proc collects all inter-partition URLs until it downloads
k pages. Then it partitions the collected URLs
and sends them to an appropriate
C-proc. Once these
URLs are transferred, the
C-proc then purges them
and starts to collect a new set of URLs from the next
downloaded pages. Note that a
C-proc does not maintain
the list of all inter-partition URLs discovered so
far. It only maintains the list of inter-partition links
127
in the current batch, in order to minimize the memory
overhead for URL storage.
This batch communication has various advantages over
incremental communication. First, it incurs less communication
overhead, because a set of URLs can be
sent in a batch, instead of sending one URL per message
. Second, the absolute number of exchanged URLs
will also decrease. For example, consider C
1
in Figure
2. The link to page g appears twice, in page a and
in page c. Therefore, if C
1
transfers the link to g after
downloading page a, it needs to send the same URL
again after downloading page c.
2
In contrast, if C
1
waits until page c and sends URLs in batch, it needs
to send the URL for g only once.
2. Replication: It is known that the number of incoming
links to pages on the Web follows a Zipfian distribution
[3, 2, 26]. That is, a small number of Web
pages have an extremely large number of links pointing
to them, while a majority of pages have only a small
number of incoming links.
Thus, we may significantly reduce URL exchanges, if
we replicate the most "popular" URLs at each
C-proc
(by most popular, we mean the URLs with most incoming
links) and stop transferring them between
C-proc's
. That is, before we start crawling pages, we
identify the most popular k URLs based on the image
of the Web collected in a previous crawl. Then
we replicate these URLs at each
C-proc, so that the
C-proc's do not exchange them during a crawl. Since
a small number of Web pages have a large number of
incoming links, this scheme may significantly reduce
URL exchanges between
C-proc's, even if we replicate
a small number of URLs.
Note that some of the replicated URLs may be used
as the seed URLs for a
C-proc. That is, if some URLs
in the replicated set belong to the same partition that
a
C-proc is responsible for, the C-proc may use those
URLs as its seeds rather than starting from other pages.
Also note that it is possible that each
C-proc tries to
discover popular URLs on the fly during a crawl, instead
of identifying them based on the previous image
. For example, each
C-proc may keep a "cache"
of recently seen URL entries. This cache may pick
up "popular" URLs automatically, because the popular
URLs show up repeatedly. However, we believe
that the popular URLs from a previous crawl will be a
good approximation for the popular URLs in the current
Web; Most popular Web pages (such as Yahoo!)
maintain their popularity for a relatively long period
of time, even if their exact popularity may change
slightly.
3.2
Partitioning function
So far, we have mainly assumed that the Web pages are
partitioned by Web sites. Clearly, there exists a multitude
of ways to partition the Web, including the following:
1. URL-hash based: Based on the hash value of the
URL of a page, we assign the page to a
C-proc. In
2
When it downloads page c, it does not remember whether
the link to g has been already sent.
this scheme, pages in the same site can be assigned
to different
C-proc's. Therefore, the locality of link
structure
3
is not reflected in the partition, and there
will be many inter-partition links.
2. Site-hash based: Instead of computing the hash value
on an entire URL, we compute the hash value only
on the site name of a URL (e.g., cnn.com in http:
//cnn.com/index.html) and assign the page to a
C-proc
.
In this scheme, note that the pages in the same site
will be allocated to the same partition. Therefore, only
some of the inter-site links will be inter-partition links,
and thus we can reduce the number of inter-partition
links quite significantly compared to the URL-hash
based scheme.
3. Hierarchical: Instead of using a hash-value, we may
partition the Web hierarchically based on the URLs
of pages. For example, we may divide the Web into
three partitions (the pages in the .com domain, .net
domain and all other pages) and allocate them to three
C-proc's. Even further, we may decompose the Web by
language or country (e.g., .mx for Mexico).
Because pages hosted in the same domain or country
may be more likely to link to pages in the same domain,
scheme may have even fewer inter-partition links than
the site-hash based scheme.
In this paper, we do not consider the URL-hash based scheme,
because it generates a large number of inter-partition links.
When the crawler uses URL-hash based scheme,
C-proc's
need to exchange much larger number of URLs (exchange
mode), and the coverage of the overall crawler can be much
lower (firewall mode).
In addition, in our later experiments, we will mainly use
the site-hash based scheme as our partitioning function. We
chose this option because it is much simpler to implement,
and because it captures the core issues that we want to
study.
For example, under the hierarchical scheme, it is
not easy to divide the Web into equal size partitions, while
it is relatively straightforward under the site-hash based
scheme.
4
Also, we believe we can interpret the results from
the site-hash based scheme as the upper/lower bound for
the hierarchical scheme. For instance, assuming Web pages
link to more pages in the same domain, the number of inter-partition
links will be lower in the hierarchical scheme than
in the site-hash based scheme (although we could not confirm
this trend in our experiments).
In Figure 3, we summarize the options that we have discussed
so far.
The right-hand table in the figure shows
more detailed view on the static coordination scheme. In
the diagram, we highlight the main focus of our paper with
dark grey. That is, we mainly study the static coordination
scheme (the third column in the left-hand table) and we use
the site-hash based partitioning for our experiments (the
second row in the second table). However, during our discussion
, we will also briefly explore the implications of other
3
According to our experiments, about 90% of the links in a
page point to pages in the same site on average.
4
While the sizes of individual Web sites vary, the sizes of
partitions are similar, because each partition contains many
Web sites and their average sizes are similar among partitions
.
128
Type
URL-hash
Site-hash
Hierarchical
Distributed
Intra-site
Independent
Dynamic
Static
Batch Replication None
Main focus
Also discussed
Partitioning
Exchange
Coordination
Firewall
Cross-over
Mode
Not discussed further
Figure 3: Summary of the options discussed
options. For instance, the firewall mode is an "improved"
version of the independent coordination scheme (in the first
table), so our study on the firewall mode will show the implications
of the independent coordination scheme. Also, we
roughly estimate the performance of the URL-hash based
scheme (first row in the second table) when we discuss the
results from the site-hash based scheme.
Given our table of crawler design space, it would be very
interesting to see what options existing search engines selected
for their own crawlers. Unfortunately, this information
is impossible to obtain in most cases because companies
consider their technologies proprietary and want to keep
them secret. The only two crawler designs that we know of
are the prototype Google crawler [22] (when it was developed
at Stanford) and the Mercator crawler [15] at Compaq.
The prototype google crawler used the intra-site, static and
site-hash based scheme and ran in exchange mode [22]. The
Mercator crawler uses the site-based hashing scheme.
EVALUATION MODELS
In this section, we define metrics that will let us quantify
the advantages or disadvantages of different parallel crawling
schemes. These metrics will be used later in our experiments
.
1. Overlap: When multiple
C-proc's are downloading
Web pages simultaneously, it is possible that different
C-proc's download the same page multiple times.
Multiple downloads of the same page are clearly undesirable
.
More precisely, we define the overlap of downloaded
pages as
N-I
I
. Here, N represents the total number of
pages downloaded by the overall crawler, and I represents
the number of unique pages downloaded, again,
by the overall crawler. Thus, the goal of a parallel
crawler is to minimize the overlap.
Note that a parallel crawler does not have an overlap
problem, if it is based on the firewall mode (Section 3,
Item 1) or the exchange mode (Section 3, Item 3). In
these modes, a
C-proc downloads pages only within its
own partition, so the overlap is always zero.
2. Coverage: When multiple
C-proc's run independently,
it is possible that they may not download all pages that
they have to. In particular, a crawler based on the firewall
mode (Section 3, Item 1) may have this problem,
because its
C-proc's do not follow inter-partition links
nor exchange the links with others.
To formalize this notion, we define the coverage of
downloaded pages as
I
U
, where U represents the total
number of pages that the overall crawler has to download
, and I is the number of unique pages downloaded
by the overall crawler. For example, in Figure 2, if C
1
downloaded pages a, b and c, and if C
2
downloaded
pages f through i, the coverage of the overall crawler
is
7
9
= 0.77, because it downloaded 7 pages out of 9.
3. Quality: Often, crawlers cannot download the whole
Web, and thus they try to download an "important" or
"relevant" section of the Web. For example, a crawler
may have storage space only for 1 million pages and
may want to download the "most important" 1 million
pages. To implement this policy, a crawler needs
a notion of "importance" of pages, often called an importance
metric [9].
For example, let us assume that the crawler uses backlink
count as its importance metric. That is, the crawler
considers a page p important when a lot of other pages
point to it. Then the goal of the crawler is to download
the most highly-linked 1 million pages. To achieve this
goal, a single-process crawler may use the following
method [9]: The crawler constantly keeps track of how
many backlinks each page has from the pages that it
has already downloaded, and first visits the page with
the highest backlink count. Clearly, the pages downloaded
in this way may not be the top 1 million pages,
because the page selection is not based on the entire
Web, only on what has been seen so far. Thus, we may
formalize the notion of "quality" of downloaded pages
as follows [9]:
First, we assume a hypothetical oracle crawler, which
knows the exact importance of every page under a certain
importance metric. We assume that the oracle
crawler downloads the most important N pages in total
, and use P
N
to represent that set of N pages. We
also use A
N
to represent the set of N pages that an actual
crawler would download, which would not be necessarily
the same as P
N
. Then we define
|A
N
P
N
|
|P
N
|
as
the quality of downloaded pages by the actual crawler.
Under this definition, the quality represents the fraction
of the true top N pages that are downloaded by
129
the crawler.
Note that the quality of a parallel crawler may be
worse than that of a single-process crawler, because
many importance metrics depend on the global structure
of the Web (e.g., backlink count). That is, each
C-proc
in a parallel crawler may know only the pages that
are downloaded by itself, and thus have less information
on page importance than a single-process crawler
does.
On the other hand, a single-process crawler
knows all pages it has downloaded so far. Therefore, a
C-proc in a parallel crawler may make a worse crawling
decision than a single-process crawler.
In order to avoid this quality problem,
C-proc's need to
periodically exchange information on page importance.
For