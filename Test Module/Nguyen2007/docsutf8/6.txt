A Distributed 3D Graphics Library
Abstract
We present Repo-3D, a general-purpose, object-oriented library for
developing distributed, interactive 3D graphics applications across
a range of heterogeneous workstations. Repo-3D is designed to
make it easy for programmers to rapidly build prototypes using a
familiar multi-threaded, object-oriented programming paradigm.
All data sharing of both graphical and non-graphical data is done
via general-purpose remote and replicated objects, presenting the
illusion of a single distributed shared memory. Graphical objects
are directly distributed, circumventing the "duplicate database"
problem and allowing programmers to focus on the application
details.
Repo-3D is embedded in Repo, an interpreted, lexically-scoped,
distributed programming language, allowing entire applications to
be rapidly prototyped. We discuss Repo-3D's design, and introduce
the notion of local variations to the graphical objects, which allow
local changes to be applied to shared graphical structures. Local
variations are needed to support transient local changes, such as
highlighting, and responsive local editing operations. Finally, we
discuss how our approach could be applied using other programming
languages, such as Java.
Categories and Subject Descriptors:
D.1.3 [Programming
Techniques
]: Concurrent Programming--Distributed Programming
; H.4.1 [Information Systems Applications]: Office
Automation--Groupware; I.3.2 [Computer Graphics]: Graphics
Systems--Distributed/network graphics; I.3.6 [Computer Graphics
]: Methodology and Techniques--Graphics data structures and
data types; I.3.7 [Computer Graphics]: Three-Dimensional
Graphics and Realism--Virtual reality.
INTRODUCTION
Traditionally,  distributed graphics has referred to the architecture
of a single graphical application whose components are distributed
over multiple machines [14, 15, 19, 27<A href="6.html#1">] (Figure 1
a
). By taking
advantage of the combined power of multiple machines, and the
particular features of individual machines, otherwise impractical
applications became feasible. However, as machines have grown
more powerful and application domains such as Computer
1. {bm,feiner}@cs.columbia.edu, http://www.cs.columbia.edu/graphics
Supported Cooperative Work (CSCW) and Distributed Virtual
Environments (DVEs) have been making the transition from
research labs to commercial products, the term distributed graphics
is increasingly used to refer to systems for distributing the shared
graphical state of multi-display/multi-person, distributed, interactive
applications<A href="6.html#1"> (Figure 1b). This is the definition that we use here.
While many excellent, high-level programming libraries are
available for building stand-alone 3D applications (e.g. Inventor
[35], Performer [29], Java 3D [33]), there are no similarly powerful
and general libraries for building distributed 3D graphics applications
. All CSCW and DVE systems with which we are familiar
(e.g., [1, 7, 11, 12, 16, 28, 30, 31, 32, 34, 37, 41]) use the following
approach: A mechanism is provided for distributing application
state (either a custom solution or one based on a general-purpose
distributed programming environment, such as ISIS [4] or Obliq
[8]), and the state of the graphical display is maintained separately
in the local graphics library. Keeping these "dual databases" synchronized
is a complex, tedious, and error-prone endeavor. In contrast
, some non-distributed libraries, such as Inventor [35], allow
programmers to avoid this problem by using the graphical scene
description to encode application state. Extending this "single database"
model to a distributed 3D graphics library is the goal of our
work on Repo-3D.
Repo-3D is an object-oriented, high-level graphics package,
derived from Obliq-3D [25]. Its 3D graphics facilities are similar to
those of other modern high-level graphics libraries. However, the
objects used to create the graphical scenes are directly distribut-able
--from the programmer's viewpoint, the objects reside in one
large distributed shared memory (DSM) instead of in a single
process. The underlying system replicates any of the fine-grained
objects across as many processes as needed, with no additional
effort on the part of the programmer. Updates to objects are
automatically reflected in all replicas, with any required objects
automatically distributed as needed. By integrating the replicated
objects into the programming languages we use, distributed
applications may be built using Repo-3D with little more difficulty
than building applications in a single process.
Figure 1:
Two meanings of distributed graphics: (a) a single logical
graphics system with distributed components, and (b) multiple distributed
logical graphics systems. We use the second definition here.
No matter how simple the construction of a distributed application
may be, a number of differences between distributed and
monolithic applications must be addressed. These include:
·
Distributed control. In a monolithic application, a single component
can oversee the application and coordinate activities
among the separate components by notifying them of changes
to the application state. This is not possible in a non-trivial distributed
application. Therefore, we must provide mechanisms
for different components to be notified of changes to the
distributed state.
·
Interactivity. Updates to distributed state will be slower than
updates to local state, and the amount of data that can be
distributed is limited by network bandwidth. If we do not want
to sacrifice interactive speed, we must be able to perform some
operations locally. For example, an object could be dragged
locally with the mouse, with only a subset of the changes
applied to the replicated state.
·
Local variations. There are times when a shared graphical
scene may need to be modified locally. For example, a
programmer may want to highlight the object under one user's
mouse pointer without affecting the scene graph viewed by
other users.
Repo-3D addresses these problems in two ways. First, a
programmer can associate a notification object with any replicated
object. The notification object's methods will be invoked when the
replicated object is updated. This allows reactive programs to be
built in a straightforward manner. To deal with the second and third
problems, we introduce the notion of local variations to graphical
objects. That is, we allow the properties of a graphical object to be
modified locally, and parts of the scene graph to be locally added,
removed, or replaced.
In<A href="6.html#2"> Section 2 we describe how we arrived at the solution presented
here.<A href="6.html#2"> Section 3 discusses related work, and<A href="6.html#3"> Section 4 offers a
detailed description of the underlying infrastructure that was used.
The design of Repo-3D is presented in <A href="6.html#5">Section 5, followed by
some examples and concluding remarks in Sectio<A href="6.html#8">ns 6 <A href="6.html#8">and 7.
BACKGROUND
Repo-3D was created as part of a project to support rapid prototyping
of distributed, interactive 3D graphical applications, with a
particular focus on DVEs. Our fundamental belief is that by
providing uniform high-level support for distributed programming
in the languages and toolkits we use, prototyping and experimenting
with distributed interactive applications can be (almost) as
simple as multi-threaded programming in a single process. While
care must be taken to deal with network delays and bandwidth
limitations at some stage of the program design (the languages and
toolkits ought to facilitate this), it should be possible to ignore such
issues until they become a problem. Our view can be summarized
by a quote attributed to Alan Kay, "Simple things should be
simple; complex things should be possible."
This is especially true during the exploration and prototyping
phase of application programming. If programmers are forced to
expend significant effort building the data-distribution components
of the application at an early stage, not only will less time be spent
exploring different prototypes, but radical changes in direction will
become difficult, and thus unlikely. For example, the implementation
effort could cause programs to get locked into using a communication
scheme that may eventually prove less than ideal, or even
detrimental, to the program's final design.
Since we are using object-oriented languages, we also believe
that data distribution should be tightly integrated with the
language's general-purpose objects. This lets the language's type
system and programming constructs reduce or eliminate errors in
the use of the data-distribution system. Language-level integration
also allows the system to exhibit a high degree of network data
transparency, or the ability for the programmer to use remote and
local data in a uniform manner. Without pervasive, structured,
high-level data-distribution support integrated into our programming
languages and libraries, there are applications that will never
be built or explored, either because there is too much programming
overhead to justify trying simple things ("simple things are not
simple"), or because the added complexity of using relatively
primitive tools causes the application to become intractable ("com-plex
things are not possible").
Of the tools available for integrating distributed objects into
programming languages, client-server data sharing is by far the
most common approach, as exemplified by CORBA [26],
Modula-3 Network Objects [5], and Java RMI [39]. Unfortunately,
interactive graphical applications, such as virtual reality, require
that the data used to refresh the display be local to the process
doing the rendering or acceptable frame refresh rates will not be
achieved. Therefore, pure client-server approaches are inappropriate
because at least some of the shared data must be replicated.
Furthermore, since the time delay of synchronous remote method
calls is unsuitable for rapidly changing graphical applications,
shared data should be updated asynchronously. Finally, when data
is replicated, local access must still be fast.
The most widely used protocols for replicated data consistency,
and thus many of the toolkits (e.g., ISIS [4] and Visual-Obliq [3]),
allow data updates to proceed unimpeded, but block threads reading
local data until necessary updates arrive. The same reason we
need replicated data in the first place--fast local read access to the
data--makes these protocols unsuitable for direct replication of the
graphical data. Of course, these protocols are fine for replicating
application state that will then be synchronized with a parallel
graphical scene description, but that is what we are explicitly trying
to avoid. Fortunately, there are replicated data systems (e.g.,
Orca [2] or COTERIE [24]) that provide replicated objects that are
well suited to interactive applications, and it is upon the second of
these systems that Repo-3D is built.
RELATED WORK
There has been a significant amount of work that falls under the
first, older definition of distributed graphics. A large number of
systems, ranging from established commercial products (e.g., IBM
Visualization Data Explorer [21]) to research systems (e.g.,
PARADISE [19] and ATLAS [14]), have been created to distribute
interactive graphical applications over a set of machines. However,
the goal of these systems is to facilitate sharing of application data
between processes, with one process doing the rendering. While
some of these systems can be used to display graphics on more
than one display, they were not designed to support high-level
sharing of graphical scenes.
Most high-level graphics libraries, such as UGA [40], Inventor
[35] and Java 3D [33], do not provide any support for distribution.
Others, such as Performer [29], provide support for distributing
components of the 3D graphics rendering system across multiple
processors, but do not support distribution across multiple
machines. One notable exception is TBAG [13], a high-level
constraint-based, declarative 3D graphics framework. Scenes in
TBAG are defined using constrained relationships between time-varying
functions. TBAG allows a set of processes to share a
single, replicated constraint graph. When any process asserts or
retracts a constraint, it is asserted or retracted in all processes.
However, this means that all processes share the same scene, and
that the system's scalability is limited because all processes have a
copy of (and must evaluate) all constraints, whether or not they are
interested in them. There is also no support for local variations of
the scene in different processes.
Machiraju [22] investigated an approach similar in flavor to ours,
but it was not aimed at the same fine-grained level of interactivity
and was ultimately limited by the constraints of the implementation
platform (CORBA and C++). For example, CORBA objects
are heavyweight and do not support replication, so much of their
effort was spent developing techniques to support object migration
and "fine-grained" object sharing. However, their fine-grained
objects are coarser than ours, and, more importantly, they do not
support the kind of lightweight, transparent replication we desire.
A programmer must explicitly choose whether to replicate, move,
or copy an object between processes when the action is to occur (as
opposed to at object creation time). Replicated objects are independent
new copies that can be modified and used to replace the original
--simultaneous editing of objects, or real-time distribution of
changes as they are made is not supported.
Of greater significance is the growing interest for this sort of system
in the Java and VRML communities. Java, like Modula-3, is
much more suitable as an implementation language than C or C++
because of its cross-platform compatibility and support for threads
and garbage collection: Without the latter two language features,
implementing complex, large-scale distributed applications is
extremely difficult. Most of the current effort has been focused on
using Java as a mechanism to facilitate multi-user VRML worlds
(e.g., Open Communities [38]). Unfortunately, these efforts
concentrate on the particulars of implementing shared virtual
environments and fall short of providing a general-purpose shared
graphics library. For example, the Open Communities work is
being done on top of SPLINE [1], which supports only a single
top-level world in the local scene database.
Most DVEs [11, 12, 16, 31, 32] provide support for creating
shared virtual environments, not general purpose interactive 3D
graphics applications. They implement a higher level of abstraction
, providing support for rooms, objects, avatars, collision detection
, and other things needed in single, shared, immersive virtual
environments. These systems provide neither general-purpose
programming facilities nor the ability to work with 3D scenes at a
level provided by libraries such as Obliq-3D or Inventor. Some use
communication schemes that prevent them from scaling beyond a
relatively small number of distributed processes, but for most the
focus is explicitly on efficient communication. SIMNET [7], and
the later NPSNet [41], are perhaps the best known large-scale
distributed virtual-environment systems. They use a fixed, well-defined
communication protocol designed to support a single,
large-scale, shared, military virtual environment.
The techniques for object sharing implemented in recent CSCW
toolkits [28, 30, 34, 37] provide some of the features we need,
particularly automatic replication of data to ease construction of
distributed applications. However, none of these toolkits has
integrated the distribution of data into its programming language's
object model as tightly as we desire. As a result, they do not provide
a high enough level of network data transparency or suffi-ciently
strong consistency guarantees. In groupware applications,
inconsistencies tend to arise when multiple users attempt to perform
conflicting actions: the results are usually obvious to the
users and can be corrected using social protocols. This is not an
acceptable solution for a general-purpose, distributed 3D graphics
toolkit. Furthermore, none of these CSCW systems provides any
support for asynchronous update notification, or is designed to
support the kind of large-scale distribution we have in mind.
Finally, while distributed games, such as Quake, have become
very popular, they only distribute the minimum amount of application
state necessary. They do not use (or provide) an abstract, high-level
distributed 3D graphics system.
UNDERLYING INFRASTRUCTURE
Our work was done in the Modula-3 programming language [18].
We decided to use Modula-3 because of the language itself and the
availability of a set of packages that provide a solid foundation for
our infrastructure. Modula-3 is a descendant of Pascal that corrects
many of its deficiencies, and heavily influenced the design of Java.
In particular, Modula-3 retains strong type safety, while adding
facilities for exception handling, concurrency, object-oriented
programming, and automatic garbage collection
2
. One of its most
important features for our work is that it gives us uniform access to
these facilities across all architectures.
Repo-3D relies on a number of Modula-3 libraries, as illustrated
in<A href="6.html#3"> Figure 2. Distributed data sharing is provided by two packages,
the Network Object client-server object package [5], and the
Replicated Object shared object package [2<A href="6.html#3">4] (see Section 4.1).
DistAnim-3D is derived from Anim-3D [25], a powerful, non-distributed
, general-purpose 3D library originally designed for 3D
algorithm animation (see<A href="6.html#5"> Section 4.2). Finally, Repo itself is a
direct descendant of Obliq [8], and uses the Replicated Object
package to add replicated data to Obliq (se<A href="6.html#5">e Section 4.3).
4.1  Distributed Shared Memory
Repo-3D's data sharing mechanism is based on the Shared Data-Object
Model of Distributed Shared Memory (DSM) [20]. DSM
allows a network of computers to be programmed much like a mul-tiprocessor
, since the programmer is presented with the familiar
paradigm of a common shared memory. The Shared Data-Object
Model of DSM is particularly well suited to our needs since it is a
high-level approach that can be implemented efficiently at the
application level. In this model, shared data is encapsulated in
user-defined objects and can only be accessed through those
objects' method calls. The DSM address space is partitioned
implicitly by the application programmer, with an object being the
smallest unit of sharing. All shared data is fully network transpar-2
. The Modula-3 compiler we used is available from Critical Mass, Inc. as
part of the Reactor programming environment. The compiler, and thus
our system, runs on all the operating systems we have available (plus
others): Solaris, IRIX, HP-UX, Linux, and Windows NT and 95.
Figure 2:
The architecture of Repo-3D. Aside from native graphics
libraries (X, Win32, OpenGL, Renderware) the Modula-3 runtime
shields most of the application from the OS. The Replicated Object
package uses an Event communication package and the Network
Object package. DistAnim-3D is implemented on top of a variety of
native graphics libraries and Replicated Objects. Repo exposes most of
the useful Modula-3 packages, as well as using Network Objects and
Replicated Objects to present a distributed shared memory model to
the programmer.
Operating System Services
Network Objects
Replicated Objects
Modula-3 Runtime
Events
Native
Graphics
DistAnim-3D
Repo
Repo-3D
Network
ent because it is encapsulated within the programming language
objects.
Distribution of new objects between the processes is as simple as
passing them back and forth as parameters to, or return values
from, method calls--the underlying systems take care of the rest.
3
Objects are only distributed to new processes as necessary, and (in
our system) are removed by the garbage collector when they are no
longer referenced. Furthermore, distributed garbage collection is
supported, so objects that are no longer referenced in any process
are removed completely.
There are three kinds of distributed object semantics in our DSM:
·
Simple objects correspond to normal data objects, and have no
special distributed semantics. When a simple object is copied
between processes, a new copy is created in the destination
process that has no implied relationship to the object in the
source process.
·
Remote objects have client-server distribution semantics. When
a remote object is copied between processes, all processes
except the one in which the object was created end up with a
proxy object that forwards method invocations across the
network to the original object.
·
Replicated objects have replicated distribution semantics.
When a replicated object is passed between processes, a new
replica is created in the destination process. If any replica is
changed, the change is reflected in all replicas.
The Network Object package provides support for remote
objects. It implements distributed garbage collection, exception
propagation back to the calling site, and automatic marshalling and
unmarshalling of method arguments and return values of virtually
any data type between heterogeneous machine architectures. The
package is similar to other remote method invocation (RMI) packages
developed later, such as the Java RMI library [39]. All method
invocations are forwarded to the original object, where they are
executed in the order they are received.
The Replicated Object package supports replicated objects. Each
process can call any method of an object it shares, just as it can
with a simple or remote object. We will describe the Replicated
Object package in more detail, as Repo-3D relies heavily on its
design, and the design of a replicated object system is less straightforward
than a remote one. The model supported by the Replicated
Object package follows two principles:
·
All operations on an instance of an object are atomic and
serializable. All operations are performed in the same order on
all copies of the object. If two methods are invoked simultaneously
, the order of invocation is nondeterministic, just as if
two threads attempted to access the same memory location
simultaneously in a single process.
·
The above principle applies to operations on single objects.
Making sequences of operations atomic is up to the programmer
.
The implementation of the Replicated Object package is based
on the approach used in the Orca distributed programming
language [2]. A full replication scheme is used, where a single
object is either fully replicated in a process or not present at all.
Avoiding partial replication significantly simplifies the implementation
and the object model, and satisfies the primary rationale for
replication: fast read-access to shared data. To maintain replication
consistency an update scheme is used, where updates to the object
are applied to all copies.
The method of deciding what is and is not an update is what
makes the Orca approach particularly interesting and easy to
implement. All methods are marked as either read or update methods
by the programmer who creates the object type. Read methods
are assumed to not change the state of the object and are therefore
applied immediately to the local object without violating consistency
. Update methods are assumed to change the state. To distribute
updates, arguments to the update method are marshalled into a
message and sent to all replicas. To ensure all updates are applied
in the same order, the current implementation of the Replicated
Object package designates a sequencer process for each object.
There may be more than one sequencer in the system to avoid
overloading one process with all the objects (in this case, each
object has its updates managed by exactly one of the sequencers.)
The sequencer is responsible for assigning a sequence number to
each message before it is sent to all object replicas. The replicas
then execute the incoming update messages in sequence. The process
that initiated the update does not execute the update until it
receives a message back from the sequencer and all updates with
earlier sequence numbers have been executed.
There are three very important reasons for choosing this
approach. First, it is easy to implement on top of virtually any
object-oriented language, using automatically generated object
subtypes and method wrappers that communicate with a simple
runtime system. We do this in our Modula-3 implementation, and it
would be equally applicable to an implementation in C++ or Java.
For example, the JSDT [36] data-sharing package in Java uses a
similar approach.
Second, the Replicated Object package does not pay attention to
(or even care) when the internal data fields of an object change.
This allows the programmer great flexibility in deciding exactly
what constitutes an update or not, and what constitutes the shared
state
4
. For example, objects could have a combination of global
and local state, and the methods that change the local state could
be classified as read methods since they do not modify the global
state. Alternatively, read methods could do some work locally and
then call an update method to propagate the results, allowing time-consuming
computation to be done once and the result distributed
in a clean way. We took advantage of both of these techniques in
implementing Repo-3D.
Finally, the immediate distribution of update methods ensures
that changes are distributed in a timely fashion, and suggests a
straightforward solution to the asynchronous notification problem.
The Replicated Object package generates a Notification Object
type for each Replicated Object type. These new objects have
methods corresponding to the update methods of their associated
Replicated Object. The arguments to these methods are the same as
the corresponding Replicated Object methods, plus an extra
argument to hold the Replicated Object instance. These notifiers
can be used by a programmer to receive notification of changes to
a Replicated Object in a structured fashion. To react to updates to a
Replicated Object instance, a programmer simply overrides the
methods of the corresponding Notification Object with methods
that react appropriately to those updates, and associates an instance
3. An important detail is how the communication is bootstrapped. In the
case of the Network and Replicated Object packages, to pass a first
object between processes, one of them exports the object to a special
network object demon
under some known name on some known
machine. The second process then retrieves the object.
4. Of course, it falls squarely on the shoulders of the programmer to
ensure that the methods provided always leave the object in a consistent
state. This is not significantly different than what needs to be done
when building a complex object that is simultaneously accessed by
multiple threads in a non-distributed system. For example, if a
programmer reads an array of numbers from inside the object and then
uses an update method to write a computed average back into the
object, the internal array may have changed before the average is
written, resulting in a classic inconsistency problem. In general,
methods that perform computations based on internal state (rather than
on the method arguments) are potentially problematic and need to be
considered carefully.
of it with the Replicated Object instance. Each time an update
method of the Replicated Object is invoked, the corresponding
method of the Notifier Object is also invoked. Notification Objects
eliminate the need for object polling and enable a "data-driven"
flow of control.
4.2  Obliq-3D
Obliq-3D is composed of Anim-3D, a 3D animation package
written in Modula-3, and a set of wrappers that expose Anim-3D to
the Obliq programming language (see<A href="6.html#5"> Section 4.3). Anim-3D is
based on three simple and powerful concepts: graphical objects for
building graphical scenes, properties for specifying the behavior of
the graphical objects, and input event callbacks to support interactive
behavior. Anim-3D uses the damage-repair model: whenever a
graphical object or property changes (is damaged), the image is
repaired without programmer intervention.
Graphical objects (GOs) represent all the logical entities in the
graphical scene: geometry (e.g., lines, polygons, spheres, polygon
sets, and text), lights and cameras of various sorts, and groups of
other GOs. One special type of group, the
RootGO
, represents a
window into which graphics are rendered. GOs can be grouped
together in any valid directed acyclic graph (DAG). The GO class
hierarchy is shown i<A href="6.html#5">n Figure 3
.
A property is a defined by a name and a value. The name determines
which attribute is affected by the property, such as "Texture
Mode" or "Box Corner1". The value specifies how it is affected
and is determined by its behavior, a time-variant function that
takes the current animation time and returns a value. Properties,
property values, and behaviors are all objects, and their relationships
are shown in<A href="6.html#5"> Figure 4. When a property is created, its name
and value are fixed. However, values are mutable and their behavior
may be changed at any time. There are four kinds of behaviors
for each type of properties: constant (do not vary over time),
synchronous (follow a programmed set of requests, such as "move
from A to B starting at time t=1 and taking 2 seconds"), asynchronous
(execute an arbitrary time-dependent function to compute the
value) and dependent (asynchronous properties that depend on
other properties). Synchronous properties are linked to animation
handles and do not start satisfying their requests until the animation
handle is signalled. By linking multiple properties to the same
handle, a set of property value changes can be synchronized.
Associated with each GO g is a partial mapping of property
names to values determined by the properties that have been associated
with g. A property associated with g affects not only g but
all the descendants of g that do not override the property. A single
property may be associated with any number of GOs. It is perfectly
legal to associate a property with a GO that is not affected by it; for
example, attaching a "Surface Color" property to a GroupGO does
not affect the group node itself, but could potentially affect the
surface color of any GO contained in that group. A RootGO sets an
initial default value for each named property.
There are three types of input event callbacks in Anim-3D, corresponding
to the three kinds of interactive events they handle:
mouse callbacks (triggered by mouse button events), motion callbacks
(triggered by mouse motion events) and keyboard callbacks
(triggered by key press events). Each object has three callback
stacks, and the interactive behavior of an object can be redefined
by pushing a new callback onto the appropriate stack. Any event
that occurs within a root window associated with a RootGO r will
be delivered to the top handler on r's callback stack. The handler
could delegate the event to one of r's children, or it may handle it
itself, perhaps changing the graphical scene in some way.
DistAnim-3D is a direct descendant of Anim-3D. In addition to
the objects being distributed, it has many additional facilities that
are needed for general-purpose 3D graphical applications, such as
texture mapping, indexed line and polygon sets, choice groups,
projection and transformation callbacks, and picking. Since
DistAnim-3D is embedded in Repo instead of Obliq (see
<A href="6.html#5">Section 4.3), the resulting library is called Repo-3D.
4.3  Obliq and Repo
Obliq [8] is a lexically-scoped, untyped, interpreted language for
distributed object-oriented computation. It is implemented in, and
tightly integrated with, Modula-3. An Obliq computation may
involve multiple threads of control within an address space, multiple
address spaces on a machine, heterogeneous machines over a
local network, and multiple networks over the Internet. Obliq uses,
and supports, the Modula-3 thread, exception, and garbage-collection
facilities. Its distributed-computation mechanism is based on
Network Objects, allowing transparent support for multiple
processes on heterogeneous machines. Objects are local to a site,
while computations can roam over the network. Repo [23] is a
descendant of Obliq that extends the Obliq object model to include
replicated objects. Therefore, Repo objects ha