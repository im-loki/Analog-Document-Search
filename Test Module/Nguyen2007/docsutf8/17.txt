A Pseudo Random Coordinated Scheduling Algorithm for Bluetooth Scatternets
ABSTRACT
The emergence of Bluetooth as a default radio interface allows
handheld devices to be rapidly interconnected into ad hoc networks.
Bluetooth allows large numbers of piconets to form a scatternet using
designated nodes that participate in multiple piconets. A unit
that participates in multiple piconets can serve as a bridge and forwards
traffic between neighbouring piconets. Since a Bluetooth
unit can transmit or receive in only one piconet at a time, a bridging
unit has to share its time among the different piconets. To schedule
communication with bridging nodes one must take into account
their availability in the different piconets, which represents a difficult
, scatternet wide coordination problem and can be an important
performance bottleneck in building scatternets. In this paper
we propose the Pseudo-Random Coordinated Scatternet Scheduling
(PCSS) algorithm to perform the scheduling of both intra and
inter-piconet communication. In this algorithm Bluetooth nodes
assign meeting points with their peers such that the sequence of
meeting points follows a pseudo random process that is different
for each pair of nodes. The uniqueness of the pseudo random sequence
guarantees that the meeting points with different peers of
the node will collide only occasionally. This removes the need
for explicit information exchange between peer devices, which is
a major advantage of the algorithm. The lack of explicit signaling
between Bluetooth nodes makes it easy to deploy the PCSS algorithm
in Bluetooth devices, while conformance to the current Bluetooth
specification is also maintained. To assess the performance of
the algorithm we define two reference case schedulers and perform
simulations in a number of scenarios where we compare the performance
of PCSS to the performance of the reference schedulers.
INTRODUCTION
Short range radio technologies enable users to rapidly interconnect
handheld electronic devices such as cellular phones, palm devices
or notebook computers. The emergence of Bluetooth [1] as default
radio interface in these devices provides an opportunity to turn
them from stand-alone tools into networked equipment. Building
Bluetooth ad hoc networks also represents, however, a number of
new challenges, partly stemming from the fact that Bluetooth was
originally developed for single hop wireless connections. In this
paper we study the scheduling problems of inter-piconet communication
and propose a lightweight scheduling algorithm that Bluetooth
nodes can employ to perform the scheduling of both intra and
inter-piconet communication.
Bluetooth is a short range radio technology operating in the unlicensed
ISM (Industrial-Scientific-Medical) band using a frequency
hopping scheme. Bluetooth (BT) units are organized into piconets.
There is one Bluetooth device in each piconet that acts as the master
, which can have any number of slaves out of which up to seven
can be active simultaneously. The communication within a piconet
is organized by the master which polls each slave according to some
polling scheme. A slave is only allowed to transmit in a slave-to
-master slot if it has been polled by the master in the previous
master-to-slave slot. In Section 3 we present a brief overview of
the Bluetooth technology.
A Bluetooth unit can participate in more than one piconet at any
time but it can be a master in only one piconet. A unit that participates
in multiple piconets can serve as a bridge thus allowing
the piconets to form a larger network. We define bridging degree
as the number of piconets a bridging node is member of. A set
of piconets that are all interconnected by such bridging units is referred
to as a scatternet network (Figure 1). Since a Bluetooth unit
can transmit or receive in only one piconet at a time, bridging units
must switch between piconets on a time division basis. Due to the
fact that different piconets are not synchronized in time a bridging
unit necessarily loses some time while switching from one piconet
to the other. Furthermore, the temporal unavailability of bridging
nodes in the different piconets makes it difficult to coordinate the
communication with them, which impacts throughput and can be
an important performance constraint in building scatternets.
There are two important phenomena that can reduce the efficiency
of the polling based communication in Bluetooth scatternets:
· slaves that have no data to transmit may be unnecessarily
polled, while other slaves with data to transmit may have to
wait to be polled; and
· at the time of an expected poll one of the nodes of a master-slave
node pair may not be present in the piconet (the slave
Permission to make digital or hard copies of part or all of this work or
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page.  To copy otherwise, to
republish, to post on servers, or to redistribute to lists, requires prior
specific permission and/or a fee. 
MobiHOC 2001, Long Beach, CA, USA
© ACM 2001 1-58113-390-1/01/10...$5.00

193
master
slave
slave in two piconets
slave in one piconet and master in another
A
B
C
D
E
G
F
H
Figure 1: Example scatternet
that is being polled is not listening or the master that is expected
to poll is not polling).
The first problem applies to polling based schemes in general, while
the second one is specific to the Bluetooth environment. In order
to improve the efficiency of inter-piconet communication the
scheduling algorithm has to coordinate the presence of bridging
nodes in the different piconets such that the effect of the second
phenomenon be minimized.
However, the scheduling of inter-piconet communication expands
to a scatternet wide coordination problem. Each node that has more
than one Bluetooth links have to schedule the order in which it communicates
with its respective neighbours. A node with multiple
Bluetooth links can be either a piconet master or a bridging node or
both. The scheduling order of two nodes will mutually depend on
each other if they have a direct Bluetooth link in which case they
have to schedule the communication on their common link for the
same time slots. This necessitates some coordination between the
respective schedulers. For instance in Figure 1 the scheduling order
of node A and the scheduling order of its bridging neighbours, B,
C, D and E mutually depend on each other, while nodes D and E
further effects nodes F, G and H as well. Furthermore, the possible
loops in a scatternet (e.g., A-E-G-H-F-D) makes it even more
complicated to resolve scheduling conflicts.
In case of bursty traffic in the scatternet the scheduling problem
is further augmented by the need to adjust scheduling order in response
to dynamic variation of traffic intensity. In a bursty traffic
environment it is desirable that a node spends most of its time on
those links that have a backlogged burst of data.
One way to address the coordination problem of inter-piconet
scheduling is to explicitly allocate, in advance, time slots for communication
in each pair of nodes. Such a hard coordination approach
eliminates ambiguity with regards to a node's presence in
piconets, but it implies a complex, scatternet wide coordination
problem and requires explicit signaling between nodes of a scatternet
. In the case of bursty traffic, hard coordination schemes
generate a significant computation and signaling overhead as the
communication slots have to be reallocated in response to changes
in traffic intensity and each time when a new connection is established
or released.
In this paper we propose the Pseudo-Random Coordinated Scatternet
Scheduling algorithm which falls in the category of soft coordination
schemes. In soft coordination schemes nodes decide their
presence in piconets based on local information. By nature, soft coordination
schemes cannot guarantee conflict-free participation of
bridging nodes in the different piconets, however, they have a significantly
reduced complexity. In the PCSS algorithm coordination
is achieved by implicit rules in the communication without the need
of exchanging explicit control information. The low complexity of
the algorithm and its conformance to the current Bluetooth specification
allow easy implementation and deployment.
The first key component of the algorithm is the notion of checkpoints
which are defined in relation to each pair of nodes that
are connected by a Bluetooth link and which represent predictable
points in time when packet transmission can be initiated on the particular
link. In other words, checkpoints serve as regular meeting
points for neighboring nodes when they can exchange packets. In
order to avoid systematic collision of checkpoints on different links
of a node the position of checkpoints follows a pseudo random sequence
that is specific to the particular link the checkpoints belong
to.
The second key component of the algorithm is the dynamic adjustment
of checking intensity, which is necessary in order to effec-tively
support bursty data traffic. Bandwidth can be allocated and
deallocated to a particular link by increasing and decreasing checkpoint
intensity, respectively.
To assess the performance of the algorithm we define two reference
schedulers and relate the performance of the PCSS scheme to these
reference algorithms in a number of simulation scenarios.
The remainder of the paper is structured as follows. In Section 2 we
give an overview of related work focusing on Bluetooth scheduling
related studies available in the literature. Section 3 gives a brief
overview of the Bluetooth technology. In Section 4 and 5 we introduce
the proposed algorithm. In Section 6 we define the reference
schedulers. Finally, in Section 7 we present simulation results.
RELATED WORK
A number of researchers have addressed the issue of scheduling in
Bluetooth. Most of these studies have been restricted, however, to
the single piconet environment, where the fundamental question is
the polling discipline used by the piconet master to poll its slaves.
These algorithms are often referred to as intra-piconet scheduling
schemes. In [7] the authors assume a simple round robin polling
scheme and investigate queueing delays in master and slave units
depending on the length of the Bluetooth packets used. In [5] Johansson
et al. analyze and compare the behavior of three different
polling algorithms. They conclude that the simple round robin
scheme may perform poorly in Bluetooth systems and they propose
a scheme called Fair Exhaustive Polling. The authors demonstrate
the strength of this scheme and argue in favor of using multi-slot
packets. Similar conclusions are drawn by Kalia et al. who argue
that the traditional round robin scheme may result in waste and un-fairness
[8]. The authors propose two new scheduling disciplines
that utilize information about the status of master and slave queues.
In [9, 10] the authors concentrate on scheduling policies designed
with the aim of low power consumption. A number of scheduling
policies are proposed which exploit either the park or sniff low
power modes of Bluetooth.
194
Although the above studies have revealed a number of important
performance aspects of scheduling in Bluetooth piconets, the algorithms
developed therein are not applicable for inter-piconet communication
. In [6] the authors have shown that constructing an optimal
link schedule that maximizes total throughput in a Bluetooth
scatternet is an NP hard problem even if scheduling is performed
by a central entity. The authors also propose a scheduling algorithm
referred to as Distributed Scatternet Scheduling Algorithm
(DSSA), which falls in the category of distributed, hard coordination
schemes. Although the DSSA algorithm provides a solution
for scheduling communication in a scatternet, some of its idealized
properties (e.g., nodes are aware of the traffic requirements of their
neighbours) and its relatively high complexity make it difficult to
apply it in a real life environment.
There is an ongoing work in the Personal Area Networking (PAN)
working group of the Bluetooth Special Interest Group (SIG) [2] to
define an appropriate scheduling algorithm for Bluetooth scatternets
BLUETOOTH BACKGROUND
Bluetooth is a short range radio technology that uses frequency
hopping scheme, where hopping is performed on 79 RF channels
spaced 1 MHz apart. Communication in Bluetooth is always between
master and slave nodes. Being a master or a slave is only
a logical state: any Bluetooth unit can be a master or a slave.
The Bluetooth system provides full-duplex transmission based on
slotted Time Division Duplex (TDD) scheme, where each slot is
0.625 ms long. Master-to-slave transmission always starts in an
even-numbered time slot, while slave-to-master transmission always
starts in an odd-numbered time slot. A pair of master-to-slave
and slave-to-master slots are often referred to as a frame. The communication
within a piconet is organized by the master which polls
each slave according to some polling scheme. A slave is only allowed
to transmit in a slave-to-master slot if it has been polled by
the master in the previous master-to-slave slot. The master may
or may not include data in the packet used to poll a slave. Bluetooth
packets can carry synchronous data (e.g., real-time traffic) on
Synchronous Connection Oriented (SCO) links or asynchronous
data (e.g., elastic data traffic, which is the case in our study) on
Asynchronous Connectionless (ACL) links. Bluetooth packets on
an ACL link can be 1, 3 or 5 slot long and they can carry different
amount of user data depending on whether the payload is FEC
coded or not. Accordingly, the Bluetooth packet types DH1, DH3
and DH5 denote 1, 3 and 5 slot packets, respectively, where the
payload is not FEC encoded, while in case of packet types DM1,
DM3 and DM5 the payload is protected with FEC encoding. There
are two other types of packets, the POLL and NULL packets that do
not carry user data. The POLL packet is used by the master when
it has no user data to the slave but it still wants to poll it. Similarly,
the NULL packet is used by the slave to respond to the master if it
has no user data. For further information regarding the Bluetooth
technology the reader is referred to [1, 3].
OVERVIEW OF THE PCSS ALGORITHM
Coordination in the PCSS algorithm is achieved by the unique
pseudo random sequence of checkpoints that is specific to each
master-slave node pair and by implicit information exchange between
peer devices. A checkpoint is a designated Bluetooth frame.
The activity of being present at a checkpoint is referred to as to
check. A master node actively checks its slave by sending a packet
to the slave at the corresponding checkpoint and waiting for a response
from the slave. The slave node passively checks its master
by listening to the master at the checkpoint and sending a response
packet in case of being addressed.
The expected behaviour of nodes is that they show up at each
checkpoint on all of their links and check their peers for available
user data. The exchange of user data packets started at a checkpoint
can be continued in the slots following the checkpoint. A
node remains active on the current link until there is user data in
either the master-to-slave or slave-to-master directions or until it
has to leave for a next checkpoint on one of its other links. In
the PCSS scheme we exploit the concept of randomness in assigning
the position of checkpoints, which excludes the possibility that
checkpoints on different links of a node will collide systematically,
thus giving the node an equal chance to visit all of its checkpoints.
The pseudo random procedure is similar to the one used to derive
the pseudo random frequency hopping sequence. In particular, the
PCSS scheme assigns the positions of checkpoints on a given link
following a pseudo random sequence that is generated based on the
Bluetooth clock of the master and the MAC address of the slave.
This scheme guarantees that the same pseudo random sequence
will be generated by both nodes of a master-slave pair, while the sequences
belonging to different node pairs will be different. Figure
2 shows an example for the pseudo random arrangement of checkpoints
in case of a node pair A and B. The length of the current base
checking interval is denoted by
T
(i)
check
and the current checking intensity
is defined accordingly as
1
T
(i)
check
. There is one checkpoint
within each base checking interval and the position of the checkpoint
within this window is changing from one time window to the
other in a pseudo random manner.
checkpoints of A toward B
checkpoints of B toward A
1 frame
T
(i)
check
Figure 2: Pseudo-random positioning of checkpoints
Since the pseudo random sequence is different from one link to another
, checkpoints on different links of a node will collide only occasionally
. In case of collision the node can attend only one of the
colliding checkpoints, which implies that the corresponding neighbours
have to be prepared for a non-present peer. That is, the master
might not poll and the slave might not listen at a checkpoint.
We note that a collision occurs either if there are more than one
checkpoints scheduled for the same time slot or if the checkpoints
are so close to each other that a packet transmission started at the
first checkpoint necessarily overlaps the second one. Furthermore,
if the colliding checkpoints belong to links in different piconets,
the necessary time to perform the switch must be also taken into
account.
During the communication there is the possibility to increase or
decrease the intensity of checkpoints depending on the amount of
user data to be transmitted and on the available capacity of the
node. According to the PCSS algorithm a node performs certain
traffic measurements at the checkpoints and increases or decreases
the current checking intensity based on these measurements. Since
195
nodes decide independently about the current checking intensity
without explicit coordination, two nodes on a given link may select
different base checking periods. In order to ensure that two nodes
with different checking intensities on the same link can still communicate
we require the pseudo random generation of checkpoints
to be such that the set of checkpoint positions at a lower checking
intensity is a subset of checkpoint positions at any higher checking
intensities. In the Appendix we are going to present a pseudo random
scheme for generating the position of checkpoints, which has
the desired properties.
OPERATION OF PCSS
In what follows, we describe the procedures of the PCSS algorithm.
We start by the initialization process which ensures that two nodes
can start communication as soon as a new link has been established
or the connection has been reset. Next, we describe the rules that
define how nodes calculate their checkpoints, decide upon their
presence at checkpoints and exchange packets. Finally, we present
the way neighboring nodes can dynamically increase and decrease
of checkpoint intensity.
5.1
Initialization
In the PCSS algorithm there is no need for a separate initialization
procedure to start communication, since the pseudo random generation
of checkpoints is defined such that once a master slave node
pair share the same master's clock and slave's MAC address information
, it is guaranteed that the same pseudo random sequence will
be produced at each node. That is, it is guaranteed that two nodes
starting checkpoint generation at different time instants with different
checking intensities will be able to communicate. It is the own
decision of the nodes to select an appropriate initial checking intensity
, which may depend for example on the free capacities of the
node or on the amount of data to transmit. Once the communication
is established the increase and decrease procedures will adjust the
possibly different initial checking intensities to a common value.
5.2
Communication
A pair of nodes can start exchanging user data packets at a checkpoint
, which can expand through the slots following the checkpoint.
The nodes remain active on the current link following a checkpoint
until there is user data to be transmitted or one of them has to
leave in order to attend a checkpoint on one of its other links. After
a POLL/NULL packet pair has been exchanged indicating that
there is no more user data left the nodes switch off their transmit-ters/receivers
and remain idle until a next checkpoint comes on one
of their links. However, during the communication any of the nodes
can leave in order to attend a coming checkpoint on one of its other
links. After one of the nodes has left the remaining peer will realize
the absence of the node and will go idle until the time of its next
checkpoint. If the master has left earlier the slave will realize the
absence of the master at the next master-to-slave slot by not receiving
the expected poll. In the worst case the master has left before
receiving the last packet response from the slave, which can be a 5
slot packet in which case the slave wastes 5+1 slots before realizing
the absence of the master. Similarly, if the master does not get
a response from the slave it assumes that the slave has already left
the checkpoint and goes idle until its next checkpoint. Note that the
master may also waste 5+1 slots in the worst case before realizing
the absence of the slave.
A node stores the current length of the base checking interval and
the time of the next checkpoint for each of its Bluetooth links separately
. For its
i
th
link a node maintains the variable
T
(i)
check
to
store the length of the current base checking period in number of
frames and the variable
t
(i)
check
, which stores the Bluetooth clock
of the master at the next checkpoint. After passing a checkpoint
the variable
t
(i)
check
is updated to the next checkpoint by running
the pseudo random generator (
P seudoChkGen) with the current
value of the master's clock
t
(i)
and the length of the base checking
period
T
(i)
check
and with the MAC address of the slave
A
(i)
slave
as input
parameters;
t
(i)
check
= P seudoChkGen(T
(i)
check
, A
(i)
slave
, t
(i)
).
The procedure
P seudoChkGen is described in the Appendix.
There is a maximum and minimum checking interval
T
max
=
2
f
max
and
T
min
= 2
f
min
, respectively. The length of the checking
period must be a power of 2 number of frames and it must take
a value from the interval
[2
f
min
, 2
f
max
].
5.3
Increasing and Decreasing Checking Intensity
The increase and decrease procedures are used to adjust the checking
intensity of a node according to the traffic intensity and to the
availability of the peer device. Each node decides independently
about the current checking intensity based on traffic measurements
at checkpoints.
Since the time spent by a node on a link is proportional to the ratio
of the number of checkpoints on that link and the number of checkpoints
on all links of the node, the bandwidth allocated to a link can
be controlled by the intensity of checkpoints on that link. This can
be shown by the following simple calculation.
Let us assume that the node has
L number of links and assume
further that for the base checking periods on all links of the node
it holds that
T
min
T
(i)
check
T
max
, i = 1, . . . , L. Then the
average number of checkpoints within an interval of length
T
max
is
N =

L
i
=1
T
max
T
(i)
check
, and the average time between two consecutive
checkpoints is
t = T
max
N
=
1
L

i
=1
1
T
(i)
check
,
provided that the pseudo random generator produces a uniformly
distributed sequence of checkpoints. Then, the share of link
j from
the total capacity of the node is
r
j
= 1/T
(j)
check
L

i
=1
1
T
(i)
check
.
A node has to measure the utilization of checkpoints on each of
its links separately in order to provide input to the checking intensity
increase and decrease procedures. According to the algorithm
a given checkpoint is considered to be utilized if both nodes have
shown up at the checkpoint and at least one Bluetooth packet carrying
user data has been transmitted or received. If there has not been
a successful poll at the checkpoint due to the unavailability of any
of the nodes or if there has been only a POLL/NULL packet pair
exchange but no user data has been transmitted, the checkpoint is
considered to be unutilized. We note that due to packet losses the
utilization of a given checkpoint might be interpreted differently by
the nodes. However, this does not impact correct operation of the
algorithm.
196
To measure the utilization of checkpoints

(i)
on the
i
th
link of the
node we employ the moving average method as follows. The utilization
of a checkpoint equals to 1 if it has been utilized, otherwise
it equals to 0. If the checkpoint has been utilized the variable

(i)
is updated as,

(i)
= q
uti
·
(i)
+ (1 - q
uti
) · 1;
if the checkpoint has not been utilized it is updated as,

(i)
= q
uti
·
(i)
+ (1 - q
uti
) · 0,
where
0  q
uti
&lt; 1 is the time scale parameter of the moving
average method. A further parameter of the utilization measurement
is the minimum number of samples that have to be observed
before the measured utilization value is considered to be confident
and can be used as input to decide about increase and decrease of
checking intensity. This minimum number of samples is a denoted
by
N
sample,min
.
Finally, a node also has to measure its total utilization, which is
defined as the fraction of time slots where the node has been active
(transmitted or received) over the total number of time slots. To
measure the total utilization of a node we employ the moving average
method again. Each node measures its own utilization

(node)
and updates the

(node)
variable after each
N
uti,win
number of
slots as follows:

(node)
= q
(node)
uti
·
(node)
+ (1 - q
(node)
uti
) ·
(win)
,
where

(win)
is the fraction of time slots in the past time window
of length
N
uti,win
where the node has been active over the total
number of time slots
N
uti,win
.
If the utilization of checkpoints on link
i falls below the lower
threshold

lower
, the current base checking period
T
(i)
check
will be
doubled. Having a low checkpoint utilization can be either because
one or both of the nodes have not shown up at all of the checkpoints
or because there is not enough user data to be transmitted. In either
cases the intensity of checkpoints has to be decreased. Whenever a
decrease or increase is performed on link
i the measured utilization

(i)
must be reset.
Since the parameter
T
(i)
check
is one of the inputs to the pseudo random
checkpoint generation process,
P seudoChkGen the checkpoints
after the decrease will be generated according to the new
period. Furthermore, due to the special characteristic of the checkpoint
generation scheme the remaining checkpoints after the decrease
will be a subset of the original checkpoints, which guarantees
that the two nodes can sustain communication independent of
local changes in checking intensities.
An example for the checking intensity decrease in case of a node
pair A and B is shown in Figure 3. First, node A decreases checking
intensity by doubling its current base checking period in response
to the measured low utilization. As a consequence node B
will find node A on average only at every second checkpoint and
its measured utilization will decrease rapidly. When the measured
utilization at node B falls below the threshold

lower
, B realizes
that its peer has a lower checking intensity and follows the decrease
by doubling its current base checking period. Although we
have not explicitly indicated in the Figure, it is assumed that there
has been user data exchanged at each checkpoint where both nodes
were present.
=0.35&lt;
lower
=0.36&lt;
lower
node A reduces the checking
intensity, by doubling its base period
checkpoints of B toward A
checkpoints of A toward B
doubles its base period
node B realizes the decrease and
=0.6=0.5
=0.5
=0.2
=0.7
=0.48 =0.56 =0.46
=0.5
=0.58
=0.35
=0.35
=0.65
=0.2
Figure 3: Checking intensity decrease
Recall from the utilization measurement procedure that there is a
minimum number of checkpoints
N
sample,min
that has to be sam-pled
before the measured utilization is considered to be confident
and can be used to decide about checking intensity decrease. The
parameter
N
sample,min
together with the parameter of the moving
average method
q
uti
determine the time scale over which the
utilization of checkpoints has to be above the threshold

lower
,
otherwise the node decreases checking intensity. It might be also
reasonable to allow that the parameter
N
sample,min
and the moving
average parameter
q
uti
can be changed after each decrease or
increase taking into account for example the current checking intensity
, the available resources of the node or the amount of user
data to be transmitted, etc. However, in the current implementation
we apply fixed parameter values.
After a checkpoint where user data has been exchanged (not only a
POLL/NULL packet pair) checking intensity can be increased provided
that the measured utilization of checkpoints exceeds the upper
threshold

upper
and the node has available capacity. Formally
a checking intensity increase is performed on link
i if the following
two conditions are satisfied:

(i)
&gt;
upper
and

(node)
&lt;
(node)
upper
,
where

(node)
upper
is the upper threshold of the total utilization of the
node. This last condition ensures that the intensity of checkpoints
will not increase unbounded. The intensity of checkpoints is doubled
at each increase by dividing the current length of the base
checking period
T
(i)
check
by 2. For typical values of

upper
we recommend
0.8
upper
0.9 in which case the respective
lower
value should be

lower
0.4 in order to avoid oscillation of increases
and decreases.
Figure 4 shows an example where node A and B communicate and
after exchanging user data at the second checkpoint both nodes
double the checking intensity. In the Figure we have explicitly indicated
whether there has been user data exchanged at a checkpoint
or not.
user data
checkpoints of B toward A
checkpoints of A toward B
=0.8&gt;
upper
=0.8&gt;
upper
=0.7
=0.2
=0.55
=0.4
=0.55
=0.7
user data
user data
user data
=0.4
=0.2
checking intensity
both node A and B double
=0.3
=0.3
Figure 4: Checking intensity increase
197
REFERENCE ALGORITHMS
In this section we define the Ideal Coordinated Scatternet Scheduler
(ICSS) and the Uncoordinated Greedy Scatternet Scheduler
(UGSS) reference algorithms.
The ICSS algorithm represents
the "ideal" case where nodes exploit all extra information when
scheduling packet transmissions, which would not be available in a
realistic scenario. The UGSS algorithm represents the greedy case
where nodes continuously switch among their Bluetooth links in a
random order.
6.1
The ICSS Algorithm
The ICSS algorithm is a hypothetical, ideal scheduling algorithm
that we use as a reference case in the evaluation of the PCSS
scheme. In the ICSS algorithm a node has the following extra
information about its neighbours, which represents the idealized
property of the algorithm:
· a node is aware of the already pre-scheduled transmissions
of its neighbours; and
· a node is aware of the content of the transmission buffers of
its neighbours.
According to the ICSS algorithm each node maintains a scheduling
list, which contains the already pre-scheduled tasks of the node. A
task always corresponds to one packet pair exchange with a given
peer of the node. Knowing the scheduling list of the neighbours
allows the node to schedule communication with its neighbours
without overlapping their other communication, such that the capacity
of the nodes is utilized as much as possible. Furthermore
being aware of the content of the transmission buffers of neighbours
eliminates the inefficiencies of the polling based scheme,
since there will be no unnecessary polls and the system will be
work-conserving.
In the scheduling list of a node there is at most one packet pair
exchange scheduled in relation to each of its peers, provided that
there is a Bluetooth packet carrying user data either in the transmission
buffer of the node or in the transmission buffer of the peer
or in both. After completing a packet exchange on a given link the
two nodes schedule the next packet exchange, provided that there
is user data to be transmitted in at least one of the directions. If
there is user data in only one of the directions, a POLL or NULL
packet is assumed for the reverse direction depending on wheth