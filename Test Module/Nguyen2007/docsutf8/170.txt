Run-Time Dynamic Linking for Reprogramming Wireless Sensor Networks
Abstract
From experience with wireless sensor networks it has become
apparent that dynamic reprogramming of the sensor
nodes is a useful feature. The resource constraints in terms of
energy, memory, and processing power make sensor network
reprogramming a challenging task. Many different mechanisms
for reprogramming sensor nodes have been developed
ranging from full image replacement to virtual machines.
We have implemented an in-situ run-time dynamic linker
and loader that use the standard ELF object file format. We
show that run-time dynamic linking is an effective method
for reprogramming even resource constrained wireless sensor
nodes. To evaluate our dynamic linking mechanism we
have implemented an application-specific virtual machine
and a Java virtual machine and compare the energy cost of
the different linking and execution models. We measure the
energy consumption and execution time overhead on real
hardware to quantify the energy costs for dynamic linking.
Our results suggest that while in general the overhead of a
virtual machine is high, a combination of native code and virtual
machine code provide good energy efficiency. Dynamic
run-time linking can be used to update the native code, even
in heterogeneous networks.
Categories and Subject Descriptors
C.2.4 [Computer Communication Networks]:
Distributed
Systems--Network Operating Systems
General Terms
Design, Experimentation, Measurement, Performance
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior specific permission and/or a fee.
SenSys'06, November 1Â­3, 2006, Boulder, Colorado, USA.
Copyright 2006 ACM 1-59593-343-3/06/0011 ...$5.00

Introduction
Wireless sensor networks consist of a collection of programmable
radio-equipped embedded systems. The behavior
of a wireless sensor network is encoded in software running
on the wireless sensor network nodes. The software in
deployed wireless sensor network systems often needs to be
changed, both to update the system with new functionality
and to correct software bugs. For this reason dynamically
reprogramming of wireless sensor network is an important
feature. Furthermore, when developing software for wireless
sensor networks, being able to update the software of a
running sensor network greatly helps to shorten the development
time.
The limitations of communication bandwidth, the limited
energy of the sensor nodes, the limited sensor node memory
which typically is on the order of a few thousand bytes large,
the absence of memory mapping hardware, and the limited
processing power make reprogramming of sensor network
nodes challenging.
Many different methods for reprogramming sensor nodes
have been developed, including full system image replacement
[14, 16], approaches based on binary differences [15,
17, 31], virtual machines [18, 19, 20], and loadable native
code modules in the first versions of Contiki [5] and
SOS [12]. These methods are either inefficient in terms of
energy or require non-standard data formats and tools.
The primary contribution of this paper is that we investigate
the use of standard mechanisms and file formats for
reprogramming sensor network nodes. We show that in-situ
dynamic run-time linking and loading of native code using
the ELF file format, which is a standard feature on many operating
systems for PC computers and workstations, is feasible
even for resource-constrained sensor nodes. Our secondary
contribution is that we measure and quantify the energy
costs of dynamic linking and execution of native code
and compare it to the energy cost of transmission and execution
of code for two virtual machines: an application-specific
virtual machine and the Java virtual machine.
We have implemented a dynamic linker in the Contiki operating
system that can link, relocate, and load standard ELF
object code files. Our mechanism is independent of the particular
microprocessor architecture on the sensor nodes and
we have ported the linker to two different sensor node platforms
with only minor modifications to the architecture dependent
module of the code.
15
To evaluate the energy costs of the dynamic linker we implement
an application specific virtual machine for Contiki
together with a compiler for a subset of Java. We also adapt
the Java virtual machine from the lejOS system [8] to run under
Contiki. We measure the energy cost of reprogramming
and executing a set of program using dynamic linking of native
code and the two virtual machines. Using the measurements
and a simple energy consumption model we calculate
break-even points for the energy consumption of the different
mechanisms. Our results suggest that while the execution
time overhead of a virtual machine is high, a combination of
native code and virtual machine code may give good energy
efficiency.
The remainder of this paper is structured as follows. In
Section 2 we discuss different scenarios in which reprogramming
is useful. Section 3 presents a set of mechanisms for
executing code inside a sensor node and in Section 4 we discuss
loadable modules and the process of linking, relocating
, and loading native code. Section 5 describes our implementation
of dynamic linking and our virtual machines. Our
experiments and the results are presented in Section 6 and
discuss the results in Section 7. Related work is reviewed in
Section 8. Finally, we conclude the paper in Section 9.
Scenarios for Software Updates
Software updates for sensor networks are necessary for a
variety of reasons ranging from implementation and testing
of new features of an existing program to complete reprogramming
of sensor nodes when installing new applications.
In this section we review a set of typical reprogramming scenarios
and compare their qualitative properties.
2.1
Software Development
Software development is an iterative process where code
is written, installed, tested, and debugged in a cyclic fashion
. Being able to dynamically reprogram parts of the sensor
network system helps shorten the time of the development
cycle. During the development cycle developers typically
change only one part of the system, possibly only a single
algorithm or a function. A sensor network used for software
development may therefore see large amounts of small
changes to its code.
2.2
Sensor Network Testbeds
Sensor network testbeds are an important tool for development
and experimentation with sensor network applications
. New applications can be tested in a realistic setting
and important measurements can be obtained [36]. When a
new application is to be tested in a testbed the application
typically is installed in the entire network. The application
is then run for a specified time, while measurements are collected
both from the sensors on the sensor nodes, and from
network traffic.
For testbeds that are powered from a continuous energy
source, the energy consumption of software updates is only
of secondary importance. Instead, qualitative properties such
as ease of use and flexibility of the software update mechanism
are more important. Since the time required to make an
update is important, the throughput of a network-wide software
update is of importance. As the size of the transmitted
binaries impact the throughput, the binary size still can be
Update
Update
Update
Program
Scenario
frequency
fraction
level
longevity
Development
Often
Small
All
Short
Testbeds
Seldom
Large
All
Long
Bug fixes
Seldom
Small
All
Long
Reconfig.
Seldom
Small
App
Long
Dynamic
Application
Often
Small
App
Long
Table 1. Qualitative comparison between different reprogramming
scenarios.
used as an evaluation metric for systems where throughput is
more important than energy consumption.
2.3
Correction of Software Bugs
The need for correcting software bugs in sensor networks
was early identified [7]. Even after careful testing, new bugs
can occur in deployed sensor networks caused by, for example
, an unexpected combination of inputs or variable link
connectivity that stimulate untested control paths in the communication
software [30].
Software bugs can occur at any level of the system. To
correct bugs it must therefore be possible to reprogram all
parts of the system.
2.4
Application Reconfiguration
In an already installed sensor network, the application
may need to be reconfigured. This includes change of parameters
, or small changes in the application such as changing
from absolute temperature readings to notification when
thresholds are exceeded [26]. Even though reconfiguration
not necessarily include software updates [25], application reconfiguration
can be done by reprogramming the application
software. Hence software updates can be used in an application
reconfiguration scenario.
2.5
Dynamic Applications
There are many situations where it is useful to replace the
application software of an already deployed sensor network.
One example is the forest fire detection scenario presented by
Fok et al. [9] where a sensor network is used to detect a fire.
When the fire detection application has detected a fire, the
fire fighters might want to run a search and rescue application
as well as a fire tracking application. While it may possible
to host these particular applications on each node despite
the limited memory of the sensor nodes, this approach is not
scalable [9]. In this scenario, replacing the application on the
sensor nodes leads to a more scalable system.
2.6
Summary
Table 1 compares the different scenarios and their properties
. Update fraction refers to what amount of the system
that needs to be updated for every update, update level to
at what levels of the system updates are likely to occur, and
program longevity to how long an installed program will be
expected to reside on the sensor node.
Code Execution Models and Reprogramming
Many different execution models and environments have
been developed or adapted to run on wireless sensor nodes.
16
Some with the notion of facilitating programming [1], others
motivated by the potential of saving energy costs for reprogramming
enabled by the compact code representation of
virtual machines [19]. The choice of the execution model
directly impacts the data format and size of the data that
needs to be transported to a node. In this section we discuss
three different mechanisms for executing program code
inside each sensor node: script languages, virtual machines,
and native code.
3.1
Script Languages
There are many examples of script languages for embedded
systems, including BASIC variants, Python interpreters
[22], and TCL machines [1]. However, most script
interpreters target platforms with much more resources than
our target platforms and we have therefore not included them
in our comparison.
3.2
Virtual Machines
Virtual machines are a common approach to reduce the
cost of transmitting program code in situations where the
cost of distributing a program is high. Typically, program
code for a virtual machine can be made more compact than
the program code for the physical machine. For this reason
virtual machines are often used for programming sensor networks
[18, 19, 20, 23].
While many virtual machines such as the Java virtual machine
are generic enough to perform well for a variety of
different types of programs, most virtual machines for sensor
networks are designed to be highly configurable in order
to allow the virtual machine to be tailored for specific applications
. In effect, this means that parts of the application
code is implemented as virtual machine code running on the
virtual machine, and other parts of the application code is implemented
in native code that can be used from the programs
running on the virtual machine.
3.3
Native Code
The most straightforward way to execute code on sensor
nodes is by running native code that is executed directly by
the microcontroller of the sensor node. Installing new native
code on a sensor node is more complex than installing code
for a virtual machine because the native code uses physical
addresses which typically need to be updated before the program
can be executed. In this section we discuss two widely
used mechanisms for reprogramming sensor nodes that execute
native code: full image replacement and approaches
based on binary differences.
3.3.1
Full Image Replacement
The most common way to update software in embedded
systems and sensor networks is to compile a complete new
binary image of the software together with the operating system
and overwrite the existing system image of the sensor
node. This is the default method used by the XNP and Deluge
network reprogramming software in TinyOS [13].
The full image replacement does not require any additional
processing of the loaded system image before it is
loaded into the system, since the loaded image resides at the
same, known, physical memory address as the previous system
image. For some systems, such as the Scatterweb system
code [33], the system contains both an operating system image
and a small set of functions that provide functionality
for loading new operating system images. A new operating
system image can overwrite the existing image without overwriting
the loading functions. The addresses of the loading
functions are hard-coded in the operating system image.
3.3.2
Diff-based Approaches
Often a small update in the code of the system, such as
a bugfix, will cause only minor differences between in the
new and old system image. Instead of distributing a new
full system image the binary differences, deltas, between the
modified and original binary can be distributed. This reduces
the amount of data that needs to be transferred. Several types
of diff-based approaches have been developed [15, 17, 31]
and it has been shown that the size of the deltas produced by
the diff-based approaches is very small compared to the full
binary image.
Loadable Modules
A less common alternative to full image replacement and
diff-based approaches is to use loadable modules to perform
reprogramming. With loadable modules, only parts of
the system need to be modified when a single program is
changed. Typically, loadable modules require support from
the operating system. Contiki and SOS are examples of systems
that support loadable modules and TinyOS is an example
of an operating system without loadable module support.
A loadable module contains the native machine code of
the program that is to be loaded into the system. The machine
code in the module usually contains references to functions
or variables in the system. These references must be
resolved to the physical address of the functions or variables
before the machine code can be executed. The process of
resolving those references is called linking. Linking can be
done either when the module is compiled or when the module
is loaded. We call the former approach pre-linking and
the latter dynamic linking. A pre-linked module contains
the absolute physical addresses of the referenced functions
or variables whereas a dynamically linked module contains
the symbolic names of all system core functions or variables
that are referenced in the module. This information increases
the size of the dynamically linked module compared to the
pre-linked module. The difference is shown in Figure 1. Dynamic
linking has not previously been considered for wireless
sensor networks because of the perceived run-time overhead
, both in terms of execution time, energy consumption,
and memory requirements.
The machine code in the module usually contains references
not only to functions or variables in the system, but
also to functions or variables within the module itself. The
physical address of those functions will change depending
on the memory address at which the module is loaded in the
system. The addresses of the references must therefore be
updated to the physical address that the function or variable
will have when the module is loaded. The process of updating
these references is known as relocation. Like linking,
relocation can be done either at compile-time or at run-time.
When a module has been linked and relocated the program
loader loads the module into the system by copying the
17
memcpy
/* ... */
}
void radio_send() {
   /* ... */
}
0x0237
0x1720
Core
memcpy();
radio_send();
call 0x1720
call 0x0237
Module with dynamic linking information
Pre-linked module
memcpy();
radio_send();
call 0x0000
call 0x0000
call instruction
call instruction
radio_send
int memcpy() {
Figure 1. The difference between a pre-linked module
and a module with dynamic linking information: the pre-linked
module contains physical addresses whereas the
dynamically linked module contains symbolic names.
linked and relocated native code into a place in memory from
where the program can be executed.
4.1
Pre-linked Modules
The machine code of a pre-linked module contains absolute
addresses of all functions and variables in the system
code that are referenced by the module. Linking of the module
is done at compile time and only relocation is performed
at run-time. To link a pre-linked module, information about
the physical addresses of all functions and variables in the
system into which the module is to be loaded must be available
at compile time.
There are two benefits of pre-linked modules over dynamically
linked modules. First, pre-linked modules are smaller
than dynamically linked modules which results in less information
to be transmitted. Second, the process of loading a
pre-linked module into the system is less complex than the
process of linking a dynamically linked module. However,
the fact that all physical addresses of the system core are
hard-coded in the pre-linked module is a severe drawback as
a pre-linked module can only be loaded into a system with
the exact same physical addresses as the system that was to
generate the list of addresses that was used for linking the
module.
In the original Contiki system [5] we used pre-linked binary
modules for dynamic loading. When compiling the
Contiki system core, the compiler generated a map file containing
the mapping between all globally visible functions
and variables in the system core and their addresses. This
list of addresses was used to pre-link Contiki modules.
We quickly noticed that while pre-linked binary modules
worked well for small projects with a homogeneous set
of sensor nodes, the system quickly became unmanageable
when the number of sensor nodes grew. Even a small change
to the system core of one of the sensor nodes would make it
impossible to load binary a module into the system bedcase
the addresses of variables and functions in the core were different
from when the program was linked. We used version
numbers to guard against this situation. Version numbers did
help against system crashes, but did not solve the general
problem: new modules could not be loaded into the system.
4.2
Dynamic Linking
With dynamic linking, the object files do not only contain
code and data, but also names of functions are variables
of the system core that are referenced by the module. The
code in the object file cannot be executed before the physical
addresses of the referenced variables and functions have
been filled in. This process is done at run time by a dynamic
linker.
In the Contiki dynamic linker we use two file formats for
the dynamically linked modules, ELF and Compact ELF.
4.2.1
ELF - Executable and Linkable Format
One of the most common object code format for dynamic
linking is the Executable and Linkable Format (ELF) [3]. It
is a standard format for object files and executables that is
used for most modern Unix-like systems. An ELF object
file include both program code and data and additional information
such as a symbol table, the names of all external
unresolved symbols, and relocation tables. The relocation
tables are used to locate the program code and data at other
places in memory than for which the object code originally
was assembled. Additionally, ELF files can hold debugging
information such as the line numbers corresponding to specific
machine code instructions, and file names of the source
files used when producing the ELF object.
ELF is also the default object file format produced by the
GCC utilities and for this reason there are a number of standard
software utilities for manipulating ELF files available.
Examples include debuggers, linkers, converters, and programs
for calculating program code and data memory sizes.
These utilities exist for a wide variety of platforms, including
MS Windows, Linux, Solaris, and FreeBSD. This is a clear
advantage over other solutions such as FlexCup [27], which
require specialized utilities and tools.
Our dynamic linker in Contiki understands the ELF format
and is able to perform dynamic linking, relocation, and
loading of ELF object code files. The debugging features of
the ELF format are not used.
4.2.2
CELF - Compact ELF
One problem with the ELF format is the overhead in terms
of bytes to be transmitted across the network, compared to
pre-linked modules. There are a number of reasons for the
extra overhead. First, ELF, as any dynamically relocatable
file format, includes the symbolic names of all referenced
functions or variables that need to be linked at run-time. Second
, and more important, the ELF format is designed to work
on 32-bit and 64-bit architectures. This causes all ELF data
structures to be defined with 32-bit data types. For 8-bit or
16-bit targets the high 16 bits of these fields are unused.
To quantify the overhead of the ELF format we devise an
alternative to the ELF object code format that we call CELF
- Compact ELF. A CELF file contains the same information
as an ELF file, but represented with 8 and 16-bit datatypes.
18
CELF files typically are half the size of the corresponding
ELF file. The Contiki dynamic loader is able to load CELF
files and a utility program is used to convert ELF files to
CELF files.
It is possible to further compress CELF files using lossless
data compression. However, we leave the investigation of the
energy-efficiency of this approach to future work.
The drawback of the CELF format is that it requires a
special compressor utility is for creating the CELF files. This
makes the CELF format less attractive for use in many real-world
situations.
4.3
Position Independent Code
To avoid performing the relocation step when loading a
module, it is in some cases possible to compile the module
into position independent code. Position independent code is
a type of machine code which does not contain any absolute
addresses to itself, but only relative references. This is the
approach taken by the SOS system.
To generate position independent code compiler support
is needed. Furthermore, not all CPU architectures support
position independent code and even when supported, programs
compiled to position independent code typically are
subject to size restrictions. For example, the AVR microcontroller
supports position independent code but restricts the
size of programs to 4 kilobytes. For the MSP430 no compiler
is known to fully support position independent code.
Implementation
We have implemented run-time dynamic linking of ELF
and CELF files in the Contiki operating system [5]. To evaluate
dynamic linking we have implemented an application
specific virtual machine for Contiki together with a compiler
for a subset of Java, and have ported a Java virtual machine
to Contiki.
5.1
The Contiki Operating System
The Contiki operating system was the first operating system
for memory-constrained sensor nodes to support dynamic
run-time loading of native code modules. Contiki is
built around an event-driven kernel and has very low memory
requirements.
Contiki applications run as extremely
lightweight protothreads [6] that provide blocking operations
on top of the event-driven kernel at a very small memory
cost. Contiki is designed to be highly portable and has been
ported to over ten different platforms with different CPU architectures
and using different C compilers.
Loaded program
00000000000
11111111111
00000000000
00000000000
11111111111
11111111111
00000000000
00000000000
00000000000
11111111111
11111111111
11111111111
00000000000
00000000000
00000000000
11111111111
11111111111
11111111111
RAM
Core
Loaded program
Core
ROM
Device drivers
Contiki kernel
Contiki kernel
Dynamic linker
Symbol table
Language run-time
Device drivers
Figure 2. Partitioning in Contiki: the core and loadable
programs in RAM and ROM.
A Contiki system is divided into two parts: the core and
the loadable programs as shown in Figure 2. The core consists
of the Contiki kernel, device drivers, a set of standard
applications, parts of the C language library, and a symbol
table. Loadable programs are loaded on top of the core and
do not modify the core.
The core has no information about the loadable programs,
except for information that the loadable programs explicitly
register with the core. Loadable programs, on the other hand,
have full knowledge of the core and may freely call functions
and access variables that reside in the core. Loadable
programs can call each other by going through the kernel.
The kernel dispatches calls from one loaded program to another
by looking up the target program in an in-kernel list of
active processes. This one-way dependency makes it possible
to load and unload programs at run-time without needing
to patch the core and without the need for a reboot when a
module has been loaded or unloaded.
While it is possible to replace the core at run-time by running
a special loadable program that overwrites the current
core and reboots the system, experience has shown that this
feature is not often used in practice.
5.2
The Symbol Table
The Contiki core contains a table of the symbolic names
of all externally visible variable and function names in the
Contiki core and their corresponding addresses. The table
includes not only the Contiki system, but also the C language
run-time library. The symbol table is used by the dynamic
linker when linking loaded programs.
The symbol table is created when the Contiki core binary
image is compiled. Since the core must contain a correct
symbol table, and a correct symbol table cannot be created
before the core exists, a three-step process is required to
compile a core with a correct symbol table. First, an intermediary
core image with an empty symbol table is compiled.
From the intermediary core image an intermediary symbol
table is created. The intermediary symbol table contains the
correct symbols of the final core image, but the addresses
of the symbols are incorrect. Second, a second intermediary
core image that includes the intermediary symbol table
is created. This core image now contains a symbol table of
the same size as the one in the final core image so the addresses
of all symbols in the core are now as they will be
in the final core image. The final symbol table is then created
from the second intermediary core image. This symbol
table contains both the correct symbols and their correct addresses
. Third, the final core image with the correct symbol
table is compiled.
The process of creating a core image is automated through
a simple make script. The symbol table is created using a
combination of standard ELF tools.
For a typical Contiki system the symbol table contains
around 300 entries which amounts to approximately 4 kilobytes
of data stored in flash ROM.
5.3
The Dynamic Linker
We implemented a dynamic linker for Contiki that is designed
to link, relocate, and load either standard ELF files [3]
and CELF, Compact ELF, files. The dynamic linker reads
19
ELF/CELF files through the Contiki virtual filesystem interface
, CFS, which makes the dynamic linker unaware of the
physical location of the ELF/CELF file. Thus the linker can
operate on files stored either in RAM, on-chip flash ROM,
external EEPROM, or external ROM without modification.
Since all file access to the ELF/CELF file is made through
the CFS, the dynamic linker does not need to concern itself
with low-level filesystem details such as wear-leveling
or fragmentation [4] as this is better handled by the CFS.
The dynamic linker performs four steps to link, relocate
and load an ELF/CELF file. The dynamic linker first parses
the ELF/CELF file and extracts relevant information about
where in the ELF/CELF file the code, data, symbol table,
and relocation entries are stored. Second, memory for the
code and data is allocated from flash ROM and RAM, respectively
. Third, the code and data segments are linked and
relocated to their respective memory locations, and fourth,
the code is written to flash ROM and the data to RAM.
Currently, memory allocation for the loaded program is
done using a simple block allocation scheme. More sophisticated
allocation schemes will be investigated in the future.
5.3.1
Linking and Relocating
The relocation information in an ELF/CELF file consists
of a list of relocation entries. Each relocation entry corresponds
to an instruction or address in the code or data in the
module that needs to be updated with a new address. A relocation
entry contains a pointer to a symbol, such as a variable
name or a function name, a pointer to a place in the code or
data contained in the ELF/CELF file that needs to be updated
with the address of the symbol, and a relocation type
which specifies how the data or code should be updated. The
relocation types are different depending on the CPU architecture
. For the MSP430 there is only one single relocation
type, whereas the AVR has 19 different relocation types.
The dynamic linker processes a relocation entry at a time.
For each relocation entry, its symbol is looked up in the symbol
table in the core. If the symbol is found in the core's symbol
table, the address of the symbol is used to patch the code
or data to which the relocation entry points. The code or data
is patched in different ways depending on the relocation type
and on the CPU architecture.
If the symbol in the relocation entry was not found in the
symbol table of the core, the symbol table of the ELF/CELF
file itself is searched. If the symbol is found, the address that
the symbol will have when the program has been loaded is
calculated, and the code or data is patched in the same way
as if the symbol was found in the core symbol table.
Relocation entries may also be relative to the data, BSS,
or code segment in the ELF/CELF file. In that case no symbol
is associated with the relocation entry. For such entries
the dynamic linker calculates the address that the segment
will have when the program has been loaded, and uses that
address to patch the code or data.
5.3.2
Loading
When the linking and relocating is completed, the text and
data have been relocated to their final memory position. The
text segment is then written to flash ROM, at the location
that was previously allocated. The memory allocated for the
data and BSS segments are used as an intermediate storage
for transferring text segment data from the ELF/CELF file
before it is written to flash ROM. Finally, the memory allocated
for the BSS segment is cleared, and the contents of the
data segment is copied from the ELF/CELF file.
5.3.3
Executing the Loaded Program
When the dynamic linker has successfully loaded the code
and data segments, Contiki starts executing the program.
The loaded program may replace an already running Contiki
service. If the service that is to be replaced needs to pass
state to the newly loaded service, Contiki supports the allocation
of an external memory buffer for this purpose. However
, experience has shown that this mechanism has been
very scarcely used in practice and the mechanism is likely
to be removed in future versions of Contiki.
5.3.4
Portability
Since the ELF/CELF format is the same across different
platforms, we designed the Contiki dynamic linker to be easily
portable to new platforms. The loader is split into one
architecture specific part and one generic part. The generic
part parses the ELF/CELF file, finds the relevant sections of
the file, looks up symbols from the symbol table, and performs
the generic relocation logic. The architecture specific
part does only three things: allocates ROM and RAM, writes
the linked and relocated binary to flash ROM, and understands
the relocation types in order to modify machine code
instructions that need adjustment because of relocation.
5.3.5
Alternative Designs
The Contiki core symbol tab