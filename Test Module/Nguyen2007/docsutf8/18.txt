A Resilient Packet-Forwarding Scheme against Maliciously Packet-Dropping Nodes in Sensor Networks
ABSTRACT
This paper focuses on defending against compromised nodes'
dropping of legitimate reports and investigates the misbehavior
of a maliciously packet-dropping node in sensor networks
. We present a resilient packet-forwarding scheme using
Neighbor Watch System (NWS), specifically designed
for hop-by-hop reliable delivery in face of malicious nodes
that drop relaying packets, as well as faulty nodes that
fail to relay packets. Unlike previous work with multipath
data forwarding, our scheme basically employs single-path
data forwarding, which consumes less power than multipath
schemes. As the packet is forwarded along the single-path
toward the base station, our scheme, however, converts into
multipath data forwarding at the location where NWS detects
relaying nodes' misbehavior. Simulation experiments
show that, with the help of NWS, our forwarding scheme
achieves a high success ratio in face of a large number of
packet-dropping nodes, and effectively adjusts its forwarding
style, depending on the number of packet-dropping nodes
en-route to the base station.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General-Security
and protection
General Terms
Security, Algorithm, Reliability

INTRODUCTION
Wireless sensor networks consist of hundreds or even thousands
of small devices each with sensing, processing, and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
SASN'06, October 30, 2006, Alexandria, Virginia, USA.
Copyright 2006 ACM 1-59593-554-1/06/0010 ...
$
5.00.
communicating capabilities to monitor the real-world environment
. They are envisioned to play an important role
in a wide variety of areas ranging from critical military-surveillance
applications to forest fire monitoring and the
building security monitoring in the near future. In such a
network, a large number of sensor nodes are distributed to
monitor a vast field where the operational conditions are
harsh or even hostile. To operate in such environments, security
is an important aspect for sensor networks and security
mechanisms should be provided against various attacks
such as node capture, physical tampering, eavesdropping,
denial of service, etc [23, 33, 38].
Previous research efforts against outsider attacks in key-management
schemes [4, 13, 32] and secure node-to-node
communication mechanisms [24, 32] in sensor networks are
well-defined.
Those security protections, however, break
down when even a single legitimate node is compromised.
It turns out to be relatively easy to compromise a legitimate
node [14], which is to extract all the security information
from the captured node and to make malicious code
running for the attacker's purpose.
Even a small number of compromised nodes can pose
severe security threats on the entire part of the network,
launching several attacks such as dropping legitimate reports
, injecting bogus sensing reports, advertising inconsistent
routing information, eavesdropping in-network communication
using exposed keys, etc. Such disruption by the
insider attacks can be devastating unless proper security
countermeasures against each type of attacks are provided.
In reality, detecting all of the compromised nodes in the
network is not always possible, so we should pursue graceful
degradation [35], with a small number of compromised
nodes. The fundamental principle for defense against the
insider attacks is to restrict the security impact of a node
compromise as close to the vicinity of the compromised node
as possible.
When the attacker compromises a legitimate node, it may
first try to replicate the captured node indefinitely with the
same ID and spread them over the network. Against such
attacks, a distributed detection mechanism (based on emergent
properties [11]) has been proposed by Parno et al. [31].
In addition, Newsome et al. [30] have presented the techniques
that prevent the adversary from arbitrarily creating
new IDs for nodes.
Using cryptographic information obtained from a captured
node, attackers can establish pairwise keys with any
legitimate nodes in order to eavesdrop communication any-59
where in the network. Localized key-establishment scheme
by Zhu et al. [46] is a good solution against such an insider
attack. Since the scheme does not allow a cloned node
(by inside-attackers) to establish pairwise keys with any legitimate
nodes except the neighbors of the compromised
nodes, the cryptographic keys extracted from the compromised
node are of no use for attackers.
Compromised nodes can also inject false sensing reports
to the network (i.e. report fabrication attacks [39]), which
causes false alarms at the base station or the aggregation
result to far deviate from the true measurement. Proposed
en-route filtering mechanisms [8, 39, 41, 44, 47] that detect
and drop such false reports effectively limit the impact
of this type of attacks. Also, proposed secure aggregation
protocols [34, 40] have addressed the problem of false data
injection, and they ensure that the aggregated result is a
good approximation to the true value in the presence of a
small number of compromised nodes.
Advertising inconsistent routing information by compromised
nodes can disrupt the whole network topology. Hu et
al. [19, 20] have proposed SEAD, a secure ad-hoc network
routing protocol that uses efficient one-way hash functions
to prevent any inside attackers from injecting inconsistent
route updates. A few secure routing protocols [6, 27] in sensor
networks have been proposed to detect and exclude the
compromised nodes injecting inconsistent route updates.
Compromised nodes also can silently drop legitimate reports
(i.e. selective forwarding attacks [23]), instead of forwarding
them to the next-hop toward the base station. Since
data reports are delivered over multihop wireless paths to
the base station, even a small number of strategically-placed
packet-dropping nodes can deteriorate the network throughput
significantly. In order to bypass such nodes, most work
on secure routing and reliable delivery in sensor networks relies
on multipath forwarding scheme [5, 6, 7, 10], or interleaved-mesh
forwarding scheme [26, 29, 39, 42].
Among the insider attacks described above, this paper focuses
on defense against compromised nodes' dropping of legitimate
reports and we present a resilient packet-forwarding
scheme using Neighbor Watch System (NWS) against maliciously
packet-dropping nodes in sensor networks. We investigate
the misbehavior of a maliciously packet-dropping
node and show that an acknowledgement (ACK) that its
packets were correctly received at the next-hop node does
not guarantee reliable delivery from the security perspective.
NWS is specifically designed for hop-by-hop reliable delivery
in face of malicious nodes that drop relaying packets,
as well as faulty nodes that fail to relay packets. Unlike previous
work [10, 29, 42] with multipath data forwarding, our
scheme basically employs single-path data forwarding, which
consumes less power than multipath schemes. As the packet
is forwarded along the single-path toward the base station,
our scheme, however, converts into multipath data forwarding
at the location where NWS detects relaying nodes' misbehavior
.
NWS exploits the dense deployment of large-scale static
sensor networks and the broadcast nature of communication
pattern to overhear neighbors' communication for free.
The contribution of this paper is two-fold. First, we investigate
the misbehavior of a maliciously packet-dropping
node and propose a resilient packet-forwarding scheme, which
basically employs single-path data forwarding, in face of
such nodes, as well as faulty nodes. Second, our scheme
can work with any existing routing protocols. Since it is
designed not for securing specific protocols but for universal
protocols, it can be applied to any existing routing protocols
as a security complement.
The rest of paper is organized as follows. Background is
given in Section 2. We present our resilient packet-forwarding
scheme in Section 3. An evaluation of the scheme is given
and discussed in Section 4. We present conclusions and future
work in Section 5.
BACKGROUND
Sensor networks typically comprise one or multiple base
stations and hundreds or thousands of inexpensive, small,
static, and resource-constrained nodes scattered over a wide
area.
An inexpensive sensor node cannot afford tamper-resistant
packaging. We assume that a large number of sensor
nodes are deployed in high density over a vast field, such
that the expected degree of a node is high; each sensor has
multiple neighbors within its communication range. Sensing
data or aggregated data are sent along the multihop route
to the base station. We assume that each sensor node has
a constant transmission range, and communication links are
bidirectional.
Our sensor network model employs a key-establishment
scheme that extends the one in LEAP [46] where the impact
of a node compromise is localized in the immediate
neighborhood of the compromised node, and our scheme is
based on it. To evolve from LEAP, we will describe it briefly
in Section 2.4.
2.2
Threat Model
The attacks launched from outsiders hardly cause much
damage to the network, since the rouge node, which does not
possesses the legitimate credentials (e.g. the predistributed
key ring from the key pool [13]), fails to participate in the
network. On the other hand, there may be multiple attacks
from insiders (e.g.
dropping legitimate reports, injecting
false sensing reports, advertising inconsistent route information
, and eavesdropping in-network communication using
exposed keys, etc), and the combination of such attacks
can lead to disruption of the whole network. Thus, proper
security countermeasures (specifically designed to protect
against each type of the attacks) should be provided.
Among them, in this paper, we focus on defending against
compromised nodes' dropping of legitimate reports; Other
attacks mentioned above are effectively dealt with by several
proposed schemes as described in the previous section.
We consider a packet-dropping node as not merely a faulty
node, but also an arbitrarily malicious node. Some previous
work [3, 29, 36] on reliable delivery uses an acknowledgement
(ACK) that its packets were correctly received at the
next-hop node, in order to find out unreliable links. However
, in the presence of maliciously packet-dropping nodes,
simply receiving ACK from a next-hop node does not guarantee
that the packet will be really forwarded by the next-hop
node. For example, node u forwards a packet to compromised
node v, and node u waits for ACK from node v.
Node v sends back ACK to node u, and then node v silently
drops the packet. This simple example shows that receiving
ACK is not enough for reliable delivery in face of maliciously
packet-dropping nodes.
60
For more reliability, we should check whether the next-hop
node really forwards the relaying packet to its proper
next-hop node. Fortunately, due to the broadcast nature of
communication pattern in sensor networks, we can overhear
neighbors' communication for free (for now per-link encryption
is ignored). After forwarding a packet to next-hop node
v and buffering recently-sent packets, by listening in on node
v's traffic, we can tell whether node v really transmits the
packet. Watchdog [28] mechanism (extension to DSR [22]),
implicit ACK in M
2
RC [29], and local monitoring in DICAS
[25] detect misbehaving nodes in this way. However,
this kind of simple overhearing schemes does not guarantee
reliable delivery, either.
With arbitrarily malicious nodes, we should be assured
that the node, to which the next-hop node forwards the
relaying packet, is really a neighbor of the next-hop node.
For example, node u forwards a packet to compromised node
v, and node u listens in on node v's traffic to compare each
overheard packet with the packet in the buffer.
Node v
transmits the relaying packet whose intended next-hop id
marked with any id in the network such as x that is not a
neighbor of v. Then node u overhears this packet from node
v, and considers it forwarded correctly despite the fact that
none actually receives the packet. The packet is eventually
dropped without being detected. We refer to this attack as
blind letter attack.
We consider packet-dropping attacks to be addressed in
this paper as ones ranging from the naive case (e.g. a faulty
node) to the most malicious one (e.g.
a node launching
blind letter attack). We focus on developing a solution to
such attacks.
2.3
Notation
We use the following notation throughout the paper:
· u, v are principals, such as communicating nodes.
· R
u
is a random number generated by u.
· f
K
is a family of pseudo-random function [12].
· MAC(K, M
1
|M
2
) denotes the message authentication
code (MAC) of message - concatenation of M
1
and M
2
,
with MAC key K.
2.4
Key-Establishment Scheme in LEAP
LEAP supports the establishment of four types of keys for
each sensor node - an individual key shared with the base
station, a pairwise key shared with its neighbor, a cluster
key shared with its surrounding neighbors, and a group key
shared by all the nodes in the networks.
It assumes that the time interval T
est
for a newly deployed
sensor node to complete the neighbor discovery phase (e.g.
tens of seconds) is smaller than the time interval T
min
that is
necessary for the attacker to compromise a legitimate node
(i.e. T
min
&gt; T
est
). Some existing work [1, 39] has made
similar assumptions, which are believed to be reasonable.
The four steps for a newly added node u to establish a
pairwise key with each of its neighbors are as follows:
1. Key Pre-distribution. Each node u is loaded with
a common initial key K
I
, and derives its master key
K
u
= f
K
I
(u).
2. Neighbor Discovery. Once deployed, node u sets
up a timer to fire after time T
min
, broadcasts its id,
and waits for each neighbor v's ACK. The ACK from
v is authenticated using the master key K
v
of node v.
Since node u knows K
I
, it can derive K
v
= f
K
I
(v).
u -  :
u, R
u
.
v - u :
v, M AC(K
v
, R
u
|v).
3. Pairwise Key Establishment. Node u computes its
pairwise key with v, K
uv
, as K
uv
= f
K
v
(u). Node v
also computes K
uv
in the same way. K
uv
serves as
their pairwise key.
4. Key Erasure. When its timer expires, node u erases
K
I
and all the master keys of its neighbors. Every
node, however, keeps its own master key, in order to
establish pairwise keys with later-deployed nodes.
Once erasing K
I
, a node will not be able to establish a
pairwise key with any other nodes that have also erased K
I
.
Without K
I
, a cloned node (by an attacker compromising a
legitimate node after T
min
) fails to establish pairwise keys
with any nodes except the neighbors of the compromised
node. In such a way, LEAP localizes the security impact of
a node compromise.
A RESILIENT PACKET-FORWARDING SCHEME USING NEIGHBOR WATCH SYSTEM
In this section, we present our resilient packet-forwarding
scheme using Neighbor Watch System (NWS). NWS works
with the information provided by Neighbor List Verification
(NLV) to be described in Section 3.2.
3.1
Neighbor Watch System
Our scheme seeks to achieve hop-by-hop reliable delivery
in face of maliciously packet-dropping nodes, basically employing
single-path forwarding. To the best of our knowledge
, proposed works so far rely on multipath forwarding
or diffusion-based forwarding, exploiting a large number of
nodes in order to deliver a single packet. ACK-based technique
is not a proper solution at all as explained in the
previous section.
With NWS, we can check whether the next-hop node really
forwards the relaying packet to the actual neighbor of
the next-hop node. The basic idea of our scheme is as follows
:
1. Neighbor List Verification. After deployment, during
neighbor discovery phase, every node u gets to
know of not only its immediate neighbors, but also the
neighbors' respective neighbor lists (i.e. u's neighbors'
neighbor lists). The lists are verified using Neighbor
List Verification to be described in Section 3.2. Every
node stores its neighbors' neighbor lists in the neighbor
table.
2. Packet Forwarding to Next-hop. If node u has
a packet to be relayed, it buffers the packet and forwards
the packet (encrypted with cluster key of node
u so that neighbors of node u can overhear it) to its
next-hop node v. As in LEAP, a cluster key is a key
shared by a node and all its neighbors, for passive participation
.
61
u
v
?
w
y
Figure 1:
Neighbor Watch System.
Sub-watch
nodes w and y, as well as primary-watch node u listen
in on v's traffic.
3. Designation of Watch Nodes.
Overhearing the
packet from node u to node v, among neighbors of
node u, the nodes that are also neighbors of node v (in
Figure 1, nodes w and y) are designated as sub-watch
nodes and store the packet in the buffer. Other nodes
(that are not neighbors of node v) discard the packet.
Node u itself is a primary-watch node. A primary-watch
node knows which nodes are sub-watch nodes,
since every node has the knowledge of not only its
neighbors but also their respective neighbor lists.
4. Neighbor Watch by Sub-Watch Node. Sub-watch
nodes w and y listen in on node v's traffic to compare
each overheard packet with the packet in the buffer.
To defend against blind letter attack, each of them
also checks whether the packet's intended next-hop is
a verified neighbor of node v, by looking up the neighbor
table. If all correct, the packet in the buffer is
removed and the role of the sub-watch node is over.
If the packet has remained in the buffer for longer
than a certain timeout, sub-watch nodes w and y forward
the packet (encrypted with their respective cluster
keys) to their respective next-hop nodes other than
node v. Then the role of a sub-watch node is over (each
of them is now designated as a primary-watch node for
the packet it has forwarded).
5. Neighbor Watch by Primary-Watch Node. Primary-watch
node u does the same job as sub-watch nodes.
The only difference, however, is that it listens in on
not only node v's traffic, but also sub-watch nodes w's
and y's. If the packet is correctly forwarded on by at
least one of them (nodes v, w, or y), primary-watch
node u removes the packet in the buffer and the role
of the primary-watch node is over.
Otherwise, after a certain timeout, primary-watch node
u forwards the packet (encrypted with its cluster key)
to its next-hop other than node v.
As the packet is forwarded on, this procedure (except for
Neighbor List Verification) of NWS is performed at each
hop so that hop-by-hop reliable delivery can be achieved
with mainly depending on single-path forwarding. On the
other hand, in the previous approaches [29, 39, 42], when
forwarding a packet, a node broadcasts the packet with no
designated next-hop, and all neighbors with smaller costs
1
1
The cost at a node is the minimum energy overhead to
Base
Station
u
v
?
?
Figure 2:
An example of our packet-forwarding
scheme. Only the nodes that relay the packet are
presented. With the help of sub-watch nodes (grey
ones), our scheme bypasses two packet-dropping
nodes en-route to the base station.
or within a specific geographic region continue forwarding
the packet anyway. For example, in Figure 1, if nodes v,
w, and y have smaller costs than node u in the previous
approaches, they all forward
2
the packet from node u. In
our scheme, however, sub-watch nodes w and y are just on
watch in designated next-hop node v, instead of uncondi-tionally
forwarding the packet. If no packet-dropping occurs
en-route to the base station, the packet may be forwarded
along single-path all the way through.
However, a packet-dropping triggers the multipath forwarding
for the dropped packet. If the designated next-hop
node v in Figure 1 has not forwarded the relaying packet to
its certified neighbor by a certain timeout, sub-watch nodes
w and y forward the packet to their respective next-hop.
At the point, the packet is sent over multiple paths. Since
the location where the packet-dropping occurs is likely in
an unreliable region, this prompt reaction of the conversion
to multipath forwarding augments the robustness in our
scheme. The degree of multipath depends on the number of
the sub-watch nodes. Figure 2 shows an example of our
packet-forwarding scheme, bypassing two packet-dropping
nodes en-route to the base station. If a node utilizes a cache
[16, 21] for recently-received packets, it can suppress the
same copy of previously-received one within a certain timeout
, as nodes u and v in Figure 2.
Our scheme requires that a relaying packet should be encrypted
with a cluster key of a forwarding node, in order
that all its neighbors can decrypt and overhear it. In fact,
per-link encryption provides better robustness to a node
compromise, since a compromised node can decrypt only
the packets addressed to it. Thus, there exists a tradeoff
between resiliency against packet-dropping and robustness
to a node compromise. However, encryption with a cluster
key provides an intermediate level of robustness to a node
compromise [24] (a compromised node can overhear only
its immediate neighborhood), and also supports local broadcast
(i.e. resiliency against packet-dropping), so that we can
achieve graceful degradation in face of compromised nodes.
forward a packet from this node to the base station.
2
It is the broadcast transmission with no designated next-hop
, and, if needed, the packet should be encrypted with a
cluster key in order for all neighbors to overhear it.
62
To make our scheme work (against blind letter attack), we
must address the problem of how a node proves that it really
has the claimed neighbors. It is the identical problem of
how a node verifies the existence of its neighbors' neighbors.
Apparently, a node has the knowledge of its direct neighbors
by neighbor discovery and pairwise key establishment
phases. However, in the case of two-hop away neighbors,
as in Figure 1, malicious node v can inform its neighbor u
that it also has neighbor node x (any possible id in the network
) which in fact is not a neighbor of node v. Node u has
to believe it, since node x is not a direct neighbor of node
u, and only the node v itself knows its actual surrounding
neighbors. Then, how do we verify the neighbors' neighbors
? The answer to this critical question is described in
the next subsection.
3.2
Neighbor List Verification
To verify neighbors' neighbors, we present Neighbor List
Verification (NLV) which extends the pairwise key establishment
in LEAP. During neighbor discovery in LEAP, two
messages are exchanged between neighbors to identify each
other. On the other hand, NLV adopts three-way handshaking
neighbor discovery, in order to identify not only communicating
parties but also their respective neighbors.
NLV has two cases of neighbor discovery. One is that
neighbor discovery between two nodes that are both still
within the initial T
min3
(referred as pure nodes). The other
is that neighbor discovery between a newly-deployed node
within the initial T
min
and an existing node over the initial
T
min
(referred as an adult node).
Neighbor Discovery between Pure Nodes. Neighbor
list verification process between pure nodes is quite simple.
If a pure node broadcasts its neighbor list before the elapse of
its initial T
min
, we can accept the list as verifiable. Thus, the
key point here is to keep track of each other's T
min
, and to
make sure that both broadcast their respective neighbor lists
before their respective T
min
. The following shows the three-way
handshaking neighbor discovery between pure node u
and v:
u -  : u, R
u
.
v - u : v, T
v
, R
v
ßÞ
M
v
, M AC(K
v
, R
u
|K
u
|M
v
).
u - v : u, T
u
ßÞ
M
u
, M AC(K
uv
, R
v
|M
u
).
where T
v
and T
u
are the amount of time remaining until
T
min
of v and T
min
of u, respectively. Once deployed, node
u sets up a timer to fire after time T
min
. Then, it broadcasts
its id, and waits for each neighbor v's ACK. The ACK from
every neighbor v is authenticated using the master key K
v
of
node v. Since node u knows K
I 4
, it can derive K
v
= f
K
I
(v).
The ACK from node v contains T
v
, the amount of time
remaining until T
min
of node v. If T
v
is a non-zero value,
node v claims to be a pure node. K
u
in MAC proves node
v to be a pure node, since pure node v should know K
I
and derive K
u
= f
K
I
(u). Node u records
T
v
(T
v
added
3
T
min
is the time interval, necessary for the attacker to compromise
a legitimate node as in LEAP [46].
4
Each node u is loaded with a common initial key K
I
, and
derives its master key K
u
= f
K
I
(u). After time T
min
, node
u erases K
I
and all the master keys of its neighbors.
u
v
w
x
t
z
r
q
Figure 3: Neighbor Discovery between Pure node x
and Adult node u. Grey and white nodes represent
adult and pure nodes, respectively.
to the current time of node u) in the entry for node v in
the neighbor table. Node u computes its pairwise key with
v, K
uv
= f
K
v
(u).
5
Node u also generates M AC(K
v
, v|u)
(which means that v certifies u as an immediate neighbor),
and stores it as a certificate.
The ACK from node u also contains T
u
, the amount of
time remaining until T
min
of u. This ACK is authenticated
using their pairwise key K
uv
, which proves node u a pure
node and u's identity. Node v then records
T
u
(T
u
added
to the current time of v) in the entry for u in the neighbor
table. It also generates M AC(K
u
, u|v) and stores it as a
certificate. Then, the three-way handshaking is done.
Every pure node u broadcasts its neighbor list just prior
to T
min
of u. Each receiving neighbor v checks whether the
receiving time at v is prior to
T
u
in the neighbor table. If
yes, the neighbor list of u is now certified by each neighbor v.
Neighbor Discovery between A Pure Node and An
Adult node. After most nodes have completed bootstrapping
phase, new nodes can be added in the network. Consider
Figure 3. The issue here is how adult node u can assure
its existing neighbors (v and w) of the existence of its
newly-added neighbor x. This is a different situation from
the above neighbor list verification case between two pure
nodes. Thus, the messages exchanged during the three-way
handshaking are somewhat different in this case. The following
shows the three-way handshaking neighbor discovery
between pure node x and adult node u:
x-  :
x, R
x
.
u- x :
u, T
u
, R
u
, v,
certif icate
Þ
ß
M AC(K
v
, v|u), w,
certif icate
Þ
ß
M AC(K
w
, w|u)
ßÞ
M
u
, M AC(K
u
, R
x
|M
u
).
x- u :
x, T
x
,
certif icate
Þ
ß
M AC(K
x
, x|u), v,
one-time cert.
Þ
ß
M AC(K
v
, x|u), w,
one-time cert.
Þ
ß
M AC(K
w
, x|u)
ßÞ
M
x
, M AC(K
xu
, R
u
|M
x
).
Newly-added node x sets up a timer to fire after time T
min
.
Then, it broadcasts its id, and waits for each neighbor u's
5
Node v also computes K
uv
in the same way. K
uv
serves as
their pairwise key.
63
ACK. The ACK from every neighbor u is authenticated using
the master key K
u
of node u. Since node x knows K
I
,
it can derive K
u
= f
K
I
(u). The ACK from node u contains
T
u
, the amount of time remaining until T
min
of u. If T
u
is
zero, node u is an adult node that may already have multiple
neighbors as in Figure 3. Node u reports its certified
neighbor list (v and w) to x by including their respective
certificates in the ACK. Node x verifies u's neighbor list by
examining each certificate, since x can generate any certificate
with K
I
. If all correct, x computes its pairwise key with
u, K
xu
= f
K
u
(x). Node x also generates M AC(K
u
, u|x) and
stores it as a certificate.
The ACK from x also contains T
x
, the amount of time
remaining until T
min
of x. This ACK is authenticated using
their pairwise key K
xu
, which proves node x a pure node
and x's identity. Node u then records
T
x
(T
x
added to the
current time of u) in the entry for x in the neighbor table.
Since adult node u cannot generate M AC(K
x
, x|u) by itself,
pure node x provides the certificate for u in the ACK. Node
x also provides one-time certificates
6
for each of u's certified
neighbors (v and w). Then, the three-way handshaking is
done.
After that, adult node u broadcasts one-time certificates
(from newly-discovered pure node x), in order to assure u's
existing neighbors (v and w) of the discovery of new neighbor
x. The packet containing one-time certificates is as follows:
u-  :
u, x, v,
one-time cert.
Þ
ß
M AC(K
v
, x|u), w,
one-time cert.
Þ
ß
M AC(K
w
, x|u), K
A
u
ßÞ
M
u
, M AC(K
c
u
, M
u
).
where x is a new neighbor of u, K
A
u
is a local broadcast authentication
key in u's one-way key chain, K
c
u
is the cluster
key of u. Each receiving neighbor v of u verifies u's new
neighbor x by examining the one-time certificate designated
for v, M AC(K
v
, x|u)
6
. If ok, node x is now certified by each
neighbor v of u. Then, one-time certificates can be erased,
since they are of no use any more.
Broadcast authentication only with symmetric keys such
as cluster key K
c
u
fails to prevent an impersonation attack,
since every neighbor of u shares the cluster key of u. Thus,
we employ the reverse disclosure of one-way key chain K
A
u
as in LEAP.
Just prior to T
min
of x, pure node x broadcasts its neighbor
list. Each receiving neighbor u of x checks whether the
receiving time at u is prior to
T
x
in the neighbor table. If
yes, the neighbor list of x is now certified by each neighbor u.
In summary, through the proposed three-way handshaking
neighbor discovery process, pure node u identifies each
immediate neighbor v and v's certified neighbor list (if v is
an adult node), and keeps track of T
min
of v. Just prior
to T
min
of u, node u broadcasts its direct neighbor list so
that every neighbor of u accepts the list as verifiable. Then,
node u becomes an adult node. After that, if newly-added
node x initiates neighbor discovery with adult node u, node
u identifies pure node x, keeps track of T
min
of x, provides
u's certified neighbor list to x, and, in return, takes one-time
certificates from x. Node u then broadcasts these one-time
6
One-time certificate, for instance M AC(K
v
, x|u), assures
v that x is an immediate neighbor of u. It is generated by
pure node x with master key of v.
Table 1: An example of the Neighbor Table of u.
Neighbor ID
Certificate
Verified Neighbor List
v
M AC(K
v
, v|u)
u, w, t
w
M AC(K
w
, w|u)
u, v, z
x
M AC(K
x
, x|u)
u, r, q
certificates, in order to assure u's existing neighbors of the
discovery of new neighbor x. Thus, every time adult node u
discovers newly-added node x through three-way handshaking
, node u informs (by broadcasting) its existing neighbors
of the discovery of new neighbor x. Also, whenever receiving
neighbor list information from pure neighbor x, node u
checks whether the receiving time at u is prior to
T
x
in the
neighbor table. If yes, u now accepts the neighbor list of x
as verifiable.
Through the above neighbor list verification in the bootstrapping
phase, every node gets the knowledge of its neighbors'
certified neighbors. Our Neighbor Watch System makes
use of this information to prevent blind letter attack. With
this knowledge, watch nodes are able to check whether the
relaying packet's intended next-hop is a verified neighbor of
the forwarding node.
3.3
Neighbor Table Maintenance
The information obtained through neighbor list verification
(e.g. its direct neighbors, corresponding certificates,
neighbors' neighbor lists, etc) is stored in the neighbor table
of each node. Table 1 shows an example of the neighbor
table of node u. In densely-deployed sensor networks, the
expected degree of a node is high. However, in this example,
for simplicity, node u has only three neighbors v, w, and x
as in Figure 3.
The entries in the neighbor table are accessed and maintained
with immediate neighbor IDs. For example, if node
u overhears the packet sent from w to v, node u begins to
listen in on v's traffic as a sub-watch node (since the neighbor
table of u has both v's and w's entries in it). Unless v
forwards the packet to a node of the Verified Neighbor List
in v's entry by a certain timeout, sub-watch node u will forward
the packet to its next-hop other than v; many existing
routing protocols [5, 18, 21, 27, 37, 43] enable each node to
maintain multiple potential next-hop. Once forwarding the
packet, sub