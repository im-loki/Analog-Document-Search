dBBlue: Low Diameter and Self-routing Bluetooth Scatternet
ABSTRACT
This paper addresses the problem of scatternet formation for single-hop
Bluetooth based ad hoc networks, with minimal communication
overhead. We adopt the well-known structure de Bruijn graph
to form the backbone of Bluetooth scatternet, hereafter called dBBlue
, such that every master node has at most seven slaves, every
slave node is in at most two piconets, and no node assumes both
master and slave roles. Our structure dBBlue also enjoys a nice
routing property: the diameter of the graph is
Ç
´ÐÓ
Òµ
and we can
find a path with at most
Ç
´ÐÓ
Òµ
hops for every pair of nodes without
any routing table . Moreover, the congestion of every node is
at most
Ç
´ÐÓ
Ò
Òµ
, assuming that a unit of total traffic demand
is equally distributed among all pair of nodes. We discuss in detail
a vigorous method to locally update the structure dBBlue using
at most
Ç
´ÐÓ
Òµ
communications when a node joins or leaves the
network. In most cases, the cost of updating the scatternet is actually
Ç
´½µ
since a node can join or leave without affecting the
remaining scatternet. The number of nodes affected when a node
joins or leaves the network is always bounded from above by a constant
. To facilitate self-routing and easy updating, we design a scalable
MAC assigning mechanism for piconet, which guarantees the
packet delivery during scatternet updating. The dBBlue scatternet
can be constructed incrementally when the nodes join the network
one by one. Previously no method can guarantee all these properties
although some methods can achieve some of the properties.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: Wireless communication
, Network topology; G.2.2 [Graph Theory]: Network problems
, Graph algorithms
General Terms
Algorithms, Design, Theory
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
DIALM­POMC'03, September 19, 2003, San Diego, California, USA.
Copyright 2003 ACM 1-58113-765-6/03/0009 ...
$
5.00.

INTRODUCTION
Bluetooth [8] is a promising new wireless technology, which enables
portable devices to form short-range wireless ad hoc networks
based on a frequency hopping physical layer. Bluetooth ad-hoc
networking presents some technical challenges, such as scheduling
, network forming and routing. User mobility poses additional
challenges for connection rerouting and QoS services. It has been
widely predicted that Bluetooth will be the major technology for
short range wireless networks and wireless personal area networks.
This paper deals with the problem of building ad hoc networks using
Bluetooth technology.
According to the Bluetooth standard, when two Bluetooth devices
come into each other's communication range, one of them
assumes the role of master of the communication and the other becomes
the slave. This simple one hop network is called a piconet,
and may include more slaves. The network topology resulted by the
connection of piconets is called a scatternet. There is no limit on
the maximum number of slaves connected to one master, although
the number of active slaves at one time cannot exceed . If a master
node has more than
slaves, some slaves must be parked. To
communicate with a parked slave, a master has to unpark it, thus
possibly parking another active slave instead. The standard also
allows multiple roles for the same device. A node can be master
in one piconet and a slave in one or more other piconets. However,
one node can be active only in one piconet. To operate as a member
of another piconet, a node has to switch to the hopping frequency
sequence of the other piconet. Since each switch causes delay (e.g.,
scheduling and synchronization time), an efficient scatternet formation
protocol can be one that minimizes the roles assigned to the
nodes, without losing network connectivity.
While several solutions and commercial products have been in-troduced
for one-hop Bluetooth communication, the Bluetooth specification
does not indicate any method for scatternet formation. The
problem of scatternet formation has not been dealt with until very
recently. The solutions proposed in literature can be divided into
single-hop and multi-hop solutions. Several criteria could be set
as the objectives in forming scatternet. First of all, the protocol
should create degree limited scatternets, to avoid parking any node.
Secondly, the number of piconets should be minimized to provide
faster routing. Thirdly, the formation and maintenance of scatternet
should have small communication overhead. Fourthly, the diameter
of the scatternet should be small, i.e., the maximum number of hops
between any two devices must be small. In this paper, we focus on
scatternet formation for single-hop ad hoc networks. In a single-hop
ad hoc network, all wireless devices are in the radio vicinity
of each other, e.g., electronic devices in a laboratory, or laptops in
a conference room. A single-hop network can be modeled by a
complete graph.
22
Previous literature on scatternet formation assumed that devices
are not able to communicate unless they have previously discovered
each other by synchronizing their frequency hopping patterns.
Thus, even if all nodes are within direct communication range of
each other, only those nodes, which are synchronized with the transmitter
, can hear the transmission. Synchronizing the frequency
hopping patterns is apparently a time consuming and pseudo-random
process [13]. In this paper we assume that the problem of discovering
all neighbors within transmission radius of a device is resolved
by separate Bluetooth protocol. One such protocol for discovering
all one hop networks is described in [13, 3], while a protocol that
provides two-hop information to every node is described in [12].
These protocols are applicable as the pre-phase of our scheme.
This paper addresses the problem of scatternet formation for
single-hop Bluetooth based ad hoc networks, with minimal communication
overhead. We adopt the well-known structure de Bruijn
graph to form the backbone of Bluetooth scatternet, hereafter called
dBBlue, such that every master node has at most seven slaves, every
slave node is in at most two piconets, and no node assumes
both master and slave roles. Our structure dBBlue also enjoys a
nice routing property: the diameter of the graph is
Ç
´ÐÓ
Òµ
and
we can find a path with at most
Ç
´ÐÓ
Òµ
hops between every pair
of nodes without any routing table. Moreover, the congestion of
every node is at most
Ç
´ÐÓ
Ò
Òµ
, assuming that a unit of total
traffic demand is evenly distributed among all pair of nodes. We
discuss in detail a vigorous method to locally update the structure
dBBlue using at most
Ç
´ÐÓ
Òµ
communications when a node joins
or leaves the network. In most cases, the cost of updating the scatternet
is actually
Ç
´½µ
since a node can join or leave without affecting
the remaining scatternet. The number of nodes affected when
a node joins or leaves the network is always bounded from above
by a constant. To facilitate self-routing and easy updating, we design
a scalable MAC assigning mechanism for piconet, which can
guarantee the packet delivery even during updating. Our method
can construct the structure dBBlue incrementally when the nodes
join the network one by one. In addition, the structure formed by
our method can sustain the faults of
¾
nodes and the network is
still guaranteed to be connected. If a node detects a fault of some
neighboring master node or bridge slave node, it can dynamically
re-route the packets and the path traveled by the packet is still at
most
Ç
´ÐÓ
Òµ
. Previously no method can guarantee all these properties
although some methods can achieve some of the properties.
The rest of the paper is organized as follows. Section 2 presents
our new Bluetooth formation algorithms for single-hop ad hoc networks
. We describe how to build a static scatternet of
Ò
nodes based
on de Bruijn graph and assign roles and labels to them. Section 3
proposes a vigorous method to locally and dynamically update the
scatternet topology when node joins or leaves the network. Section
4 describes the routing method for our de Bruijn based scatternet
which efficiently finds the next node need to go without any routing
table. The related works is discussed in section 5. We conclude our
paper in Section 6 by pointing out some possible future research
directions.
DBBLUE SCATTERNET CONSTRUCTION
Our dBBlue scatternet first builds a backbone based on the well-known
de Bruijn graph [5]. The de Bruijn graph, denoted by
´
µ
,
is a directed graph with
nodes. Assume that each node is assigned
a unique label of length
on the alphabet
¼
¡
¡
¡

½
.
There is an edge in
´
µ
from a node with label
Ü
½
Ü
¾
¡
¡
¡
Ü
to
any node with label
Ü
¾
¡
¡
¡
Ü
Ý
, where
Ý
¾
¼
¡
¡
¡

½
. Figure
1 illustrates
´¾
¿µ
. It is well-known that the de Bruijn graph
enables self-routing intrinsically. The self-routing path from the
source with label
Ü
½
Ü
¾
¡
¡
¡
Ü
to the target with label
Ý
½
Ý
¾
¡
¡
¡
Ý
is
Ü
½
Ü
¾
¡
¡
¡
Ü
Ü
¾
¡
¡
¡
Ü
Ý
½
Ü
¿
¡
¡
¡
Ü
Ý
½
Ý
¾
¡
¡
¡
Ü
Ý
½
¡
¡
¡
Ý
½
Ý
½
¡
¡
¡
Ý
. Observe that, we could find a shorter route by looking
for the longest sequence that is both a suffix of
Ü
½
Ü
¾
¡
¡
¡
Ü
and a
prefix of
Ý
½
Ý
¾
¡
¡
¡
Ý
. Suppose that
Ü
¡
¡
¡
Ü
Ý
½
¡
¡
¡
Ý

·½
is
such longest sequence. The shortest path between the source and
the target is
Ü
½
¡
¡
¡
Ü
Ü
¾
¡
¡
¡
Ü
Ý

·¾
Ü
¿
¡
¡
¡
Ü
Ý

·¾
Ý

·¿
¡
¡
¡
Ü
½
¡
¡
¡
Ü
Ý

·¾
¡
¡
¡
Ý
½
Ý
½
¡
¡
¡
Ý
. Clearly, the
route between any two nodes is at most
hops, i.e.,
´
µ
has
diameter
ÐÓ
Ò
, where
Ò
is the number of nodes of the
graph.
111
001
011
010
100
110
000
101
Figure 1: The de Bruijn graph
´¾
¿µ
.
The classical de Bruijn graph is balanced in the sense that the
labels of all nodes have the same length. The de Bruijn graph can
be generalized to any set of vertices whose labels form a universal
prefix set. In [7], Fraigniaud and Gauron proposed a novel
method to construct an efficient topology for P2P network based
on the generalized de Bruijn graph defined on a universal prefix
set. "A universal prefix set is a set
Ë
of labels on an alphabet
¦
such that, for any infinite word
Û
¾
¦
, there is a unique
word in
Ë
, which is a prefix of
Û
. The empty set is also a universal
prefix set."[7] For instance,
¼¼
¼½
½¼¼
½¼½
½½¼
½½½
is
a universal prefix set on alphabet
¦
¼
½
, but
¼¼
¼½
½¼
and
¼¼
¼½
½¼¼
½¼¼¼
½¼½
½½¼
½½½
are not. There is a directed
edge from node
Ù
Ü
½
Ü
¾
¡
¡
¡
Ü
to another node
Ú
in the generalized
de Bruijn graph if
Ü
¾
¡
¡
¡
Ü
is the prefix of the label of node
Ú
. A generalized de Bruijn graph is pseudo-balanced if the lengths
of the labels are different by at most one. For simplicity, we still
denote a pseudo-balanced de Bruijn graph on alphabet
¼
½
by
´¾
µ
if the node labels have length at least
bits and at most
·
½
bits. We also say that a node from
´¾
µ
is at level
if its
label has
bits.
In this paper, we only consider the balanced or pseudo-balanced
binary de Bruin graph
´¾
Ñµ
. Node labels in a pseudo-balanced
de Bruijn graph correspond to all the leaf nodes in a full binary tree,
in which the depth difference between any two leaf nodes is at most
one and each internal node has two children, Figure 2 illustrates the
correspondence between them. In the figure, the pseudo-balanced
de Bruijn graph is defined on the leaf nodes and directed edges.
In a pseudo-balanced de Bruijn graph
´¾
µ
, each node has at
most
out-neighbors and
¾
in-neighbors. To route a packet from
a node
Ù
with label
Ü
½
Ü
¾
¡
¡
¡
Ü
× ½
Ü
×
to another node
Ú
with label
Ý
½
Ý
¾
¡
¡
¡
Ý
Ø ½
Ý
Ø
, where
×
Ø
¾
·
½
. Node
Ù
will forward
the packet to its neighbor node with label
Ü
¾
¡
¡
¡
Ü
× ½
Ü
×
, or
Ü
¾
¡
¡
¡
Ü
× ½
Ü
×
Ý
½
, or
Ü
¾
¡
¡
¡
Ü
× ½
Ü
×
Ý
½
Ý
¾
. Notice that since the labels
of the nodes are a universal prefix set, we know that exactly
one of these three labels does exist. The following nodes keep forwarding
the packet similarly until it reaches node
Ú
. Consequently,
the diameter of pseudo-balanced de Bruijn graph is still
Ç
´ÐÓ
Òµ
.
In this paper, we propose a scalable scatternet structure based on
pseudo-balanced de Bruijn graph
´¾
µ
.
23
root
0000 0001 0010 0011
001
000
011
010
100 101 110 111
10
11
01
00
1
0
Figure 2: The correspondence between full binary tree and
pseudo-balanced de Bruijn graph.
In a pseudo-balanced de Bruijn graph
´¾
Ñµ
, two nodes are
called critical pair if they only differ in the least significant bit of
their labels. Let
Ù
¼
Ù
½
¡
¡
¡
Ù
Ô
be the sequence of nodes visited
by a traversal of all leaf nodes in the corresponding binary tree of
´¾
Ñµ
. A node
Ù
is called the successor of another node
Ù
½
and
Ù
½
is called the predecessor of another node
Ù
. Here

½
takes value

½
ÑÓ
Ô
·
½
. For example, in Figure 2, nodes
¼¼½¼
and
¼¼½½
is a critical pair; node
¼½¼
is the successor of the
node
¼¼½½
.
2.2
MAC Address Assignment for Piconet
Our method will construct a balanced (or pseudo-balanced) de
Bruijn graph
´¾
Ñµ
as the backbone of the network. Here the
choosing of the integer
Ñ
is discussed later. We will ignore the
direction of the edges in the de Bruijn graph
´¾
Ñµ
. Thus, every
node will have at most
(or
for pseudo-balanced de Bruijn graph
´¾
Ñµ
) edges incident.
Every node in the backbone of dBBlue scatternet will be assigned
a master role. We will add a bridge slave node for every
pair of master nodes that are connected in the backbone. Thus, every
master node will have at most six bridge slave nodes so far. We
then add some free slave nodes to each master node, and call them
pure slave nodes.
Before we discuss in detail our scatternet construction methods,
we present our novel rule of assigning the MAC address in a piconet
. In our dBBlue scatternet, when we route a packet to a
destination node
Ú
, we only know the piconet ID of node
Ú
, say
Ý
½
Ý
¾
¡
¡
¡
Ý
, which is same as the label of its master node, and the
MAC address, say
Þ
½
Þ
¾
Þ
¿
, of this node in that piconet. The detail
routing mechanism will be discussed in Section 4. When some
node joins or leaves the scatternet, we often have to reorganize
some piconets and thus re-assign the MACs of some nodes. Our
method of assigning MAC addresses in a piconet and reorganizing
the piconets guarantees that the new piconet (even the new MAC
address) can be found by a simple appending or deleting the least
significant bit, which keeps the label prefix of updating nodes un-changed
so that even the delivery of the packets on the way to those
updating nodes will not be interrupted.
In a piconet, MAC
¼¼¼
is always reserved by the master node.
For simplicity, we omit the MAC address of a master node hereafter
while representing its label, i.e., the master node with label
Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
actually has a label
´Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
¼¼¼µ
if
consistent labels with slave nodes are needed. Remember that, in a
pseudo-balanced de Bruijn graph, any node has
¾
in-neighbors (except
¼
Ñ
and
½
Ñ
) and at most
out-neighbors, so MAC addresses
¼½½
and
½½½
are always reserved for the two bridge slaves to in-neighbors
, MAC
¼½¼
,
½¼½
,
¼¼½
and
½½¼
are reserved for bridge
slaves to out-neighbors if they exist, and
½¼¼
is reserved for the
th slave (it must be a pure slave) if it exists. Figure 3 illustrates
all four possibilities for the piconet MAC address assignment according
to the number of out-neighbors in scatternet backbone.
In the figure, for simplicity, we use
Ý
½
Ý
¾
¡
¡
¡
Ý
Ñ ½
Ý
Ñ
´Ý
µ
to denote
a node with label
Ý
½
Ý
¾
¡
¡
¡
Ý
Ñ ½
Ý
Ñ
or
Ý
½
Ý
¾
¡
¡
¡
Ý
Ñ ½
Ý
Ñ
Ý
,
whichever exists in the network. Notice that a master node in
the constructed scatternet based on a pseudo-balanced de Bruijn
graph
´¾
Ñµ
always has two incoming neighbors. For example,
a master node
Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ
in level
Ñ
can have incoming neighbor
¼Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
or
¼Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ
, but not both since the de
Bruijn graph is built upon a universal prefix set; similarly another
incoming neighbor is
½Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
´Ü
Ñ
µ
. Analogously, a master
node
Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ
Ü
Ñ·½
in level
Ñ
·
½
has incoming neighbors
¼Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
´Ü
Ñ
µ
and
½Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
´Ü
Ñ
µ
. On the other
hand, the number of out-neighbors of a node in the pseudo-balanced
de Bruijn graph
´¾
Ñµ
could be
½
¾
¿
. Only the node at level
Ñ
could have
¿
or
out-neighbors and only the node at level
Ñ
·
½
could have
½
out-neighbor (except nodes
¼
Ñ
and
½
Ñ
if they exist).
... x
m-1
1 x
1
0
... x
m-1
x
1
m
(x  )
m
(x  )
001
010
100
101
110
011
111
... x
m+1
... x
x
m+1
2
x
1
x
2
(a) One out-neighbor
m
m
(x  )
(x  )
1
...
x
1
x
2
x
m
...
...
x
1
x
m-1
...
x
1
x
m-1
001
010
100
101
110
011
111
1
x
0
2
x
m
0
...
x
2
x
m
(b) Two out-neighbors
(x  )
m
m
(x  )
x
m
...
...
x
1
x
m-1
...
x
1
x
m-1
x
2
x
m
0 0
...
x
2
x
m
0
...
1
001
010
100
101
110
011
111
1
x
0
2
x
m
1
...
x
1
x
2
(c) Three out-neighbors
m
(x  )
(x  )
m
x
m-1
...
x
1
x
m-1
x
2
x
m
0 0
...
x
2
x
m
0
...
1
x
2
x
m
...
1 0
x
2
x
m
...
1
1
001
010
100
101
110
011
111
1
x
0
1
x
2
x
m
...
...
x
1
(d) Four out-neighbors
Figure 3: MAC address assignment for a piconet.
24
Table 1 summarizes the rule of assigning the MAC address to the
bridge slave nodes in a piconet. Their MAC addresses can be decided
uniquely according to the label bit difference between current
piconet and neighbor piconet IDs. For example, if the master
Ù
is
labeled
Ü
½
Ü
¾
¡
¡
¡
Ü
×
and its out-neighbor
Ú
is labeled
Ü
¾
¡
¡
¡
Ü
×
Ý
½
Ý
¾
,
then the MAC addresses of their bridge slave is
Ý
½
Ý
¾
Ý
¾
assigned by
Ù
, and
Ü
½
½½
assigned by
Ú
. Remember that every bridge slave has
one MAC address in each of the two piconets it resides.
Table 1: The rule to assign MAC address to bridge slave nodes.
In-Neighbor
Out-Neighbor
Node
Ý
Ü
½
¡
¡
¡
Ü
Ö
Ü
¾
¡
¡
¡
Ü
×
Ü
¾
¡
¡
¡
Ü
×
Ý
½
Ü
¾
¡
¡
¡
Ü
×
Ý
½
Ý
¾
Ü
½
¡
¡
¡
Ü
×
Ý
½½
¼½¼
Ý
½
Ý
½
Ý
½
Ý
½
Ý
¾
Ý
¾
Notice that, in bluetooth scatternet, the bridge slave nodes have
two independent piconet IDs and MAC addresses in two piconets
respectively. However, since the routing mechanism in de Bruijn
is directional, only their piconet ID and MAC address assigned by
their in-master is public and meaningful for routing, saying label
in the remaining paper, and the other one is only used for inter-communication
in a piconet. Figure 4 illustrates one piconet in
the scatternet. Here nodes
Ù
,
Á
½
,
Á
¾
,
Ç
½
and
Ç
¾
assume master
role and form the backbone for scatternet. These master nodes are
connected in the de Bruijn graph by bridge slaves
Ú
¿
,
Ú
,
Ú
¾
and
Ú
respectively. Assume that node
Ù
has label
Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
.
Nodes
Á
½
,
Á
¾
denote the two incoming neighbors of node
Ù
, which
has label
¼Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
and
½Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
respectively. Nodes
Ç
½
,
Ç
¾
denote the two outgoing neighbors of node
Ù
, which has label
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
¼
and
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
½
respectively. Nodes
Ú
½
,
Ú
, and
Ú
are the pure slave nodes of
Ù
in the scatternet. The label
of node
Ú
(
¾
½
¾
) is
´Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
µ
where is
the MAC address of node
Ú
in this piconet, and
Ú
¿
and
Ú
has public
label
´¼Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
Ü
Ñ
Ü
Ñ
µ
and
´½Ü
½
Ü
¾
¡
¡
¡
Ü
Ñ ½
Ü
Ñ
Ü
Ñ
Ü
Ñ
µ
,
respectively, which is consistent with the prefix of
Á
½
and
Á
¾
respectively
. Notice that the MACs of
Ú
¿
and
Ú
in the piconet mastered
by node
Ù
are
¿
and
respectively, which are used only by nodes
in this piconet and not broadcasted to the network.
2
v
5
v
1
v
6
v
4
v
3
v
7
u
I
1
I
2
2
O
O
v
1
Figure 4: An example of a static piconet (with nodes inside the
shaded region) formed by our method. Here a master node is
denoted by a square, a pure slave is denoted by a circle, and a
bridge slave is denoted by a triangle.
As will see later, our labeling rule makes the updating of the
scatternet topology and nodes' labels much easier when new nodes
join the network or some existing nodes leave the network. For incremental
updating of the scatternet, there are two scenarios when
a new node joins the network. The first case is that there is a master
node who has free slot for a pure slave. We then directly assign
the newly joined node as the pure slave of that master node. The
second case is that no master node has free slot for a pure slave. We
then have to split some piconet and in turn create some free slots
for pure slaves. The splitting of a piconet is performed such that
the resulting backbone (formed by master nodes and bridge slaves)
is still a pseudo-balanced de Bruijn graph. When a piconet is aplit-ted
, the labels of some nodes have to be updated. While updating
the topology, it is possible that some packets are already on their
way to the destinations (via or toward this splitting piconet). Our
labeling rule makes sure that the packets can still be routed without
any interruption, only the local nodes are assigned new labels, and
the re-labeling are also conducted locally.
2.3
Static Scatternet Construction
Given
Ò
nodes currently distributed in the network, the section
gives an efficient algorithm to construct our de Bruijn based scatternet
dBBlue, which has low diameter and bounded node degree
property. In other words, we first study the construction of the scatternet
for a static
Ò
-nodes network, which will serve the base for
our dynamic construction.
Our method will construct a balanced de Bruijn graph
´¾
Ñµ
as the initial backbone of the network. We will choose integer
Ñ
such that
¾
Ñ ½
Ò
¾
Ñ
. The choosing of
Ñ
guarantees that
there are enough bridge slave nodes, which implies that no master
node serves as bridge slave.
Our method does not consider the detail of the neighbor discovering
process. We assume that every node already knows the existence
of the other nodes.
A
LGORITHM
1.
Static DeBruijn-Based Scatternet
1. Assume that there is a leader already among these
Ò
nodes
Ë
. The leader could be the node with smallest ID. We give
the token to the leader and call it token node. Token node
randomly selects
¾
Ñ
nodes (including itself) into the master
set
Å
which assumes the master role in final scatternet
topology, where
¾
Ñ ½
Ò
¾
Ñ
and
Ò
is the number of
nodes in
Ë
. Let
Ö
¼
Ò

¿
¡
¾
Ñ
, which is the total number
of nodes that can be assigned as pure slaves.
2. Token node assigns itself with label
¼
Ñ
, and each node in
Å
with a unique
Ñ
bits label in the range from
¼
¡
¡
¡
¼½
to
½
¡
¡
¡
½½
. The set of nodes
Å
forms a de Bruijn graph
´¾
Ñµ
as the scatternet backbone.
3. Token node, with label
Ü
½
¡
¡
¡
Ü
Ñ
, selects
¾
nodes
1
from
the remaining as its bridge slaves, and assigns them labels
´Ü
½
¡
¡
¡
Ü
Ñ
¼½¼µ
and
´Ü
½
¡
¡
¡
Ü
Ñ
½¼½µ
respectively. Here
¼½¼
,
½¼½
will also serve as the Medium Access Code (MAC) for
these two slaves in the piconet mastered by this token node.
Token node uses its bridge slave node
´Ü
½
¡
¡
¡
Ü
Ñ
¼½¼µ
to
connect with its out-neighbor
Ü
¾
Ü
¿
¡
¡
¡
Ü
Ñ
¼
and the bridge
slave node
´Ü
½
¡
¡
¡
Ü
Ñ
½¼½µ
to connect the out-neighbor node
Ü
¾
Ü
¿
¡
¡
¡
Ü
Ñ
½
.
4. Assume that the current token node has label with value .
The token node selects
Ø
Ñ
Ò
¿
Ö
½
nodes
2
from the
remaining as its slaves and assigns them with labels
´Ü
½
¡
¡
¡
Ü
Ñ
¼¼½µ
,
1
There are two special nodes
¼
Ñ
and
½
Ñ
, which only have 1 out-neighbor
, we then just use one bridge slave node to connect with its
out-neighbor.
2
Node
¼
Ñ
and
½
Ñ
may choose
nodes as its pure slaves since they
only have one in-neighbor and one out-neighbor.
25
´Ü
½
¡
¡
¡
Ü
Ñ
½¼¼µ
and
´Ü
½
¡
¡
¡
Ü
Ñ
½½¼µ
in the order if they exist
. Let
Ö
Ö
½

Ø
.
Then the token is passed to its successor.
5. Repeat the above steps (3) and (4) until all nodes in
Å
are
processed. After all nodes have been processed, the current
token node passes the token back to node
¼
Ñ
again.
Once the initial topology construction is finished, the token node
Ø
will be responsible for the following node joining and leaving
issues. Master nodes form the backbone of bluetooth scatternet,
and a piconet works like a node in de Bruijn graph.
111
001
011
010
100
110
000
101
Figure 5: dBBlue Bluetooth Scatternet.
Figure 5 illustrates a dBBlue scatternet containing
nodes based
on
´¾
¿µ
graph.
T
HEOREM
1. In dBBlue scatternet, each master has no more
than
slaves and each slave assumes as bridge for at most
¾
piconets
. And the number of piconets is at most
Ò
¿
and at least
Ò
.
Moreover, the computation cost is
Ç
´Òµ
for static construction.
P
ROOF
. From the topology construction, each master carries at
most
same prefix slaves, and at most
¾
different prefix slaves from
its in-neighbors since each node in
´¾
Ñµ
graph has at most
¾
in-neighbors
, so each master has no more than
slaves. And, each
slave exists as a free slave or as the bridge between its same prefix
master
Ù
and one of
Ù
's out-neighbors, so the degree of a slave node
is at most 2.
Let
Ò

, where
¾
¼
and
¾
Ñ
is the number of
masters. Then
¾
Ñ ½
Ò
¾
Ñ
implies
¾
Ñ ½
·
½
¾
Ñ
.
Thus,
Ò

´¾
Ñ ½
·
½µ

and
Ò

¥
¾
Ñ

.
Consequently,
¿
¡
¾
Ñ
·
´

µ
Ò
¡
¾
Ñ

, which implies
Ò
¾
Ñ
Ò
¿
.
It is obvious that the total computation cost of constructing static
dBBlue scatternet is
Ç
´Òµ
.
In this paper we always assume a bluetooth piconet consists of at
most
slaves and
½
master. If future bluetooth technology allows
a master to bring more slaves, say
Ô
, our scatternet construction
method can adapt easily as follows. The scatternet backbone will be
still based on
´¾
Ñµ
de Bruijn graph. However,
Ñ
is chosen such
that
¾
Ñ ½
Ò
Ô ½
¾
Ñ
. In other words, every master node will
carry
Ô

pure slaves and
bridge slaves to connect to its two out-neighbors
and two in-neighbors in the de Bruijn graph
´¾
Ñµ
.
It is not difficult to show that using de Bruijn graph
´¾
Ñµ
will
create a scatternet with less piconets than using
´
Ñ
¼
µ
for
¾
since each master node will carry less pure slaves in the later case.
On the other hand, the scatternet based on
´
Ñ
¼
µ
for
¾
does
provide a better fault tolerance since the degree of each master node
is increased to
¾
.
DYNAMIC SCATTERNET UPDATING
In this section we describe a vigorous method to locally update
the scatternet topology dynamically when node joins or leaves the
network. Considering each piconet as an abstract node in the de
Bruijn graph, our goal is to maintain a scalable pseudo-balanced de
Bruijn graph.
3.1
Token Based Updating
First consider the case when a node wants to join the network.
We have to assign a role for this newly joined node. There are several
possible scenarios about the existing scatternet. (1) the existing
scatternet has a master node that has free slave slots, then we can
simply assign this newly joined node as the pure slave of this master
node. (2) all master nodes in the existing scatternet already have
slaves, we then have to expand the backbone of the scatternet to
incorporate this newly joined node. In other words, we have to split
some piconet to two such that the two new piconets will have some
free pure slave slots to hold this newly joined node.
Several methods can be used to implement the above scheme. To
make the updating efficient, we should be able to quickly find the
master node with empty slot for pure slave if there is any. One approach
is to keep the current scatternet compact and assign a special
node the token in a way such that all master nodes with label less
than the token node do not have empty slot, and all master nodes
with label larger than the token node do have empty slot. When
a new node joins the network, we can simply assign it the empty
pure slave slot and then update the token node if necessary. This approach
is efficient for node joining but suffers more cost for node
leaving. When a node leaves the network, we have to update the
scatternet to keep the scatternet compact. Thus, we possibly have
to move some nodes to fill the slot emptied by this left node.
The other approach is not to compact the scatternet. When a
node leaves, we do nothing if the backbone of the scatternet is untouched
. However, this approach suffers a large cost when node
joins the network since we have to find where to put the newly
joined node. One method is to use the broadcast method to travel
the whole scatternet to find the master node with free pure slave
slot. This may perform better if only a few of the existing piconets
have free slots. The other method is to randomly select a master
node and check if it has free slot. If it does not, we then select
another random master node until one such master node is found.
This approach performs better if the majority of the piconets have
free slots. We omit the detail of performance analysis here, which
will be presented in the full version of the paper.
In this paper, we will adopt the compact approach. Before we
present the detail of our methods of updating the scatternet, we first
study the possible status of the scatternet, which will be recorded
in the token node.
When a new node requests joining the network, there are three
possible scenarios to be discussed.
1. Current backbone is a balanced de Bruijn graph. Figure 6
illustrates an example. The token is held by the master node
with the smallest label among all master nodes that have less
than
same-prefix slaves. In this status, the master node with
the token has some free slot for newly joined node and so do
all master nodes with larger labels.
2. Current backbone is pseudo-balanced de Bruijn graph
´¾
Ñµ
under expanding status, i.e., many nodes join the scatternet.
Figure 7 illustrates an example. The token is held by the
first master node with less than
same-prefix slaves in level
Ñ
·
½
if it exists, otherwise the first master node in level
Ñ
holds the token. In this status, all master nodes in level
Ñ
26
token
i-1
i
i+1
Figure 6: Token in balanced de Bruijn graph.
and
Ñ
·
½
do not have free slots except the last two master
nodes in level
Ñ
·
½
. In other words, at most two master
nodes have free slots.
level m
token
i
i-1
i+1
level m+1
Figure 7: Token in pseudo-balanced de Bruijn graph under expanding
status.
3. Current backbone is a pseudo-balanced de Bruijn graph
´¾
Ñµ
under shrinking status, i.e., many nodes leave the scatternet.
Figure 8 illustrates an example. The token is held by the
master node in level
Ñ
with the smallest label. In this status,
each master node in level
Ñ
·
½
and level
Ñ
has
and
¾
same-prefix slave nodes respectively.
level m+1
i+1
i-1
i
token
level  m
Figure 8: Token in pseudo-balanced de Bruijn graph under
shrinking status.
Those statuses balanced, expanding, shrinking will be recorded
in the token data structure.
3.2
Node Joining
When a new node joins the network, there are three cases.
1. Token status is balanced, that is to say, current backbone is a
balanced de Bruijn graph. See Figure 6 for an illustration.
(a) The token node
Ü
½
Ü
Ñ
has less than
slaves. Then
it simply adds the joining node into its slave set and
assigns it a label
´Ü
½
¡
¡
¡
Ü
Ñ
Ý
½
Ý
¾
Ý
¿
µ
, where
Ý
½
Ý
¾
Ý
¿
is
one of the un-assigned MAC address in
¼¼½
½¼¼
½½¼
.
If the token node now has
slaves, then it passes the token
to its successor.
(b) The token node is fully occupied by slaves. This could
happen only when all master nodes in the scatternet
have
slaves. Then the tok