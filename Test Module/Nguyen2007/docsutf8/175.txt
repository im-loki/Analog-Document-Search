Secure Hierarchical In-Network Aggregation in Sensor Networks
ABSTRACT
In-network aggregation is an essential primitive for performing
queries on sensor network data. However, most aggregation algorithms
assume that all intermediate nodes are trusted. In contrast,
the standard threat model in sensor network security assumes that
an attacker may control a fraction of the nodes, which may misbehave
in an arbitrary (Byzantine) manner.
We present the first algorithm for provably secure hierarchical
in-network data aggregation. Our algorithm is guaranteed to detect
any manipulation of the aggregate by the adversary beyond what is
achievable through direct injection of data values at compromised
nodes. In other words, the adversary can never gain any advantage
from misrepresenting intermediate aggregation computations.
Our algorithm incurs only O
(log
2
n
) node congestion, supports
arbitrary tree-based aggregator topologies and retains its resistance
against aggregation manipulation in the presence of arbitrary numbers
of malicious nodes. The main algorithm is based on performing
the
SUM
aggregation securely by first forcing the adversary to
commit to its choice of intermediate aggregation results, and then
having the sensor nodes independently verify that their contributions
to the aggregate are correctly incorporated. We show how to
reduce secure
MEDIAN
,
COUNT
, and
AVERAGE
to this primitive.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General--Security
and Protection
General Terms
Security, Algorithms

This research was supported in part by CyLab at Carnegie Mellon
under grant DAAD19-02-1-0389 from the Army Research Office,
and grant CNS-0347807 from the National Science Foundation,
and by a gift from Bosch. The views and conclusions contained
here are those of the authors and should not be interpreted as necessarily
representing the official policies or endorsements, either
express or implied, of ARO, Bosch, Carnegie Mellon University,
NSF, or the U.S. Government or any of its agencies.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS'06, October 30Â­November 3, 2006, Alexandria, Virginia, USA.
Copyright 2006 ACM 1-59593-518-5/06/0010 ...
$
5.00.
INTRODUCTION
Wireless sensor networks are increasingly deployed in security-critical
applications such as factory monitoring, environmental monitoring
, burglar alarms and fire alarms. The sensor nodes for these
applications are typically deployed in unsecured locations and are
not made tamper-proof due to cost considerations. Hence, an adversary
could undetectably take control of one or more sensor nodes
and launch active attacks to subvert correct network operations.
Such environments pose a particularly challenging set of constraints
for the protocol designer: sensor network protocols must be highly
energy efficient while being able to function securely in the presence
of possible malicious nodes within the network.
In this paper we focus on the particular problem of securely and
efficiently performing aggregate queries (such as
MEDIAN
,
SUM
and
AVERAGE
) on sensor networks. In-network data aggregation is
an efficient primitive for reducing the total message complexity of
aggregate sensor queries. For example, in-network aggregation of
the
SUM
function is performed by having each intermediate node
forward a single message containing the sum of the sensor readings
of all the nodes downstream from it, rather than forwarding each
downstream message one-by-one to the base station. The energy
savings of performing in-network aggregation have been shown to
be significant and are crucial for energy-constrained sensor networks
[9, 11, 20].
Unfortunately, most in-network aggregation schemes assume that
all sensor nodes are trusted [12, 20]. An adversary controlling just
a few aggregator nodes could potentially cause the sensor network
to return arbitrary results, thus completely subverting the function
of the network to the adversary's own purposes.
Despite the importance of the problem and a significant amount
of work on the area, the known approaches to secure aggregation
either require strong assumptions about network topology or adversary
capabilities, or are only able to provide limited probabilistic
security properties. For example, Hu and Evans [8] propose
a secure aggregation scheme under the assumption that at most a
single node is malicious. Przydatek et al. [17] propose Secure Information
Aggregation (SIA), which provides a statistical security
property under the assumption of a single-aggregator model. In the
single-aggregator model, sensor nodes send their data to a single
aggregator node, which computes the aggregate and sends it to the
base station. This form of aggregation reduces communications
only on the link between the aggregator and the base station, and is
not scalable to large multihop sensor deployments. Most of the algorithms
in SIA (in particular,
MEDIAN
,
SUM
and
AVERAGE
) cannot
be directly adapted to a hierarchical aggregation model since
278
they involve sorting all of the input values; the final aggregator in
the hierarchy thus needs to access all the data values of the sensor
nodes.
In this paper, we present the first provably secure sensor network
data aggregation protocol for general networks and multiple adver-sarial
nodes. The algorithm limits the adversary's ability to manipulate
the aggregation result with the tightest bound possible for
general algorithms with no knowledge of the distribution of sensor
data values. Specifically, an adversary can gain no additional
influence over the final result by manipulating the results of the
in-network aggregate computation as opposed to simply reporting
false data readings for the compromised nodes under its control.
Furthermore, unlike prior schemes, our algorithm is designed for
general hierarchical aggregator topologies and multiple malicious
sensor nodes. Our metric for communication cost is congestion,
which is the maximum communication load on any node in the
network. Let n be the number of nodes in the network, and
be
the maximum degree of any node in the aggregation tree. Our algorithm
induces only O
(log
2
n
) node congestion in the aggregation
tree.
RELATED WORK
Researchers have investigated resilient aggregation algorithms to
provide increased likelihood of accurate results in environments
prone to message loss or node failures. This class of algorithms
includes work by Gupta et al. [7], Nath et al. [15], Chen et al. [3]
and Manjhi et al. [14].
A number of aggregation algorithms have been proposed to ensure
secrecy of the data against intermediate aggregators. Such algorithms
have been proposed by Girao et al. [5], Castelluccia et
al. [2], and Cam et al. [1].
Hu and Evans [8] propose securing in-network aggregation against
a single Byzantine adversary by requiring aggregator nodes to forward
their inputs to their parent nodes in the aggregation tree. Jadia
and Mathuria [10] extend the Hu and Evans approach by incorporating
privacy, but also considered only a single malicious node.
Several secure aggregation algorithms have been proposed for
the single-aggregator model. Przydatek et al. [17] proposed Secure
Information Aggregation (SIA) for this topology. Also for the
single-aggregator case, Du et al. [4] propose using multiple witness
nodes as additional aggregators to verify the integrity of the
aggregator's result. Mahimkar and Rappaport [13] also propose
an aggregation-verification scheme for the single-aggregator model
using a threshold signature scheme to ensure that at least t of the
nodes agree with the aggregation result. Yang et al. [19] describe
a probabilistic aggregation algorithm which subdivides an aggregation
tree into subtrees, each of which reports their aggregates
directly to the base station. Outliers among the subtrees are then
probed for inconsistencies.
Wagner [18] addressed the issue of measuring and bounding malicious
nodes' contribution to the final aggregation result. The paper
measures how much damage an attacker can inflict by taking
control of a number of nodes and using them solely to inject erroneous
data values.
PROBLEM MODEL
In general, the goal of secure aggregation is to compute aggregate
functions (such as
SUM
,
COUNT
or
AVERAGE
) of the sensed
data values residing on sensor nodes, while assuming that a portion
of the sensor nodes are controlled by an adversary which is
attempting to skew the final result. In this section, we present the
formal parameters of the problem.
3.1
Network Assumptions
We assume a general multihop network with a set S
= {s
1
,...,s
n
}
of n sensor nodes and a single (untrusted) base station R, which is
able to communicate with the querier which resides outside of the
network. The querier knows the total number of sensor nodes n,
and that all n nodes are alive and reachable.
We assume the aggregation is performed over an aggregation
tree which is the directed tree formed by the union of all the paths
from the sensor nodes to the base station (one such tree is shown
in Figure 1(a)). These paths may be arbitrarily chosen and are not
necessarily shortest paths. The optimisation of the aggregation tree
structure is out of the scope of this paper--our algorithm takes the
structure of the aggregation tree as given. One method for constructing
an aggregation tree is described in TaG [11].
3.2
Security Infrastructure
We assume that each sensor node has a unique identifier s and
shares a unique secret symmetric key K
s
with the querier. We further
assume the existence of a broadcast authentication primitive
where any node can authenticate a message from the querier. This
broadcast authentication could, for example, be performed using
ÂµTESLA [16]. We assume the sensor nodes have the ability to perform
symmetric-key encryption and decryption as well as computations
of a collision-resistant cryptographic hash function H.
3.3
Attacker Model
We assume that the attacker is in complete control of an arbitrary
number of sensor nodes, including knowledge of all their secret
keys. The attacker has a network-wide presence and can record and
inject messages at will. The sole goal of the attacker is to launch
what Przydatek et al. [17] call a stealthy attack, i.e., to cause the
querier to accept a false aggregate that is higher or lower than the
true aggregate value.
We do not consider denial-of-service (DoS) attacks where the
goal of the adversary is to prevent the querier from getting any
aggregation result at all. While such attacks can disrupt the normal
operation of the sensor network, they are not as potentially
hazardous in security-critical applications as the ability to cause
the operator of the network to accept arbitrary data. Furthermore,
any maliciously induced extended loss of service is a detectable
anomaly which will (eventually) expose the adversary's presence
if subsequent protocols or manual intervention do not succeed in
resolving the problem.
3.4
Problem Definition and Metrics
Each sensor node s
i
has a data value a
i
. We assume that the
data value is a non-negative bounded real value a
i
[0,r] for some
maximum allowed data value r. The objective of the aggregation
process is to compute some function f over all the data values,
i.e., f
(a
1
,...,a
n
). Note that for the
SUM
aggregate, the case where
data values are in a range
[r
1
,r
2
] (where r
1
,r
2
can be negative)
is reducible to this case by setting r
= r
2
- r
1
and add nr
1
to the
aggregation result.
Definition 1 A direct data injection attack occurs when an attacker
modifies the data readings reported by the nodes under its direct
control, under the constraint that only legal readings in
[0,r] are
reported.
Wagner [18] performed a quantitative study measuring the effect
of direct data injection on various aggregates, and concludes
that the aggregates addressed in this paper (truncated
SUM
and
AV
ERAGE
,
COUNT
and
QUANTILE
) can be resilient under such attacks
.
279
Without domain knowledge about what constitutes an anomalous
sensor reading, it is impossible to detect a direct data injection
attack, since they are indistinguishable from legitimate sensor readings
[17, 19]. Hence, if a secure aggregation scheme does not make
assumptions on the distribution of data values, it cannot limit the
adversary's capability to perform direct data injection. We can thus
define an optimal level of aggregation security as follows.
Definition 2 An aggregation algorithm is optimally secure if, by
tampering with the aggregation process, an adversary is unable to
induce the querier to accept any aggregation result which is not
already achievable by direct data injection.
As a metric for communication overhead, we consider node congestion
, which is the worst case communication load on any single
sensor node during the algorithm. Congestion is a commonly
used metric in ad-hoc networks since it measures how quickly the
heaviest-loaded nodes will exhaust their batteries [6, 12]. Since the
heaviest-loaded nodes are typically the nodes which are most essential
to the connectivity of the network (e.g., the nodes closest to
the base station), their failure may cause the network to partition
even though other sensor nodes in the network may still have high
battery levels. A lower communication load on the heaviest-loaded
nodes is thus desirable even if the trade-off is a larger amount of
communication in the network as a whole.
For a lower bound on congestion, consider an unsecured aggregation
protocol where each node sends just a single message to
its parent in the aggregation tree. This is the minimum number
of messages that ensures that each sensor node contributes to the
aggregation result. There is
(1) congestion on each edge on the
aggregation tree, thus resulting in
(d) congestion on the node(s)
with highest degree d in the aggregation tree. The parameter d is
dependent on the shape of the given aggregation tree and can be as
large as
(n) for a single-aggregator topology or as small as (1)
for a balanced aggregation tree. Since we are taking the aggregation
tree topology as an input, we have no control over d. Hence,
it is often more informative to consider per-edge congestion, which
can be independent of the structure of the aggregation tree.
Consider the simplest solution where we omit aggregation altogether
and simply send all data values (encrypted and authenticated
) directly to the base station, which then forwards it to the
querier. This provides perfect data integrity, but induces O
(n) congestion
at the nodes and edges nearest the base station. For an algorithm
to be practical, it must cause only sublinear edge congestion.
Our goal is to design an optimally secure aggregation algorithm
with only sublinear edge congestion.
THE SUM ALGORITHM
In this section we describe our algorithm for the
SUM
aggregate,
where the aggregation function f is addition. Specifically, we wish
to compute a
1
+ Â·Â·Â· + a
n
, where a
i
is the data value at node i. We
defer analysis of the algorithm properties to Section 5, and discuss
the application of the algorithm to other aggregates such as
COUNT
,
AVERAGE
and
MEDIAN
in Section 6.
We build on the aggregate-commit-prove framework described
by Przydatek et al. [17] but extend their single aggregator model
to a fully distributed setting. Our algorithm involves computing a
cryptographic commitment structure (similar to a hash tree) over
the data values of the sensor nodes as well as the aggregation process
. This forces the adversary to choose a fixed aggregation topology
and set of aggregation results. The individual sensor nodes
then independently audit the commitment structure to verify that
their respective contributions have been added to the aggregate. If
the adversary attempts to discard or reduce the contribution of a
legitimate sensor node, this necessarily induces an inconsistency
in the commitment structure which can be detected by the affected
node. This basic approach provides us with a lower bound for the
SUM
aggregate. To provide an upper-bound for
SUM
, we can re-use
the same lower-bounding approach, but on a complementary
aggregate called the
COMPLEMENT
aggregate. Where
SUM
is defined
as
a
i
,
COMPLEMENT
is defined as
(r - a
i
) where r is the
upper bound on allowable data values. When the final aggregates
are computed, the querier enforces the constraint that
SUM
+
COM
PLEMENT
= nr. Hence any adversary that wishes to increase
SUM
must also decrease
COMPLEMENT
, and vice-versa, otherwise the
discrepancy will be detected. Hence, by enforcing a lower-bound
on
COMPLEMENT
, we are also enforcing an upper-bound on
SUM
.
The overall algorithm has three main phases: query dissemination
, aggregation-commit, and result-checking.
Query dissemination. The base station broadcasts the query to
the network. An aggregation tree, or a directed spanning tree over
the network topology with the base station at the root, is formed as
the query is sent to all the nodes, if one is not already present in the
network.
Aggregation commit. In this phase, the sensor nodes iteratively
construct a commitment structure resembling a hash tree. First, the
leaf nodes in the aggregation tree send their data values to their parents
in the aggregation tree. Each internal sensor node in the aggregation
tree performs an aggregation operation whenever it has
heard from all its child sensor nodes. Whenever a sensor node s
performs an aggregation operation, s creates a commitment to the
set of inputs used to compute the aggregate by computing a hash
over all the inputs (including the commitments that were computed
by the children of s). Both the aggregation result and the commitment
are then passed on to the parent of s. After the final commitment
values are reported to the base station (and thus also to the
querier), the adversary cannot subsequently claim a different aggregation
structure or result. We describe an optimisation to ensure
that the constructed commitment trees are perfectly balanced, thus
requiring low congestion overhead in the next phase.
Result-checking. The result-checking phase is a novel distributed
verification process. In prior work, algorithms have relied on the
querier to issue probes into the commitment structure to verify its
integrity [17, 19]. This induces congestion nearest the base station,
and moreover, such algorithms yield at best probabilistic security
properties. We show that if the verification step is instead fully distributed
, it is possible to achieve provably optimal security while
maintaining sublinear edge congestion.
The result-checking phase proceeds as follows. Once the querier
has received the final commitment values, it disseminates them to
the rest of the network in an authenticated broadcast. At the same
time, sensor nodes disseminate information that will allow their
peers to verify that their respective data values have been incorporated
into the aggregate. Each sensor node is responsible for
checking that its own contribution was added into the aggregate.
If a sensor node determines that its data value was indeed added
towards the final sum, it sends an authentication code up the aggregation
tree towards to the base station. Authentication codes are aggregated
along the way with the XOR function for communication
efficiency. When the querier has received the XOR of all the authentication
codes, it can then verify that all the sensor nodes have
confirmed that the aggregation structure is consistent with their data
values. If so, then it accepts the aggregation result.
We now describe the details of each of the three phases in turn.
280
(a) Example network graph.
Arrows:
Aggregation
tree.
R: Base station. Q: Querier.
G
0
= 1,a
G
,r - a
G
,G
F
1
= 2,v
F
1
,v
F
1
,H[N||2||v
F
1
||v
F
1
||F
0
||G
0
]
C
1
= 4,v
C
1
,v
C
1
,H[N||4||v
C
1
||v
C
1
||C
0
||E
0
||F
1
]
A
1
= 9,v
A
1
,v
A
1
,H[N||9||v
A
1
||v
A
1
||A
0
||B
1
||C
1
||D
0
]
R
= 12,v
R
,v
R
,H[N||12||v
R
||v
R
||H
0
||A
1
||I
0
]
(b) Naive commitment tree, showing derivations of some of the vertices. For each sensor
node X , X
0
is its leaf vertex, while X
1
is the internal vertex representing the aggregate
computation at X (if any). On the right we list the labels of the vertices on the path of
node G to the root.
Figure 1: Aggregation and naive commitment tree in network context
4.1
Query Dissemination
First, an aggregation tree is established if one is not already
present. Various algorithms for selecting the structure of an aggregation
tree may be used. For completeness, we describe one
such process, while noting that our algorithm is directly applicable
to any aggregation tree structure. The Tiny Aggregation Service
(TaG) [11] uses a broadcast from the base station where each node
chooses as its parent in the aggregation tree, the node from which
it first heard the tree-formation message.
To initiate a query in the aggregation tree, the base station originates
a query request message which is distributed following the
aggregation tree. The query request message contains an attached
nonce N to prevent replay of messages belonging to a prior query,
and the entire request message is sent using an authenticated broadcast
.
4.2
Aggregation-Commit Phase
The goal of the aggregation-commit phase is to iteratively construct
a series of cryptographic commitments to data values and to
intermediate in-network aggregation operations. This commitment
is then passed on to the querier. The querier then rebroadcasts the
commitment to the sensor network using an authenticated broadcast
so that the rest of the sensor network is able to verify that their
respective data values have been incorporated into the aggregate.
4.2.1
Aggregation-Commit: Naive Approach
We first describe a naive approach that yields the desired security
properties but has suboptimal congestion overhead when sensor
nodes perform their respective verifications. In the naive approach,
when each sensor node performs an aggregation operation, it computes
a cryptographic hash of all its inputs (including its own data
value). The hash value is then passed on to the parent in the aggregation
tree along with the aggregation result. Figure 1(b) shows a
commitment tree which consists of a series of hashes of data values
and intermediate results, culminating in a set of final commitment
values which is passed on by the base station to the querier along
with the aggregation results. Conceptually, a commitment tree is
a hash tree with some additional aggregate accounting information
attached to the nodes. A definition follows. Recall that N is the
query nonce that is disseminated with each query.
Definition 3 A commitment tree is a tree where each vertex has
an associated label representing the data that is passed on to its
parent. The labels have the following format:
count, value, complement, commitment
Where count is the number of leaf vertices in the subtree rooted
at this vertex; value is the
SUM
aggregate computed over all
the leaves in the subtree; complement is the aggregate over the
COMPLEMENT
of the data values; and commitment is a cryptographic
commitment. The labels are defined inductively as follows:
There is one leaf vertex u
s
for each sensor node s, which we
call the leaf vertex of s. The label of u
s
consists of count=1,
value
=a
s
where a
s
is the data value of s, complement=r
- a
s
where r is the upper bound on allowable data values, and
commitment
is the node's unique ID.
Internal vertices represent aggregation operations, and have labels
that are defined based on their children. Suppose an internal
vertex has child vertices with the following labels: u
1
,u
2
,...,u
q
,
where u
i
= c
i
,v
i
,v
i
,h
i
. Then the vertex has label c
,v,v,h , with
c
= c
i
, v
= v
i
, v
= v
i
and h
= H[N||c||v||v||u
1
||u
2
||Â·Â·Â·||u
q
].
For brevity, in the remainder of the paper we will often omit references
to labels and instead refer directly to the count, value,
complement
or commitment of a vertex.
While there exists a natural mapping between vertices in a commitment
tree and sensor nodes in the aggregation tree, a vertex is
a logical element in a graph while a sensor node is a physical device
. To prevent confusion, we will always refer to the vertices in
the commitment tree; the term nodes always refers to the physical
sensor node device.
Since we assume that our hash function provides collision resistance
, it is computationally infeasible for an adversary to change
any of the contents of the commitment tree once the final commitment
values have reached the root.
With knowledge of the root commitment value, a node s may
verify the aggregation steps between its leaf vertex u
s
and the root
of the commitment tree. To do so, s needs the labels of all its off-path
vertices.
Definition 4 The set of off-path vertices for a vertex u in a tree is
the set of all the siblings of each of the vertices on the path from u
to the root of the tree that u is in (the path is inclusive of u).
281
Figure 2: Off-path vertices for u are highlighted in bold. The
path from u to the root of its tree is shaded grey.
Figure 2 shows a pictorial depiction of the off-path vertices for a
vertex u in a tree. For a more concrete example, the set of off-path
commitment tree vertices for G
0
in Figure 1 is
{F
0
, E
0
, C
0
, B
1
,
A
0
, D
0
, H
0
, I
0
}. To allow sensor node G to verify its contribution
to the aggregate, the sensor network delivers labels of each off-path
vertex to G
0
. Sensor node G then recomputes the sequence of
computations and hashes and verifies that they lead to the correct
root commitment value.
Consider the congestion on the naive scheme. Let h be the height
of the aggregation tree and
be the maximum degree of any node
inside the tree. Each leaf vertex has O
(h) off-path vertices, and it
needs to receive all their labels to verify its contribution to the aggregate
, thus leading to O
(h) congestion at the leaves of the commitment
tree. For an aggregation tree constructed with TaG, the
height h of the aggregation tree depends on the diameter (in number
of hops) of the network, which in turn depends on the node density
and total number of nodes n in the network. In a 2-dimensional
deployment area with a constant node density, the best bound on
the diameter of the network is O
(n) if the network is regularly
shaped. In irregular topologies the diameter of the network may be
(n).
4.2.2
Aggregation-Commit: Improved Approach
We present an optimization to improve the congestion cost. The
main observation is that, since the aggregation trees are a sub-graph
of the network topology, they may be arbitrarily unbalanced.
Hence, if we decouple the structure of the commitment tree from
the structure of the aggregation tree, then the commitment tree
could be perfectly balanced.
In the naive commitment tree, each sensor node always computes
the aggregate sum of all its inputs. This can be considered
a strategy of greedy aggregation. Consider instead the benefit of
delayed aggregation at node C
1
in Figure 1(b). Suppose that C,
instead of greedily computing the aggregate sum over its own reading
(C
0
) and both its child nodes E
0
and F
1
, instead computes the
sum only over C
0
and E
0
, and passes F
1
directly to A along with
C
1
= C
0
+ E
0
. In such a commitment tree, F
1
becomes a child of
A
1
(instead of C
1
), thus reducing the depth of the commitment tree
by 1. Delayed aggregation thus trades off increased communication
during the aggregation phase in return for a more balanced
commitment tree, which results in lower verification overhead in
the result-checking phase. Greenwald and Khanna [6] used a form
of delayed aggregation in their quantile summary algorithm.
Our strategy for delayed aggregation is as follows: we perform
an aggregation operation (along with the associated commit operation
) if and only if it results in a complete, binary commitment
tree.
We now describe our delayed aggregation algorithm for producing
balanced commitment trees. In the naive commitment tree,
each sensor node passes to its parent a single message containing
the label of the root vertex of its commitment subtree T
s
. In
the delayed aggregation algorithm, each sensor node now passes
on the labels of the root vertices of a set of commitment subtrees
F
= {T
1
,...,T
q
}. We call this set a commitment forest, and we
enforce the condition that the trees in the forest must be complete
binary trees, and no two trees have the same height. These constraints
are enforced by continually combining equal-height trees
into complete binary trees of greater height.
Definition 5 A commitment forest is a set of complete binary commitment
trees such that there is at most one commitment tree of any
given height.
A commitment forest has at most n leaf vertices (one for each
sensor node included in the forest, up to a maximum of n). Since
all the trees are complete binary trees, the tallest tree in any commitment
forest has height at most log n. Since there are no two trees
of the same height, any commitment forest has at most log n trees.
In the following discussion, we will for brevity make reference
to "communicating a vertex" to another sensor node, or "communicating
a commitment forest" to another sensor node. The actual
data communicated is the label of the vertex and the labels of the
roots of the trees in the commitment forest, respectively.
The commitment forest is built as follows. Leaf sensor nodes in
the aggregation tree originate a single-vertex commitment forest,
which they then communicate to their parent sensor nodes. Each
internal sensor node s originates a similar single-vertex commitment
forest. In addition, s also receives commitment forests from
each of its children. Sensor node s keeps track of which root vertices
were received from which of its children. It then combines all
the forests to form a new forest as follows.
Suppose s wishes to combine q commitment forests F
1
,...,F
q
.
Note that since all commitment trees are complete binary trees, tree
heights can be determined by inspecting the count field of the
root vertex. We let the intermediate result be F
= F
1
Â·Â·Â·F
q
, and
repeat the following until no two trees are the same height in F:
Let h be the smallest height such that more than one tree in F has
height h. Find two commitment trees T
1
and T
2
of height h in F,
and merge them into a tree of height h
+1 by creating a new vertex
that is the parent of both the roots of T
1
and T
2
according to the
inductive rule in Definition 3. Figure 3 shows an example of the
process for node A based on the topology in Figure 1.
The algorithm terminates in O
(qlogn) steps since each step reduces
the number of trees in the forest by one, and there are at most
q log n
+ 1 trees in the forest. Hence, each sensor node creates at
most q log n
+ 1 = O(logn) vertices in the commitment forest.
When F is a valid commitment forest, s sends the root vertices of
each tree in F to its parent sensor node in the aggregation tree. The
sensor node s also keeps track of every vertex that it created, as well
as all the inputs that it received (i.e., the labels of the root vertices
of the commitment forests that were sent to s by its children). This
takes O
(d logn) memory per sensor node.
Consider the communication costs of the entire process of creating
the final commitment forest. Since there are at most log n commitment
trees in each of the forests presented by any sensor node to
its parent, the per-node communication cost for constructing the final
forest is O
(logn). This is greater than the O(1) congestion cost
of constructing the naive commitment tree. However, no path in the
forest is longer than log n hops. This will eventually enable us to
prove a bound of O
(log
2
n
) edge congestion for the result-checking
phase in Section 5.2.
Once the querier has received the final commitment forest from
the base station, it checks that none of the
SUM
or
COMPLEMENT
aggregates of the roots of the trees in the forest are negative. If
282
A
0
= 1,a
A
,r - a
A
,A
D
0
= 1,a
D
,r - a
D
,D
K
0
= 1,a
K
,r - a
K
,K
C
2
= 4,v
C
2
,v
C
2
,H[N||4||v
C
2
||v
C
2
||F
1
||C
1
]
B
1
= 2,v
B
1
,v
B
1
,H[N||2||v
B
1
||v
B
1
||B
0
||J
0
]
(a) Inputs: A generates A
0
, and receives D
0
from D, C
2
from C, and
(B
1
,K
0
) from B. Each dashed-line box shows the commitment
forest received from a given sensor node. The 