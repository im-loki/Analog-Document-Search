Towards Reasonability Properties for Access-Control Policy Languages
ABSTRACT
The growing importance of access control has led to the definition
of numerous languages for specifying policies. Since
these languages are based on different foundations, language
users and designers would benefit from formal means to compare
them. We present a set of properties that examine the
behavior of policies under enlarged requests, policy growth,
and policy decomposition. They therefore suggest whether
policies written in these languages are easier or harder to reason
about under various circumstances. We then evaluate
multiple policy languages, including XACML and Lithium,
using these properties.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection--Access
Controls
General Terms
Languages, Security

INTRODUCTION
Access-control policies should not be write-only. Because
they govern both the containment and availability of critical
information, they must be highly amenable to analysis by
both humans and by reasoning software such as verifiers.
An access-control policy dictates a function from requests
for access to decisions about whether or not to grant access
. The competing requirements of expressive power and
computational speed makes the design of policy languages a
delicate balancing act. Contemporary policy languages have
Current affiliation:
Computer
Science
Department,
Carnegie Mellon University.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
SACMAT'06, June 7­9, 2006, Lake Tahoe, California, USA.
Copyright 2006 ACM 1-59593-354-9/06/0006 ...
$
5.00.
largely followed one of two routes. Some are based on logics,
restricting first-order logic (e.g., Lithium [9]) or augmenting
Datalog (e.g., Cassandra [2]). Others are custom languages
such as XACML [12] and EPAL [13], which behave roughly
by rule-evaluation and do not depend on theorem-proving
capabilities to determine a response to a query.
The custom language approach often produces fairly limited
languages. For example, to express hierarchical role-based
access-control (RBAC) [14] in XACML requires a
fairly cumbersome encoding [1]. On the other hand, its more
direct request evaluation strategy suggests that policies written
in XACML are more transparent than policies written
in languages based on first-order logic (as we motivate in
Section 2).
How, then, do we distinguish different policy languages?
Studies of complexity and expressive power may ensure tractable
verification and the ability to capture certain policies,
but do not directly classify the ease of reasoning about policies
in a language. In this paper we take a step towards formalizing
reasonability properties that make languages more
amenable to reasoning. We then apply these properties to
actual policy languages.
Such properties are useful even
when verification is computationally tractable because they
provide a guide to where and how to edit a policy for a
desired effect.
Concretely, our properties study three main questions:
how decisions change as requests include more information,
how decisions change as policies grow, and how amenable
policies are to compositional reasoning. The last of these is
especially important for two reasons. First, organizations in-creasingly
have different divisions creating policy fragments
that must be combined into a whole while preserving the intent
of each division; second, to mirror these use cases, and
to scale better as policies grow in size, it becomes important
for analysis and verification tools to function modularly.
These properties codify our observations made while writing
and studying policies for non-trivial systems. (We do
not, however, presume to make broad statements about the
impact of these properties for manual reasoning.) They are
meant to be descriptive rather than prescriptive: which ones
a language should satisfy depends on the context of its use.
We do expect these properties to help both language designers
and policy authors, the former to set goals and the latter
to evaluate languages.
We first motivate the work with an example. Section 3
presents background on policy languages. Section 4 presents
the heart of our formalism. Section 5 applies this framework
to XACML, and Section 6 to logical approaches such as
160
Lithium. The remainder discusses related work and offers
concluding remarks.
MOTIVATING EXAMPLE
Consider the following natural-language policy:
1
1. If the subject is a faculty member, then permit that
subject to assign grades.
2. If the subject is a student, then do not permit that
subject to assign grades.
3. If the subject is not a faculty member, then permit
that subject to enroll in courses.
We might represent this policy as follows:
faculty(
s) = Permit(s, grades, assign)
(
p
1
)
student(
s) = ¬Permit(s, grades, assign)
(
p
2
)
¬faculty(s) = Permit(s, courses, enroll)
(
p
3
)
Let the above formalization be
p and the first line of the
policy be sub-policy
p
1
, the second
p
2
, and the third
p
3
.
Consider the following natural-language request:
A student requests to enroll in courses.
Assume that requests list the subject, resource, and action
by name if possible and by variable if the name is unknown,
along with any other known facts. In this representation,
the request becomes:
(s, courses, enroll) with student(s)
(
q
1
)
Should the policy grant access? At least three interpretations
of the policy are possible:
1.
p grants access due to p
3
. The request does not show
the subject being a faculty member; thus,
p
3
applies
and
p produces the decision to permit access. This
relies on the assumption that since the request does
not show the subject being faculty, that the subject is
in fact not faculty. One could drop this assumption.
2. The policy does not apply to the request. One would
reason that
p
1
and
p
2
do not apply since they are dealing
with assigning grades and not enrolling in courses.
Furthermore, one could conclude that
p
3
does not apply
since the request does not prove that the subject
is not faculty. To do so, the request would have been
(s, courses, enroll) with student(s)  ¬faculty(s)
Since the policy does not apply to the request, the
system should have and enact some default behavior.
3. By reasoning different than that used in the first interpretation
,
p could still grant the request. As in the
second interpretation, one could conclude that the request
alone fails to establish that the subject is not a
faculty member. However, if the subject were a faculty
member, then the first two lines together would
yield a contradiction:
p
1
would imply that the subject
could enroll in courses and
p
2
would imply that the
subject could not. Thus, student-faculty members do
not exist. Since the subject of the request is clearly
a student, he must not be faculty member. Thus,
p
3
applies to grant access.
1
This example is adapted from Halpern and Weissman [9].
In the first two interpretations the user may limit his reasoning
to each sub-policy independent of one another. However
, under the third interpretation (which, in fact, is the
one chosen by Halpern and Weissman), the user must reason
about all three sub-policies at once. Furthermore, under
Interpretation 2, the user must reason about both positive
and negative attributes, unlike under Interpretation 1.
These semantic differences drastically affect a reader's ability
to comprehend policies. For example, Interpretation 3
requires both global analysis and demands rich reasoning
power to deduce the contradiction. This paper formalizes
these differences and their burdens.
BACKGROUND
Despite the differences between access-control policy languages
, we can still identify many common elements. First
we describe features common to most languages, and then
we discuss in detail two areas in which many languages differ
: the available decisions and policy combinators.
3.1
Common Features
A policy language must provide a way of describing the
different forms of access and the environment in which they
could occur. This information forms a request. Many languages
break requests into four different parts:
Subject the person or process making the request,
Resource the object, subsystem, person, or process that
the subject would like to affect (e.g., a file name or a
process id),
Action the command or change that the subject would like
to execute on the resource, and
Environment describes any other relevant information including
the time of day, location, or the previous actions
of the subject.
The first three make up the form of access requested while
the last gives the context in which this access would occur.
Each of these parts lists attributes associated with its respective
topic. In some languages, the absence or negation of an
attribute might also be explicitly listed (see Section 4.2).
Languages must also provide a set of decisions. Such a set
must include some decisions that grant access and some that
prohibit access. A policy will associate with each request a
decision (or in the case of nondeterministic policies, a policy
will relate each request with some number of decisions).
Definition 3.1. An access-control policy language is a
tuple
L = (P, Q, G, N, · ) with
P a set of policies,
Q a family of sets of requests indexed by policies,
G the set of decisions that stipulate that the system should
grant access (granting decisions),
N the set of decisions that stipulate that the system should
not grant access (non-granting decisions),
· a function taking a policy p  P to a relation between
Q
p
and G  N,
where G  N = .
161
When clear from context, the above symbols will be ref-erenced
without explicitly relating them to
L, and D will
represent G  N. The function
· gives the meaning of
policy p, and we write q p d for p  P , q  Q
p
, and d  D,
when p assigns a decision of d to the request q. If for a
language Q
p
= Q
p
for all p and p in P , then we drop the
subscript on Q and treat it as a set of requests common to
all policies. Given
L define the partial order  on D to be
such that d  d if either d, d  N, d, d  G, or d  N and
d  G.
3.2
Decisions
Policy languages must provide decisions to indicate a pol-icy's
intent to grant or not to grant a request. Some languages
might just provide two decisions: permit for granting
access and deny for not granting access. A policy in such a
language associates various subsets of requests with one of
these two decisions. For example,
p
1
explicitly identifies a
subset of permitted requests and
p
2
gives denied requests.
However, a policy might assign some requests to neither
permit nor deny (e.g.,
q
1
under Interpretation 2 of
p). To err
on the side of safety, the policy language should provide for
such requests a default decision that does not imply a grant
of access creating a closed policy [10]. However, assigning
them the decision of deny may limit the ability to compose
policies. For example, while combining the policies of two
departments, one would like to distinguish between those
requests that each department really would like to prohibit
and those about which they do not care [3]. The decision of
not applicable serves this purpose.
With a decision of not applicable sufficing to prevent access
, some languages elect not to include statements associating
requests with deny. This leaves only statements permitting
some set of requests. The uniformity of statements
in such languages might make the policy easier to read and
compose (see Section 3.3). However, allowing for the explicate
denial of requests can quickly rule out exceptional cases
and provides a means to determine when a policy does not
grant access by desire rather than by default.
Some requests might not have a logical interpretation under
a given policy. For example, a request of
(s, grades, assign) with faculty(s)  student(s) (q
2
)
under Interpretation 3 of
p contradicts the policy itself. A
request might even contain illogical values or require undefined
computation (such as division by zero). For generality,
a system might like to assign a decision to such inputs rather
than excluding them from the set of requests and leaving the
policy undefined on them. In such cases, a decision of error
or some refinement of it might be appropriate.
One may view the fact that an error state is reached given
a request to be a weakness in the policy. However, one may
also take it to be a statement about the world in which the
policy is to function: that no such requests may logically
exist.
Error decisions can enforce these preconditions or
assumptions that the policy has made.
3.3
Policy Combinators
The policy of an organization often consists of the composition
of policy fragments, or sub-policies, from a variety of
internal units (e.g., legal, accounting, and execute departments
of a corporation).
Thus, policy languages provide
combinators to create a single policy from these fragments.
Under
p, the request given above (q
2
) is permitted by
p
1
but denied
p
2
. The method used to combine the three sub-policies
of
p into one policy determines how to resolve this
conflict. Some languages, like the hypothetical language in
which
p is written, might have only one policy combinator
that is implicitly applied. Other languages provide multiple
combinators. If a policy has sub-policies nested inside of
sub-policies, the different layers may be resolved differently.
Some of the possible policy combinators are:
Permit Overrides If any of the sub-policies produces a
permit, return only permit. Otherwise, if any produces
a deny, return only deny. Else, return not applicable.
Deny Overrides If any of the sub-policies produces a deny,
return only deny. Otherwise, if any produces a permit,
return only permit. Else, return not applicable.
First Applicable Return the decision reached by the first
sub-policy to reach one other than not applicable.
All Seen Return a set containing the decisions reached by
all the sub-policies.
Either Permit or Deny Nondeterministically return one
of the produced decisions.
Error Return a error if the sub-policies produces both permit
and deny. Otherwise return permit if produced,
or deny if produced. Else, return not applicable.
And Conjoin the sub-policies together by logical And and
return the implied decision(s).
De Capitani di Vimercati et al. [4] list additional combinators
. The nature of the combinators available in a language
can greatly impact the clarity of policies written in it.
Notice that many of the above combinators behave the
same in the absence of the decision of deny. One might conclude
from this observation that allowing the explicit denial
of a request is an undesirable complication in a language.
To formalize the role of policy combinators, let policies be
either an atomic policy or a set of sub-policies combined by
some policy combinator. Let p be a policy that consists of
sub-policies p
i
with 1
i  n. Then p = (p
1
, p
2
, . . . , p
n
)
represents the composition of the sub-policies using
.
2
Since sub-policies are themselves policies, one may apply
· to them.
3
The relationship between
(p
1
, p
2
, . . . , p
n
)
and meaning of each sub-policy p
i
affects the clarity of the
policy and is studied in the next section.
POLICY LANGUAGE PROPERTIES
Having formalized policy languages, we are now ready to
describe properties of them.
2
We assume that the set of combinators in a given language
L = (Q, P, G, N, · ) is clear from the structure of P and
· . If this is not the case for a language, one could explicitly
add it to the definition of an policy language.
3
Some languages may permit contextual information from
enclosing policies to affect the meaning of the sub-policies.
For example, a language might have a notation of variable
binding. For such a language,
· might be extended to
take a second argument that carries such contextual information
. All the following definitions could be extended, e.g.,
monadically, to deal with such an extended
· .
162
4.1
Determinism and Totality
Definition 4.1. A language L = (P, Q, G, N, · ) is deterministic
if
p  P, q  Q
p
, d, d  D, q p d  q p d = d = d
For a deterministic language, we can define a function
·
which takes a policy p  P and returns a function from Q
p
to
D as p . q . d  D s.t. q p d. For a deterministic language,
· may be given instead of · to define the language. (We
only even mention nondeterministic languages due to the
existence of one: XACML with obligations.)
Definition 4.2. A language L = (P, Q, G, N, · ) is total
if
p  P, q  Q
p
, d  D s.t. q p d
The policies of total languages will always make a decision.
4.2
Safety
Under Interpretation 2, the request contained too little
information to determine which of the sub-policies of
p applied
. Interpretation 1 avoids such indecision by having requests
implicitly refute the presence of any attribute not
listed. These two interpretations produce different meanings
for statements like
¬faculty(s) found in p
3
. Under
Interpretation 1,
¬faculty(s) holds if faculty(s) is not in
the request, while under the second, the request must explicitly
list
¬faculty(s) for it to hold. We call the former
implicit and the latter explicit.
The explicit approach permits distinguishing between unknown
information and attributes known to be absent. The
explicit interpretation, however, incurs the cost of listing a
possibly large set of absent attributes and can lead to indecision
as shown above.
Such indecision, however, allows the system to recognize
when the policy requires more information to yield a decision
. In contrast, the implicit interpretation can grant undue
access. If, for example, a request does not list faculty(s)
simply because the system did not determine whether s was
a faculty member or not, then the system might erroneously
allow s to enroll in courses. Thus, the sub-system producing
requests must be sure to include all the relevant facts in
each request.
For large scale systems, collecting or even determining
the germane information might consume large amounts of
time. For such systems, the explicate approach might prove
better since requests may leave out information safely and
be refined until the policy yields a decision. Furthermore,
overzealous optimizations and other coding errors might result
in the system producing requests that do not contain
all the relevant facts.
Having a policy drive which information requests include
allows for the system to collect only the information really
needed to reach a decision from the policy. Under this approach
, the sub-system evaluating the policy starts with a
request that contains only the readily available information.
If this sub-system needs additional information to reach a
decision from the policy, it requests the necessary additional
information. Thus, the system does not need to know what
information the policy requires at the time of generating the
initial request. This approach may allow for more efficient
implementations.
Once a datum has been published, it cannot easily be retracted
. Therefore, preventing unwanted access is usually
preferable to granting it. As a result, such incomplete requests
should only result in a grant of access if the complete
one would have. We can formally state this safety concern:
Definition 4.3. Let  be a family of partial ordering on
requests of a language
L = (P, Q, G, N, · ) indexed by the
policies of
L. L is safe with respect to
iff
p  P, q, q  Q
p
, q
p
q = p (q)  p (q ).
Due to differences in the contents of a requests, for each language
a different family of partial orderings
will interest
users. The relation should be such that if q
p
q , then
q contains all the information contained in q and possibly
more. Often one partial ordering may serve every policy.
For example, consider a language in which requests are
sets of non-contradictory facts and the set of decisions is
{permit, deny}. Then using the subset partial ordering for
p
(for every policy p) will make sense since it matches the
intuition of information content. If the language is safe with
respect to such a defined
, then one may omit facts from
a request without causing undue access.
Informally, in a safe language, undue access is impossible
provided that requests tell no lies; whereas, in an unsafe
language, the requests must additionally tell the whole truth.
The choice between these is a function of trust in the program
generating requests, comprehensiveness of analysis to
generate requests, efficiency, and so on. Nevertheless, the
ability to conclude, given a request that will yield access,
that all requests with more information will also yield access
, can potentially be a great boon to policy reasoning.
Some languages might choose to avoid the complications
introduced by a policy testing for the absence of an attribute
all together. In some contexts, such as certificate passing
systems in which a certificate may be withheld, negated attributes
may not make sense.
4
In such a context, requests
would not list negated attributes and the policy would not
test for the absence of an attributes at all.
4.3
Independent Composition
Consider the third interpretation of
p. Under this interpretation
, the meaning of
p can only be determined by looking
at the interactions of the different sub-policies as a whole.
Notice that any one of these sub-policies would produce a
decision of not applicable in isolation, and yet together they
interact to produce a permit decision. The third interpretation
thus inhibits the easy use of local reasoning to reach
conclusions about the policy as a whole. This increases the
possibility of unintended results from combining sub-policies
into a policy.
The alternative, as found in the first two interpretations,
is for the sub-policies to be combined in such a way that
only the result of each in isolation matters. This property
is formalized as follows:
Definition 4.4. A policy combinator  of a language
L = (P, Q, G, N, · ) independently composes its sub-4
One may argue that certificate passing systems may use
negative certificates to achieve the checking of attribute absence
. Whether this captures the notion of the absence of
an attribute or just the presence of another related attribute
is unclear. For example, one could conceivably hold both a
positive and a negative certificate for an attribute.
163
policies iff
p
1
, p
2
, . . . , p
n
P, i,
1
i  n = Q
(p
1
,p
2
,...,p
n
)
Q
p
i
(1)
and there exists a function
: Q  D

D such that
p
1
, p
2
, . . . , p
n
P, q  Q
(p
1
,p
2
,...,p
n
)
,
(p
1
, p
2
, . . . , p
n
) (q)
=
(q)( p
1
(q), p
2
(q), . . . , p
n
(q)) (2)
If all the combinators of
L independently compose, then L
has the independent composition property.
The first requirement forces a request defined for a policy
to also be defined on each of its sub-policies. This is necessary
for the second requirement to be well defined. The
second requirement ensures that one can determine the decision
of the whole policy from the request and decisions of
its sub-policies on that request; no other properties of the
sub-policies matter.
One might alternatively be tempted to define independent
composition thus:
Definition 4.5. A policy combinator  of a language
L = (P, Q, G, N, · ) semantically composes its sub-policies
iff
: (Q  D)

(Q  D), p
1
, p
2
, . . . , p
n
P,
(p
1
, p
2
, . . . , p
n
) =
( p
1
, p
2
, . . . , p
n
)
(3)
If all the combinators of
L semantically compose, then L has
the semantic composition property.
Semantic composition ensures that all sub-policies with the
same meaning in isolation will behave the same under the
combinator.
A language with the semantic composition
property is arguably more clear than one without it, since
only the isolated meaning of the sub-policy must known to
reason about its use under the combinator.
Theorem 4.6. If a policy combinator  of an policy language
L has independent composition, then it has semantic
composition.
Proof. To prove that  has semantic composition,
:
(Q  D)

(Q  D) required for Equation 3 will be
constructed from the
: Q  D

D known to exist
since
independently composes. Let
(f
1
, f
2
, . . . , f
n
) = q . (q)(f
1
(q), f
2
(q), . . . , f
n
(q))
Then
( p
1
, p
2
, . . . , p
n
)
= q . (q)( p
1
(q), p
2
(q), . . . , p
3
(q))
= q . (p
1
, p
2
, . . . , p
n
) (q)
=
(p
1
, p
2
, . . . , p
n
)
Theorem 4.7. The semantic composition of a policy combinator
does not imply that it independently composes.
Proof. Consider a rather odd language that has only one
unary policy combinator,
, atomic policies that are sets of
values, G = {permit}, N = {deny}, and requests that are
sets of values. Let the semantics be
(p
1
) = q .
(permit p
1
(
{v }) = permit
deny
p
1
(
{v }) = deny
for some distinguished value v , and for atomic policies p,
p (q) equals permit iff p  q =  and equals deny otherwise.
The language has semantic composition: for
such that
(f
1
) =
(permit f
1
(
{v }) = permit
deny
f
1
(
{v }) = deny
clearly,
(p
1
) =
( p
1
).
To show that the language does not have independent
composition, assume that it does. Then there exists such a
: Q  D

D to satisfy Equation 2. Let p
1
=
{v} and
p
2
=
{v, v } for some value v such that v = v . Then,
deny = ({v}) ({v})
=
(
{v})( {v} ({v})) = ({v})(permit)
=
(
{v})( {v, v } ({v})) = ({v, v }) ({v}) = permit
A contradiction is reached since permit = deny.
Only with independent composition can a policy reader
with a specific request in mind know the decision of the
whole policy from each of the component policies. This enables
a reader to ask what-if questions like "What if Bob
requests to write the log?" and determine the answer from
recursively asking that question of the sub-policies. Such an
ability is particularly helpful to readers interested in only a
subset of the possible requests or already familiar with some
of the sub-policies.
4.4
Monotonicity
As noted at the end of Section 3.3, the decision of deny
complicates the policy combinators. One of the reasons for
this is that, under combinators like Deny Overrides, a back-and
-forth pattern can arise when considering the decision of
the whole policy from the sub-policies. Consider each sub-policy
in
p with the request q
2
. Under a reasonable interpretation
p
1
yields a decision of permit,
p
2
a decision of deny,
and
p
3
not applicable. Thus, if the order of
p was changed
to
p
3
,
p
1
,
p
2
and we assume a Deny Overrides policy combinator
, the apparent decision would go from non-granting
to granting to non-granting.
Note that Permit Overrides does not exhibit this pattern
since it is impossible to go from a granting decision to a
non-granting one under it. Thus, the formalization of this
pattern focuses on the transition from a granting to a non-granting
decision.
Definition 4.8. A policy combinator  of a language
L = (P, Q, G, N, · ) is monotonic iff
p
1
, . . . , p
n
, p  P, q  Q ,
(p
1
, . . . , p
n
) (q)  (p
1
, . . . , p
i
, p , p
i+1
, . . . , p
n
) (q)
where Q = Q
(p
1
,...,p
n
)
Q
(p
1
,...,p
i
,p ,p
i+1
,...,p
n
)
. We say
L is monotonic if every combinator is monotonic.
Adding another sub-policy to a monotonic combinator cannot
change the decision from granting to non-granting.
Having motivated and established these criteria, we now
apply them to concrete access control languages.
164
CORE XACML
In its entirety, XACML [12] exceeds the bounds of the
definitions given in Section 3. Full XACML includes obligations
, which act as annotations on the decisions of permit
and deny. These annotations specify actions that the system
enforcing the access controls must preform before granting
access or upon prohibiting access. Thus, an XACML policy
may have effects beyond just granting or prohibiting access
that the model presented fails to address.
Handling all of XACML is beyond the scope of this paper
. For illustrative purposes, we employ a formalized subset
of XACML, which we will call Core XACML (CXACML),
which corresponds to the input of the tool Margrave [7, 8].
This subset is expressive enough to capture RBAC
0
[14].
5.1
Syntax
CXACML has two syntaxes: one for policies and one for
requests. We present the policy syntax first, with the start
non-terminal P. For syntactic brevity, we use a Lisp-like
parenthetical syntax in place of XML notation.
P
::=
(Policy C T P

)
| (Rule T F)
C
::=
FirstApp
| DenyOver | PermitOver
T
::=
( (L

) (L

) (L

) (L

) )
L
::=
(A
+
)
A
::=
(id val)
F
::=
Permit
| Deny
Those policies formed by using solely the right choice of
the production rule for P are called rules. XACML does not
consider rules to be policies. However, since the semantics
assigned to rules allows them to behave as policies, we will
consider them policies. The elements of the syntax category
T are called targets. The four parts of the target are the
requirements placed on the subject, resource, action, and
environment, respectively, for the policy to apply to a request
. The non-terminals id and val are strings representing
the attribute IDs and values.
Example 5.1. The following is a CXACML policy:
(Policy FirstApp
((()) (((name log))) (()) (()))
(Rule (((role dr)) (()) (()) (())) Deny)
(Rule ((()) (()) (()) (())) Permit))
This policy permits all requests for access to a log except
those made by doctors, which it denies. In detail, the policy
is composed of two sub-policies using the combinator First
Applicable and applies only to requests where the resource
has the name of log. The first sub-policy denies requests
where the subject has the role of dr regardless of the resource,
action, or environment. The second permits all requests.
The syntax for requests is (with start non-terminal Q):
Q
::=
( (A

) (A

) (A

) (A

) )
They simply list the attributes possessed by the subject,
resource, action, and environment in turn.
5.2
Semantics
In the following natural semantics, we will use the convention
that a lower-case letter represents an element of the set
or syntactic category represented by the upper-case equivalent
. For example, P is the set of all policies and p is a policy.
Let D be the set of all decisions (D = {permit, deny, na}).
The core of the semantics of CX ACML compares requests
to targets. We will denote this relation by qt for request
q and target t. The natural semantics of Table 1 defines .
Next we define
· . Table 2 gives the result of evaluating
rules. The following tables defines
· over policies. Table 3
deals with two cases where a policy does not apply to a
request.
Finally, we must define the policy combinators:
Permit Overrides in Table 4, Deny Overrides in Table 5,
and First Applicable in Table 6.
5.3
Analysis
The syntax and semantics of CXACML defines
L
CXACML
=
(P, Q, G, N, · ). The syntax determines P and Q where
the same set of requests is used for every policy (and thus,
we treat Q as a set of requests). From the semantics, G =
{permit}, N = {na, deny}. CXACML allows for explicit
denials and the checking of the implicit absence of attributes.
Theorem 5.2. L
CXACML
is deterministic.
Proof. Inspection of the inference rules for atomic policies
(Table 2) shows that only one of them can hold at a
time. Thus, atomic policies are deterministic.
Table 4 combined with Table 3 gives the semantics of the
policy combinator Permit Overrides.
The antecedents of
all these inference rules are disjoint, that is, at most one
them can hold for any policy and request. Thus, Permit
Overrides is deterministic. The same argument holds for
Deny Overrides and First Applicable using Tables 5 and 6.
Thus, all the combinators are deterministic.
Thus, one may view a CXACML policy as a function from
requests to decisions with
· in place of · . Further inspection
establishes that
· is a total function.
For two requests q = (s r a e) and q = (s r a e ), let
q
p
q (for every policy p) if s
s , r
r , a
a , and
e
e where
is defined in Table 1.
Theorem 5.3. CXACML is not safe with respect to .
Proof. Consider the policy p shown in Example 5.1 and
the requests q = (() ((name log)) () ()) and
q = (((role dr)) ((name log)) () ()). Clearly q
p
q .
Yet p (q) = permit
deny = p (q )
Theorem 5.4. L
CXACML
has independent composition.
Proof. A combination algorithm c and target t together
determine a policy combinator. For each pair of values for c
and t, the needed function
t
c
: Q  D

D exists to provide
the meaning of the policy (Policy c t p p

) and satisfy
Equation 2. For Permit Overrides (when c = PermitOver,
or PO for sh