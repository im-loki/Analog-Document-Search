Seven Cardinal Properties of Sensor Network Broadcast Authentication
ABSTRACT
We investigate the design space of sensor network broadcast authentication
. We show that prior approaches can be organized based
on a taxonomy of seven fundamental proprieties, such that each approach
can satisfy at most six of the seven proprieties. An empirical
study of the design space reveals possibilities of new approaches,
which we present in the following two new authentication protocols
: RPT and LEA. Based on this taxonomy, we offer guidance in
selecting the most appropriate protocol based on an application's
desired proprieties. Finally, we pose the open challenge for the research
community to devise a protocol simultaneously providing
all seven properties.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General­ Security
and protection; K.6.5 [Security and Protection]: Security and
Protection ­ Authentication

General Terms
Security, Design

INTRODUCTION
Due to the nature of wireless communication in sensor networks,
attackers can easily inject malicious data messages or alter the content
of legitimate messages during multihop forwarding. Sensor
network applications thus need to rely on authentication mechanisms
to ensure that data from a valid source was not altered in
transit. Authentication is thus arguably the most important secu
This research was supported in part by CyLab at Carnegie Mellon under
grant DAAD19-02-1-0389 from the Army Research Office, and grant
CNS-0347807 from the National Science Foundation, and by a gift from
Bosch. The views and conclusions contained here are those of the authors
and should not be interpreted as necessarily representing the official policies
or endorsements, either express or implied, of ARO, Bosch, Carnegie
Mellon University, NSF, or the U.S. Government or any of its agencies.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
SASN'06, October 30, 2006, Alexandria, Virginia, USA.
Copyright 2006 ACM 1-59593-554-1/06/0010 ...
$
5.00.
rity primitive in sensor network communication. Source authentication
ensures a receiver that the message originates from the
claimed sender, and data authentication ensures that the data from
that sender was unchanged (thus also providing message integrity).
When we use the term authentication we mean both source and
data authentication.
Broadcast authentication is a challenging problem. Furthermore,
it is of central importance as broadcasts are used in many applications
. For example, routing tree construction, network query, software
updates, time synchronization, and network management all
rely on broadcast. Without an efficient broadcast authentication algorithm
, the base station would have to resort to per-node unicast
messages, which does not scale to large networks. The practical-ity
of many secure sensor network applications thus hinges on the
presence of an efficient algorithm for broadcast authentication.
In point-to-point authentication, authentication can be achieved
through purely symmetric means: the sender and receiver would
share a secret key used to compute a cryptographic message authentication
code (MAC) over each message [15, 23]. When a message
with a valid MAC is received, the receiver can be assured that
the message originated from the sender. Researchers showed that
MACs can be efficiently implemented on resource-constrained sensor
network nodes [31], and find that computing a MAC function
requires on the order of 1ms on the computation-constrained Berkeley
mote platform [11, 14].
Authentication of broadcast messages in sensor networks is much
harder than point-to-point authentication [1]. The symmetric approach
used in point-to-point authentication is not secure in broadcast
settings, where receivers are mutually untrusted. If all nodes
share one secret key, any compromised receiver can forge messages
from the sender.
In fact, authenticated broadcast requires an asymmetric mechanism
[1]. The traditional approach for asymmetric mechanisms
is to use digital signatures, for example the RSA signature [34].
Unfortunately, asymmetric cryptographic mechanisms have high
computation, communication, and storage overhead, making their
usage on resource-constrained devices impractical for many applications
.
The property we need is asymmetry, and many approaches had
been suggested for sensor network broadcast authentication. However
, objectively comparing such approaches and selecting the most
appropriate one for a given application is a non-trivial process, especially
for an engineer not specialized in security. The goal of
this work is to provide guidance for sensor network broadcast authentication
by presenting a systematic investigation of the design
space. We arrive at a taxonomy of seven fundamental properties,
and present protocols that satisfy all but one property. The list of
the desired properties are:
147
1. Resistance against node compromise,
2. Low computation overhead,
3. Low communication overhead,
4. Robustness to packet loss,
5. Immediate authentication,
6. Messages sent at irregular times,
7. High message entropy.
If we remove any one of the above requirements, a viable protocol
exists. Table 1 gives an overview of the seven approaches for
addressing each case. We show that existing protocols, or small
modifications thereof, make up for five of the seven possible cases.
We also introduce novel approaches for addressing the final two
cases: the RPT protocol to authenticate messages sent at regular
times, and the LEA protocol to authenticate low-entropy messages.
Finally, we pose the open challenge to the research community to
design a broadcast authentication mechanism that satisfies all seven
properties.
Outline.
The paper is organized as follows. We introduce the
taxonomy of seven properties and discuss how current approaches
can be organized based on our taxonomy in Section 2. Section 3 describes
the µTESLA broadcast authentication protocol and presents
several extensions to increase its efficiency and robustness to DoS
attacks. In Section 3.3, we introduce RPT, a novel protocol that
authenticates synchronous messages. In Section 4, we introduce
LEA, a novel protocol for efficient network broadcast authentication
for low-entropy messages. Implementation and evaluation is
discussed in Section 5. Finally, we present related work in Section
6 and our conclusions and future work in Section 7.
TAXONOMY OF EXISTING PROTOCOLS
In this section, we discuss the seven properties of broadcast authentication
and describe possible approaches if we were to leave
out one of the seven requirements.
Node Compromise.
Since sensor nodes are not equipped with
tamper-proof or tamper-resistant hardware, any physical attacker
would be able to physically compromise a node and obtain its cryptographic
keys [5]. Since it is unlikely that tamper-proof hardware
will be deployed on sensor motes in the near future, secure sensor
network protocols need to be resilient against compromised nodes.
However, if the nodes are deployed in a physically secured area
(such as an attended army base), or if the application itself is resilient
against malicious nodes, node compromise might not be an
issue.
If we assume no compromised nodes, all parties could maintain a
network-wide key that is used to generate and verify a single Message
Authentication Code (MAC) per message. If instead one can
assume a low number of compromised nodes, a simple approach
exists which uses a different key for each receiver and adds one
MAC per receiver to each message. Unfortunately, this approach
does not scale to large networks since a 10-byte MACs per receiver
would result in prohibitively large messages. To trade off communication
overhead with security, researchers propose a multi-MAC
approach [3]. In their scheme, the sender chooses some number of
random MAC keys, and distributes a subset of keys to each node.
Every message carries one MAC with each key (assuming 10 bytes
per MAC),
1
which adds a substantial overhead. If an attacker compromises
a node, it can only forge a subset of MACs, thus with
high probability, other nodes will be able to detect the forgery with
their subset of keys. A variant of this approach was used to prevent
malicious injection of messages in sensor networks [36, 37].
Computation Overhead. Sensor nodes have limited computation
resources, so an ideal protocol would have low computation overhead
for both sender and receiver. However, there exist scenarios
where computation might not be a particularly critical issue. For
example, it is conceivable that certain applications would only require
authenticated broadcasts for a small number of packets. In
such a case, the application engineer might be willing to allow for
a small number of intensive computations.
If we admit a high computation overhead, we can use digital signatures
. RSA today requires at least a 1024-bit modulus to achieve
a reasonable level of security, and a 2048-bit modulus for a high
level of security [18]. ECC can offer the same level of security
using 160-bit keys and 224-bit keys, respectively. Recent advancement
in ECC signature schemes on embedded processors can perform
signature verification using 160-bit ECC keys in about 1 second
[10]. Although this represents a dramatic improvement over
earlier public key cryptographic schemes [2, 4, 21], signature verification
is still 3 orders of magnitude slower than MAC verification
, while signature generation is 4 orders of magnitude slower.
While we expect future sensor nodes to have more powerful processors
, the energy constraints dictated by the limited battery resources
will always favor the use of more efficient symmetric cryptographic
primitives.
Communication Overhead.
Energy is an extremely scarce resource
on sensor nodes, and as a result, heavily influences the design
of sensor network protocols. In particular, radio communication
consumes the most amount of energy, and thus protocols with
high communication overhead are avoided if possible. However, in
some settings (e.g., powered nodes) energy consumption is not an
issue. Thus an authentication protocol that requires high communication
overhead would be acceptable.
If we admit a high communication overhead, we can leverage
efficient one-time signatures that are fast to compute, but require
on the order of 100­200 bytes per signature. Examples include the
Merkle-Winternitz (MW) signature which requires 230 bytes per
signature [25, 26, 35] (we describe the MW signature in detail in
Section 4.1), or the HORS signature, which requires around 100
bytes per signature [33]. The MW signature requires around 200
one-way function computations to verify a signature (which corresponds
to roughly 200 ms computation time on a sensor node),
while the HORS signature only requires 11 one-way function computations
. The disadvantage of the HORS signature is that the public
key is about 10 Kbytes,
2
whereas the public key for the MW
signature is only 10 bytes. Signature generation is very efficient
for both mechanisms, and can be reduced to a single hash function
computation assuming a lookup table for the cryptographic values.
We leverage the MW signature to construct the LEA broadcast authentication
mechanism, which we present in Section 4.
Message Reliability. Our fourth property is message reliability.
Reliable message delivery is the property of a network such that
valid messages are not dropped. Ultimately, message reliability is
an applications issue - some applications require message reliability
, while others do not.
1
An 80-bit MAC value achieves security comparable to a 1024-bit
RSA signature [18].
2
This is prohibitively large, since each public key of a one-time
signature can be used to authenticate only a single message.
148
Desired property
Approach if property is relaxed
Resistance to node compromise
Network-wide key
Low computation overhead
Digital signatures
Low communication overhead
One-time signatures
Robustness to packet loss
HORS + chaining of public keys
Immediate authentication
µTESLA
Messages sent at irregular times
RPT, described in Section 3.3
High message entropy
LEA, described in Section 4.2
Table 1: Overview of desired properties of broadcast authentication and approaches. The left column presents the desired property,
and the right column presents the approach that achieves all properties but relaxes the property in its left column. The text describes
each approach in more detail.
If we have perfect message reliability, we can achieve efficient
and immediate authentication by using the HORS signature in a
special construction that combines multiple public keys [28]. In
this construction, a public key is still 10 Kbytes, but a single public
key can be used to authenticate almost arbitrarily many messages,
as the public values are incrementally updated as signed messages
are sent. The communication and computation costs are the same
as for the HORS signature: 1 ms for signature generation, 11 ms
for signature verification, and 100 bytes for the signature. Note that
in such a scheme, an attacker can start forging HORS signatures if
many packets are dropped.
Authentication Delay.
Depending on the application, authentication
delay may influence the design of the sensor network protocol
. For time-critical messages such as fire alarms, the receiver
would most likely need to authenticate the message immediately.
However, authentication delay is typically acceptable for non-time-critical
messages.
If we admit an authentication delay and assume that the receivers
are loosely time synchronized with the sender, the µTESLA broadcast
authentication protocol only adds a 10 byte MAC and an optional
10 byte key to each message [31]. We review the µTESLA
protocol in detail in Section 3.1. To achieve a low computation
overhead in the case of infrequent messages sent at unpredictable
times, we need to extend the µTESLA protocol to enable fast authentication
of the keys in the one-way key chain. In Section 3.2
we present a more efficient key chain construction that enables efficient
authentication in this case. Simultaneously, our approach
protects µTESLA against denial-of-service attacks by sending bogus
key chain values.
Synchronous Messages.
Some applications send synchronous
messages at regular and predictable times. For example, a key revocation
list might be sent to the entire network everyday at noon.
We extend the µTESLA protocol to provide efficient and immediate
authentication for synchronous messages sent at regular and
predictable times. We name the protocol RPT (Regular-Predictable
Tesla), and we present its details in Section 3.3.
Message Entropy. So far, all schemes we describe authenticate
unpredictable messages with high entropy. However, in practice,
many protocols might only communicate with low-entropy messages
. For example, in many applications, there are only a handful
of valid commands that a base station can send to a sensor node.
Therefore, these command packets could be considered as low-entropy
messages.
If we can assure a low upper bound on message entropy, we can
leverage one-time signatures in constructions that provide message
recovery, where the message is not hashed but directly encoded in
the signature. We describe our new LEA protocol in Section 4.
For messages with merely a single bit of entropy, we could employ
the following optimization using two hash chains. One hash
chain would correspond to messages of '1', while another would
correspond to messages of '0'. The sender first sends the last value
of both chains to the receivers in an authenticated manner (e.g., using
one-time signatures or digital signatures). Next, whenever the
sender wishes to send a '0', it would reveal the next value in the
hash chain corresponding to '0'. The same is done for the hash
chain corresponding to '1'. The receiver needs to keep state of the
most recent value it received for each hash chain. Consequently, the
receiver can easily verify the authenticity of new values by hashing
them and comparing them against the most recent value of each
hash chain.
BROADCAST AUTHENTICATION WITH THE
µ
TESLA PROTOCOL
In this section, we first present a brief overview of the µTESLA
protocol [29], the recommended broadcast authentication protocol
if immediate authentication is not required. We improve the
µTESLA broadcast authentication protocol to provide efficient authentication
for infrequent messages sent at unpredictable times
(Section 3.2). In Section 3.3, we describe RPT, further modification
of µTESLA that provides immediate authentication for synchronous
messages sent at regular and predictable times.
3.1
µ
TESLA Overview
The TESLA protocol provides efficient broadcast authentication
over the Internet which can scale to millions of users, tolerate packet
loss, and support real time applications [30]. Currently, TESLA is
in the process of being standardized in the MSEC working group
of the IETF for multicast authentication.
TESLA has been adapted for broadcast authentication in sensor
networks, the resulting protocol is called the µTESLA broadcast
authentication protocol [30, 31]. µTESLA is used to secure routing
information [17], data aggregation messages [12, 32], etc.
We now overview the µTESLA protocol, a detailed description
is available in our earlier paper [31]. Broadcast authentication requires
a source of asymmetry, such that the receivers can only verify
the authentication information, but not generate valid authentication
information. µTESLA uses time for asymmetry. µTESLA
assumes that receivers are all loosely time synchronized with the
sender ­ up to some time synchronization error
, all parties agree
on the current time. Recent research in sensor network time synchronization
protocols has made significant progress, resulting in
time synchronization accuracy in the range of µs [6, 7], which is
much more accurate than the loose time synchronization required
by µTESLA. By using only symmetric cryptographic primitives,
µTESLA is very efficient and provides practical solutions for resource-constrained
sensor networks. Figure 1 shows an example of µTESLA
authentication, and here is a sketch of the basic approach:
149
M j
M j+1
M j+2
M j+3
M j+4
M j+5
M j+6
K
i
-1
K
i
K
i
+1
K
i
+2
F
(Ki)
F
(Ki+1)
F
(Ki+2)
F
(Ki+3)
Interval i
- 1
Interval i
Interval i
+ 1
Interval i
+ 2
time
Figure 1: At the top of the figure is the one-way key chain (using the one-way function F). Time advances left-to-right. At the bottom
of the figure, we can see the messages that the sender sends in each time interval. For each message, the sender uses the current time
interval key to compute the MAC of the message.
· The sender splits up the time into time intervals of uniform
duration. Next, the sender forms a one-way chain of self-authenticating
keys, by selecting key K
N
of interval N at random
, and by repeatedly applying a one-way hash function F
to derive earlier keys. A cryptographic hash function, such
as SHA-1 [27], offers the required properties. The sender
assigns keys sequentially to time intervals (one key per time
interval). The one-way chain is used in the reverse order of
generation, so any key of a time interval can be used to derive
keys of previous time intervals. For example, assuming
a disclosure delay of 2 time intervals, key K
i
will be used to
compute MACs of broadcast messages sent during time interval
i, but disclosed during time interval i
+ 2. The sender
defines a disclosure delay for keys, usually on the order of a
few time intervals. The sender publishes the keys after the
disclosure time.
· The sender attaches a MAC to each message, computed over
the data, using the key for the current time interval. Along
with the message, the sender also sends the most recent key
that it can disclose. In the example of Figure 1, the sender
uses key K
i
+1
to compute the MAC of message M
j
+3
, and
publishes key K
i
-1
assuming a key disclosure delay of two
time intervals.
· Each receiver that receives the message performs the following
operation. It knows the schedule for disclosing keys and,
since the clocks are loosely synchronized, can check that the
key used to compute the MAC is still secret by determining
that the sender could not have yet reached the time interval
for disclosing it. If the MAC key is still secret, then the receiver
buffers the message. In the example of Figure 1, when
the receiver gets message M
j
+3
, it needs to verify that the
sender did not yet publish key K
i
+1
, by using the loose time
synchronization and the maximum time synchronization error
. If the receiver is certain that the sender did not yet
reach interval i
+ 3, it knows that key K
i
+1
is still secret, and
it can buffer the packet for later verification.
· Each receiver also checks that the disclosed key is correct
(using self-authentication and previously released keys) and
then checks the correctness of the MAC of buffered messages
that were sent in the time interval of the disclosed key.
Assuming the receiver knows the authentic key K
i
-2
, it can
verify the authenticity of key K
i
-1
by checking that F
(K
i
-1
)
equals K
i
-2
. If K
i
-1
is authentic, the receiver can verify
the authenticity of buffered packets sent during time interval
i
- 1, since they were authenticated using key K
i
-1
to
compute the MAC.
One-way chains have the property that if intermediate keys are
lost, they can be recomputed using later keys. So, even if some
disclosed keys are lost due to packet loss or jamming attacks, a
receiver can recover the key from keys disclosed later and check
the authenticity of earlier messages.
Along with each message M
i
, the sender broadcasts the µTESLA
authentication information. The broadcast channel may be lossy,
but the sender would need to retransmit with an updated MAC key.
Despite loss, each receiver can authenticate all the messages it receives
.
3.2
Reducing Verification Overhead of
µ
TESLA
Even though µTESLA provides a viable solution for broadcast
authentication in sensor networks, many challenges still remain.
We describe the remaining challenges below and propose extensions
and new approaches to address these challenges.
Some applications broadcast messages infrequently at unpredictable
times and the receivers may need to authenticate messages
immediately. For example, a fire alarm event is infrequent and
needs to be quickly distributed and authenticated. Unfortunately,
when messages are infrequent, due to the one-way chain approach
to verify the authenticity of keys, a receiver may need to compute
a long chain of hash values in order to authenticate the key which
could take several tens of seconds for verification. Such verification
delays the message authentication significantly and may consume
significant computation and energy resources. This approach also
introduces a Denial-of-Service (DoS) attack: an attacker sends a
bogus key to a receiver, and the receiver spends several thousands
of one-way function computations (and several seconds) to finally
notice that the sent key was incorrect.
One approach is to periodically release µTESLA keys and hence
the work for verification of an infrequent message would be distributed
over time. However, this approach wastes energy for periodic
broadcast of µTESLA keys. In the same vein, a sender can
publish several keys in a packet to reduce the effect of DoS attacks
by requiring a receiver to perform a small number of one-way
function computations to incrementally authenticate each key of the
one-way chain. An advantage of this approach is that it makes the
DoS attack described above less attractive to an attacker, as a receiver
would need to follow the one-way chain for a short interval
only to detect a bogus key.
Another approach to counteract the slow and expensive verification
problem is to use a Merkle hash tree [24] instead of a one-way
chain to authenticate µTESLA keys. This approach has been suggested
in another context [13]. For N keys, the tree has height
d
= log
2
(N) and along with each message, the sender sends d values
to verify the key. Despite the logarithmic communication cost,
this is still too large for most sensor networks: consider a network
where we switch to a different hash tree every day, and we need a
150
k
2
k
5
k
8
k
11
k
14
k
17
k
20
k
23
k
1
k
4
k
7
k
10
k
13
k
16
k
19
k
22
k
0
k
3
k
6
k
9
k
12
k
15
k
18
k
21
F
v
0
-7
= F(v
0
-3
|| v
4
-7
)
v
0
-3
v
4
-7
v
01
v
23
v
45
v
67
v
0
v
1
v
2
v
3
v
4
v
5
v
6
v
7
Figure 2: Hash tree constructed over one-way chains of µTESLA keys.
key resolution of 1 second. The 86,400 keys that we need in one
day require a tree of height 17. Assuming a hash output of 10 bytes,
the sender would need to consequently add 170 bytes to each message
for authentication (17 nodes at 10 bytes each). This is far too
much for most sensor networks, where nodes typically communicate
with messages shorter than 100 bytes. Splitting the load up into
two messages is not a viable approach, because of the usually high
packet loss rates in sensor networks. The receiver would only need
to compute O
(log(N)) operations for verification, 17 hash function
computations in our example which requires around 17ms on current
sensor nodes.
To reduce the bandwidth overhead, we design a different approach
that achieves lower message size at the cost of higher verification
computation. our approach is to combine one-way chains
with hash trees. Consider the structure that Figure 2 shows. We
construct a hash tree over short one-way chains. If each one-way
chain has a length of k, the verification cost is expected to be k
/2+
log
(N/k) (it is at most k + log(N/k)), and the communication cost
is log
(N/k). For a given upper bound on the verification time, we
can thus minimize the communication overhead. Consider an upper
bound on the verification time of approximately 500ms. We can
set k
= 2
9
= 512, thus the hash tree will have 8 levels, requiring 80
bytes per packet, making this an attractive approach for many applications
.
An alternative approach would be to construct a hash tree over
the one-way key chain, where the every k'th key will be a leaf node
of the hash tree (for example, in Figure 2, the value k
0
would be
derived from the previous leaf node k
0
= F(v
1
)). The advantage
of this approach is that a sender would not need to send the hash
tree values along with a message, as a value can be authenticated
by following the one-way chain to the last known value. However,
if the sender did not send out any message during an extended time
period, that authentication would be computationally expensive and
thus the sender can choose to also send the hash tree nodes along
for fast verification. This approach would also prevent DoS attacks
since the verification is very efficient.
M
i
M
i
K
i
-1
K
i
K
i
+1
F
(Ki)
F
(Ki+1)
Interval i
- 1
Interval i
time
T
i
-1
T
i
T
i
+1
Figure 3: This figure shows authentication of one message in
the RPT protocol. Message M
i
= MAC
K
i
(M
i
) , and message
M
i
= M
i
,K
i
.
3.3
RPT: Authenticating Messages Sent at Regular
and Predictable Times
As described in our taxonomy in Section 2, one additional property
in the design space of broadcast authentication is to authenticate
asynchronous messages sent at irregular and unpredictable
times. All protocols described so far can achieve this property.
However, if we were to remove this requirement, new possible approaches
exist that can only authenticate messages sent at regular
and predictable times, yet satisfy all of the other cardinal properties
defined in our taxonomy. In this section, we introduce our design
of one such protocol called RPT, a modification of the µTESLA
protocol.
In practice, many protocols send synchronous messages at regular
and predictable times. The plaintext of these messages are often
known by the sender a priori. In particular, messages containing
meta-data are especially well-suited for this type of communication
. For example, a base-station often performs key update or time
re-synchronization at a preset time of day. In these examples, the
sender knows exactly what message needs to be sent at a particular
time, but the protocol dictates that such messages cannot be sent
until a pre-specified time.
Consider an application that broadcasts a message every day at
noon to all nodes. If we use standard µTESLA with one key per
151
day, it would take one day to authenticate the message, since the
receivers would need to wait for the disclosed key one day later.
On the other hand, if we use many keys, for example, one key per
second, it would require 86
,400 keys per day (not using the optimization
we presented in the previous section), and a sensor node
would require an expected time of 43 seconds to verify the authenticity
of the key. Hence, if messages are sent at very regular time
intervals, we can streamline µTESLA to immediately authenticate
these messages.
The RPT protocol (Regular-Predictable TESLA) achieves immediate
authentication for messages sent at regular and predictable
times. Consider a message that needs to be sent at times T
i
=
T
0
+ i · D. The sender creates a one-way key chain, and assigns
one key to each time interval of duration D. We assume that the
sender knows the content of the message M
i
to be broadcast at time
T
i
by time T
i
-, where  is the maximum network broadcast propagation
delay plus the maximum time synchronization error. At
time T
i
- , the sender broadcasts message MAC
K
i
(M
i
) , and at
time T
i
the sender broadcasts M
i
,K
i
. As soon as the receiver receives
the first message, it needs to verify the safety condition that
key K
i
is still secret, given its current time and the maximum time
synchronization error. When receiving the second message, the receiver
first verifies the key K
i
. If the key is correct it verifies the
MAC, and if the MAC is correct it is assured that M
i
is authentic.
Note that this approach does not exhibit any authentication delay,
as the receiver can immediately authenticate M
i
immediately after
reception.
At first glance, it may appear that RPT is susceptible to a denial-of
-broadcast attack, where an attacker sends a large number of
forged MACs around the time the legitimate is sent out. This problem
had been studied and addressed in previous work [16]. However
, it is not easy to evaluate how well this works in practice.
BROADCAST AUTHENTICATION WITH ONE-TIME SIGNATURES
Another way to achieve asymmetric authentication is through the
use of one-time signatures. A one-time signature is much faster to
generate and verify than general purpose signatures, but the private
key associated with the signature can be used to sign only a single
message, otherwise the security degrades and an attacker could
forge signatures. Unlike µTESLA, time synchronization is not necessary
and authentication is immediate. Moreover, one-time signatures
achieve non-repudiation in addition to authentication, which
enables a node to buffer a message and retransmit it later. The receiver
of the retransmitted message can still authenticate the message
.
One-time signatures are advantageous in applications with infrequent
messages at unpredictable times, as they do not add computation
to the receiver based upon the time at which the message
is received. This makes them resilient to many forms of DoS attacks
. We now present an overview of one-time signatures, and
then present our LEA broadcast authentication protocol for authentication
of low-entropy messages in Section 4.2.
4.1
One-Time Signatures Overview
The Merkle-Winternitz signature was first drafted by Merkle [25,
26], and was later also used by Even, Goldreich, and Micali [8],
and more recently also by Rohatgi for efficient stream authentication
[35]. We briefly describe the basic principle of the Merkle-Winternitz
signature.
A Merkle-Winternitz signature relies on efficient one-way functions
to construct a DAG (directed acyclic graph) to encode a signature
. Each edge between two vertices (v
1
v
2
) in the graph
represents an application of the one-way function, where the value
of the end node is the result of the one-way function applied to the
beginning node (v
2
= F(v
1
), where F represents the one-way function
). End nodes with multiple incoming edges take on the value
of the hash of the concatenat