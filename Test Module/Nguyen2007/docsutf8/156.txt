Publicly Verifiable Ownership Protection for Relational Databases
ABSTRACT
Today, watermarking techniques have been extended from the multimedia
context to relational databases so as to protect the ownership
of data even after the data are published or distributed. However
, all existing watermarking schemes for relational databases are
secret key based
, thus require a secret key to be presented in proof
of ownership. This means that the ownership can only be proven
once to the public (e.g., to the court). After that, the secret key
is known to the public and the embedded watermark can be easily
destroyed by malicious users. Moreover, most of the existing
techniques introduce distortions to the underlying data in the watermarking
process, either by modifying least significant bits or exchanging
categorical values. The distortions inevitably reduce the
value of the data. In this paper, we propose a watermarking scheme
by which the ownership of data can be publicly proven by anyone,
as many times as necessary. The proposed scheme is distortion-free
, thus suitable for watermarking any type of data without fear
of error constraints. The proposed scheme is robust against typical
database attacks including tuple/attribute insertion/deletion, ran-dom/selective
value modification, data frame-up, and additive attacks
Categories and Subject Descriptors
H.2.4 [Database Management]: Systems--relational databases

INTRODUCTION
Ownership protection of digital products after dissemination has
long been a concern due to the high value of these assets and the
low cost of copying them (i.e., piracy problem). With the fast development
of information technology, an increasing number of digital
products are distributed through the internet. The piracy problem
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
ASIACCS'06,
March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ...
$
5.00.
has become one of the most devastating threats to networking systems
and electronic business. In recent years, realizing that "the law
does not now provide sufficient protection to the comprehensive
and commercially and publicly useful databases that are at the heart
of the information economy" [12], people have joined together to
fight against theft and misuse of databases published online (e.g.,
parametric specifications, surveys, and life sciences data) [32, 4].
To address this concern and to fight against data piracy, watermarking
techniques have been introduced, first in the multimedia
context and now in relational database literature, so that the ownership
of the data can be asserted based on the detection of watermark
. The use of watermark should not affect the usefulness of
data, and it must be difficult for a pirate to invalidate watermark detection
without rendering the data much less useful. Watermarking
thus deters illegal copying by providing a means for establishing
the original ownership of a redistributed copy [1].
In recent years, researchers have developed a variety of watermarking
techniques for protecting the ownership of relational databases
[1, 28, 26, 29, 13, 19, 20, 2] (see Section 5 for more on related
work). One common feature of these techniques is that they are secret
key based, where ownership is proven through the knowledge
of a secret key that is used for both watermark insertion and detection
. Another common feature is that distortions are introduced
to the underlying data in the process of watermarking. Most techniques
modify numerical attributes [1, 28, 29, 13, 19, 20], while
others swap categorical values [26, 2]. The distortions are made
such that the usability of data for certain applications is not affected
and that watermark detection can be performed even in the
presence of attacks such as value modification and tuple selection.
The above two features may severely affect the application of
watermarking techniques for relational databases. First, the secret
key based approach is not suitable for proving ownership to the
public (e.g., in a court). To prove ownership of suspicious data,
the owner has to reveal his secret key to the public for watermark
detection. After being used one time, the key is no longer secret.
With access to the key, a pirate can invalidate watermark detection
by either removing watermarks from protected data or adding a
false watermark to non-watermarked data.
Second, the distortions that are introduced in the process of watermarking
may affect the usefulness of data. Even though certain
kind of error constraints (e.g., means and variances of watermarked
attributes) can be enforced prior to or during the watermarking
process, it is difficult or even impossible to quantify all
possible constraints, which may include domain constraint, unique-ness
constraint, referential integrity constraint, functional dependencies
, semantic integrity constraint, association, correlation, car-dinality
constraint, the frequencies of attribute values, and statisti

cal distributes. In addition, any change to categorical data may be
considered to be significant. Another difficulty is that the distortions
introduced by watermarking cannot be reduced arbitrarily. A
tradeoff has to be made between watermark distortions and the robustness
of watermark detection (roughly speaking, the more distortions
introduced in the watermarking process, the more likely
that a watermark can be detected in the presence of database attacks
).
In this paper, we attempt to design a new database watermarking
scheme that can be used for publicly verifiable ownership protection
and that introduces no distortions. Our research was motivated
in part by certain aspects of public key watermarking schemes in
the multimedia context, yet it is fundamentally different and particularly
customized for relational databases (see also Section 5 for related
work). Our scheme has the following unique properties. First,
our scheme is publicly verifiable. Watermark detection and ownership
proof can be effectively performed publicly by anyone as
many times as necessary. Second, our scheme introduces no errors
to the underlying data (i.e., it is distortion-free); it can be used for
watermarking any type of data including integer numeric, real numeric
, character, and Boolean, without fear of any error constraints.
Third, our scheme is efficient for incremental updating of data. It
is designed to facilitate typical database operations such as tuple
insertion, deletion, and value modification. Fourth, our scheme is
robust. It is difficult to invalidate watermark detection and ownership
proof through typical database attacks and other attacks. With
these properties, we believe that our watermarking technique can
be applied practically in the real world for the protection of ownership
of published or distributed databases.
The rest of the paper is organized as follows. Section 2 presents
our watermarking scheme, which includes watermark generation
and detection. Section 3 studies how to prove ownership publicly
using a watermark certificate. It also investigates certificate revocation
and incremental update in our scheme. Section 4 analyzes the
robustness of our scheme and the tradeoff between its robustness
and overhead. Section 5 comments on related work, and section 6
concludes the paper.
THE SCHEME
Our scheme watermarks a database relation R whose schema is
R(P, A
0
, . . . , A

-1
), where P is a primary key attribute (later we
discuss extensions for watermarking a relation that does not have
a primary key attribute). There is no constraint on the types of
attributes used for watermarking; the attributes can be integer numeric
, real numeric, character, Boolean, or any other types. Attributes
are represented by bit strings in computer systems. Let 
denote the number of tuples in relation R. For each attribute of
a tuple, the most significant bit (MSB) of its standard binary representation
may be used in the generation of a watermark. It is
assumed that any change to an MSB would introduce intolerable
error to the underlying data value. For ease of referencing, Table 1
lists the symbols that will be used in this paper.
2.1 Watermark Generation
Let the owner of relation R possess a watermark key K, which
will be used in both watermark generation and detection. The watermark
key should be capable of publicly proving ownership as
many times as necessary. This is contrast to traditional watermarking
, where a watermark key is kept secret so that the database owner
can prove his ownership by revealing the key for detecting the watermark
. However, under that formation, the ownership can be publicly
proved only once. In addition, the key should be long enough
to thwart brute force guessing attacks to the key.
Algorithm 1 genW (R, K, ) // Generating watermark W for DB
relation R
1: for each tuple r in R do
2:
construct a tuple t in W with the same primary key t.P =
r.P
3:
for i=0; i &lt; ; i= i+1 do
4:
j =
G
i
(K, r.P ) mod (the number of attributes in r)
5:
t.W
i
= MSB of the j-th attribute in r
6:
delete the j-th attribute from r
7:
end for
8: end for
9: return W
In our scheme, the watermark key is public and may take any
value (numerical, binary, or categorical) selected by the owner.
There is no constraint on the formation of the key. To reduce unnecessary
confusion, the watermark key should be unique to the
owner with respect to the watermarked relation. We suggest the
watermark key be chosen as
K = h(ID
|DB name|version|...)
(1)
where ID is the owner's identity, `|' indicates concatenation, and
h() is a cryptographic hash function (e.g., SHA-512) [22]. In the
case of multiple owners, the public key can be extended to be a
combination of all the owners' IDs or generated from them using a
threshold scheme. For simplicity, we assume that there is a single
owner of DB relation R in the following.
Our concept of public watermark key is different from that of a
public key in public key infrastructure (PKI) [16]. In the cryptography
literature, a public key is paired with a private key such that a
message encoded with one key can be decoded with its paired key;
the key pair is selected in a specific way such that it is computation-ally
infeasible to infer a private key from the corresponding public
key. In our watermarking scheme, there is no private key, and the
public watermark key can be arbitrarily selected. If the watermark
key is derived from the owner's ID as suggested, it is similar to
the public key in identity based cryptography [25, 3, 5], though the
owner does not need to request a private key from a key distribution
center (KDC).
The watermark key is used to decide the composition of a public
watermark W . The watermark W is a database relation whose
scheme is W (P, W
0
, . . . , W

-1
), where W
0
, . . . , W

-1
are binary
attributes. Compared to DB relation R, the watermark (relation
) W has the same number  of tuples and the same primary
key attribute P . The number  of binary attributes in W is a control
parameter that determines the number  of bits in W , where
 =
·  and   . In particular, we call  the watermark
generation parameter
.
Algorithm 1 gives the procedure genW (R, K, ) for generating
the watermark W . In the algorithm, a cryptographic pseudo-random
sequence generator (see chapter 16 in [24]) G is seeded
with the concatenation of watermark key K and the primary key
r.P for each tuple r in R, generating a sequence of numbers
{G
i
(K,
r.P )
}. The MSBs of selected values are used for generating the
watermark. The whole process does not introduce any distortions
to the original data. The use of MSBs is for thwarting potential
attacks that modify the data. Since the watermark key K, the watermark
W , and the algorithm genW are publicly known, anyone
can locate those MSBs in R that are used for generating W . However
, an attacker cannot modify those MSBs without introducing
intolerable errors to the data.
In the construction of watermark W , each tuple in relation R
0

R
database relation to be watermarked

number of tuples in relation R

number of attributes in relation R
W
database watermark (relation) generated in watermarking

(watermark generation parameter) number of binary attributes in watermark W

number of bits in W ;  =

(watermark detection parameter) least fraction of watermark bits required for watermark detection
K
watermark key
Table 1: Notation in watermarking
Algorithm 2 detW (R

, K, , W,  ) // Detecting watermark for
DB relation R'
1: match count=0
2: total coutn=0
3: for each tuple r in R

do
4:
get a tuple t in W with the same primary key t.P = r.P
5:
for i=0; i &lt; ; i= i+1 do
6:
total count = total count +1
7:
j =
G
i
(K, r.P ) mod (the number of attributes in r)
8:
if t.W
i
= MSB of the j-th attribute in r then
9:
match count = match count +1
10:
end if
11:
delete the j-th attribute from r
12:
end for
13: end for
14: if match count/total count &gt;  then
15:
return true
16: else
17:
return false
18:
end if
contributes  MSBs from different attributes that are pseudo-randomly
selected based on the watermark key and the primary key of the tuple
. It is impossible for an attacker to remove all of the watermark
bits by deleting some but not all of the tuples and/or attributes from
the watermarked data. The larger the watermark generation parameter
, the more robust our scheme is against such deletion attacks.
2.2 Watermark Detection
Our watermark detection is designed to be performed publicly
by anyone as many times as necessary. This is a notable difference
compared from previous approaches, which are secret key based. In
watermark detection, the public watermark key K and watermark
W are needed to check a suspicious database relation R

. It is
assumed that the primary key attribute has not been changed or
else can be recovered. If the primary key cannot be relied on, one
can turn to other attributes, as will be discussed in Section 2.4.
Algorithm 2 gives the procedure detW (R

, K, , W,  ) for detecting
watermark W from relation R

, where  is the watermark
generation parameter used in watermark generation, and  is the
watermark detection parameter
that is the least fraction of correctly
detected watermark bits. Both parameters are used to control the
assurance and robustness of watermark detection, as will be ana-lyzed
in Section 4. The watermark detection parameter  is in the
range of [0.5, 1). To increase the robustness of watermark detection
, we do not require that all detected MSBs in R

match the
corresponding bits in W , but that the percentage of the matches is
more than  (i.e., match count/total count &gt;  in algorithm 2).
2.3 Randomized MSBs
Most modern computers can represent and process four primitive
types of data besides memory addresses: integer numeric, real
numeric, character, and Boolean. Regardless of its type, a data item
is represented in computer systems as a bit string. The MSB of the
bit string is the leftmost digit, which has the greatest weight. In a
signed numeric format (integer or real), the MSB can be the sign
bit, indicating whether the data item is negative or not
1
. If the sign
bit is not chosen (or there is no sign bit), the MSB can be the high
order bit (next to the sign bit; in floating point format, it is the leftmost
bit of exponent). For character or Boolean data, any bit can
be an MSB and we simply choose the leftmost one.
We assume that watermark bits generated from selected MSBs
are randomly distributed; that is, each MSB has the same probability
of 1/2 to be 1 or 0. This randomness is important in our
robustness analysis (see Section 4). If this is not the case, then we
randomize the MSBs by XOR'ing them with random mask bits. For
the MSB of the j-th attribute of tuple r, the corresponding mask bit
is the j-th bit of hash value h(K|r.P) if j  , where  is the bit-length
of hash output. In general, if (k - 1) &lt; j  k, the mask
bit is the (j - (k - 1))-th bit of hash value h
k
(K
|r.P). Since the
hash value is computed from the unique primary key, the mask bit
is random; thus, the MSB after masking is random. The random-ized
MSBs are then used in watermark generation and detection in
our scheme.
2.4 Discussion on Relations without Primary
Keys
Most watermarking schemes (e.g., [1, 20, 26, 2]) for relational
databases, including ours, depend critically on the primary key attribute
in the watermarking process. In the case that there is no
primary key attribute, or that the primary key attribute is destroyed
in malicious attacks, one can turn to other attributes and construct
a virtual primary key that will be used instead of the primary key in
the watermarking process. The virtual primary key is constructed
by combining the most significant bits of some selected attributes.
The actual attributes that are used to construct the virtual primary
key differ from tuple to tuple, and the selection of the attributes is
based on a key that could be the watermark key in the context of
this paper. The reader is referred to [19] for more details on the
construction of a virtual primary key.
Since the virtual primary key is constructed from the MSBs of
selected attributes, it is difficult to destroy the virtual primary key
through value modification or attribute deletion. However, unlike
a real primary key, the virtual primary key may not be unique for
each tuple; consequently, there could be multiple tuples in both R
and W sharing the same value of the primary key. In watermark
detection, the exact mapping between pairs of these tuples needs
1
In most commonly used storage formats, the sign bit is 1 for a
negative number and 0 for a non-negative number.
0

to be recovered (see line 4 in algorithm 2). This can be done as
follows. For each tuple r  R with primary key r.P, compute
a tuple t the same way as in watermark generation, then choose
a tuple t

W such that t

is the most close (e.g., in terms of
Hamming distance) to t among the multiple tuples in W that share
the same primary key r.P . The number of tuples sharing the same
primary key value (i.e., the severity of the duplicate problem) can
be minimized, as shown in the above-mentioned work [19].
PUBLIC OWNERSHIP PROOF
We now investigate how to publicly prove ownership as many
times as necessary. If the watermark key K is kept secret with the
owner, the ownership proof can be done secretly; however, it can
be done only once in public since the key has to be revealed to the
public during this process.
The problem of public ownership proof was originally raised in
the multimedia context [15] (see section 5 for details); it has not
been studied in the literature of database watermarking. We note
that the requirements for watermarking relational data are different
from those for watermarking multimedia data. The former must be
robust against typical database alterations or attacks such as tuple
insertion, deletion, and value modification, while the latter should
be robust against multimedia operations such as compression and
transformation. An additional requirement for watermarking relational
data is that a watermarked relation should be updated easily
and incrementally.
Public ownership proof in our scheme is achieved by combining
watermark detection with a certificate.
3.1 Watermark Certificate
D
EFINITION
3.1. A watermark certificate C of relation R is
a tuple ID,K,h(W),h(R),T,DB-CA,Sig, where ID is the
identity of the owner of R, K is the owner's watermark key, W
is the public watermark, T is the validity information, DB-CA is
the trusted authority who signs the certificate by generating a signature
Sig.
Similar to the identity certificate [16] in PKI (or attribute certificate
[10] in PMI), which strongly binds a public key (a set of
attributes) to its owner with a validity period, the watermark certificate
strongly binds a watermark key, a watermark, and a DB
relation to its owner's ID with validity information. The validity
information is a triple T = T
origin
, T
start
, T
end
indicating the
original time T
origin
when the DB relation is first certified, the
starting time T
start
, and the ending time T
end
of this certificate in
the current binding. When the DB relation is certified for the first
time, T
origin
should be the same as T
start
. Compared with the
identity certificate or attribute certificate, the watermark certificate
not only has a validity period defined by T
start
and T
end
, but also
contains the original time T
origin
. The original time will be useful
in thwarting possible attacks that confuse ownership proof.
A comparison of the watermark certificate with the traditional
identity certificate is illustrated in Figure 1. The two kinds of certificates
share a similar structure except that the public key information
in the identity certificate is replaced by the watermark key,
watermark hash, and database hash in the watermark certificate.
In traditional identity certificate, the subject's public key is paired
with a private key known only to the subject. In the case of damage
or loss of the private key (e.g., due to collision attacks), the identity
certificate needs to be revoked before the expiration of the certificate
. In the watermark certificate, since there is no private key asso-ciated
with the public watermark key, it seems that there is no need
Version
Serial Number
Signature Algorithm
Issuer
Validity Period
Subject
Subject Public Key Info
Signature
Version
Serial Number
Signature Algorithm
DB-CA
Validity Info T
DB owner ID
Watermark Key K
Watermark Hash h(W)
DB hash h(R)
Signature Sig
Identity Certificate
Watermark Certificate
Figure 1: Relation between watermark and identity certificate
of certificate revocation. Nonetheless, certificate revocation and recertification
may be needed in the case of identity change, ownership
change, DB-CA signature compromise, and database update.
The role of DB-CA is similar to that of the traditional CA in PKI
in terms of authentication of an applicant's identity. The differences
are: (i) it binds the applicant's ID to the watermark key, watermark,
and watermarked data; and (ii) it confirms the original time when
the watermarked data was first certified. The original time is especially
useful in the case of recertification so as to thwart false
claims of ownership by a pirate. This is addressed in the following
subsection.
3.2 Public Verifiability
While the watermark detection process can be performed by anyone
, voluntarily or in delegation, who has access to the public watermark
and watermark key, the ownership is proven by further
checking the corresponding watermark certificate. This involves
checking (i) if the watermark certificate has been revoked (see the
next subsection for details); (ii) if the watermark key and (the hash
of) the watermark used in watermark detection are the same as
those listed in the watermark certificate; (iii) if the signature is correctly
signed by the DB-CA stipulated in the watermark certificate
(this is done in traditional PKI and may involve checking the DB-CA's
public key certificate, a chain of CA's certificates, and a certificate
revocation list); and (iv) the similarity of suspicious data
R

to the original data R as published by the owner of watermark
certificate. If all are proven, the ownership of the suspicious data
is publicly claimed to belong to the owner of the watermark certificate
for the time period stipulated in the certificate. The original
time that the data was certified is also indicated in the certificate.
The last requirement is optional, depending on whether data
frame-up attack
is of concern. In a data frame-up attack, an attacker
modifies the watermarked data as much as possible while
leaving the watermarked bits (i.e., MSBs of selected values) untouched
. Note that in our scheme, an attacker can pinpoint the watermarked
bits since the watermark key, watermark, and watermark
algorithm are all public. Since the ownership is publicly verifiable,
such "frame-up" data may cause confusion and damage to the legitimate
ownership.
The data frame-up attack has not been discussed before, even
though it is also possible in secret key based schemes. For example
, in Agrawal and Kiernan's watermarking scheme [1], the watermark
information is embedded in one of  least significant bits
of some selected values. Data frame-up attack is possible if an attacker
modifies all significant bits except the last  least significant
bits in each value. However, this attack is less serious in secret key


based schemes because the owner of watermarked data may choose
not to claim the ownership for "frame-up" data. In our scheme, this
attack is thwarted by requiring that the suspicious data is similar
enough to the original data (the authenticity of the original data R
can be checked with h(R) in the watermark certificate).
The rationale is that when an attacker forges a low quality data
R

with the MSBs given in the public watermark W , such R

will
be significantly different from the original R due to its low quality.
The similarity between R and R

may be measured, for example,
by the portion of significant bits that match for each pair of values
in R and R

whose watermarked MSBs match. The similarity may
also be measured in terms of the usefulness of data, such as the
difference of individual values, means, and variances.
3.3 Certificate Management
Once publicly proven based on a valid watermark certificate,
the ownership of watermarked data is established for the owner
of the certificate. The current ownership is valid for a time period
[T
start
, T
end
] stipulated in the certificate. The original time
T
origin
when the data was first certified is also indicated in the certificate
.
The use of original time is to thwart additive attack. Additive attack
is a common type of attacks to watermarking schemes in which
an attacker simply generates another watermark for watermarked
data so as to confuse ownership proof. The additional watermark
can be generated using a watermark key that is derived from the
attacker's ID. It is also possible for the attacker to obtain a valid
watermark certificate for this additional watermark.
We solve this problem by comparing the original time T
origin
in the certificate of real owner with the original time T
origin
in the
certificate of the attacker. We assume that the owner of data will
not make the data available to potential attackers unless the data is
watermarked and a valid watermark certificate is obtained. Therefore
, one always has T
origin
&lt; T
origin
by which the legitimate
ownership can be proven in the case of an ownership dispute. After
this, the attacker's valid certificate should be officially revoked.
Besides revocation upon losing an ownership dispute, a certificate
may be revoked before its expiration based on the following
reasons: (1) identity change; (2) ownership change; (3) validity
period change; (4) DB-CA compromise; and (5) database update.
When the owner of a valid certificate changes his identity, he needs
to revoke the certificate and, at the same time, apply for a new
certificate to replace the old one. Upon the owner's request, the
DB-CA will grant a new validity period [T
start
, T
end
] according
to its policy while keeping the original time T
origin
unchanged in
the new certificate. The case of ownership change is handled in a
similar manner, except that the DB-CA needs to authenticate the
new owner and ensure the ownership change is granted by the old
owner. In both cases, a new watermark key and a new watermark
may be derived and included in the new certificate.
Sometimes the owner wants to prolong or shorten the validity period
of his certificate. In this case, the watermark certificate needs
to be re-certified with a new validity period. The watermark key or
watermark does not need to change in the recertification process.
In our scheme, the DB-CA is trusted, similar to the CA in traditional
PKI. A traditional PKI certificate would need to be revoked
for a variety of reasons, including key compromise and CA compromise
. Since a watermark key is not paired with a private key
in our scheme, there is no scenario of watermark key compromise.
However, there is a possibility of DB-CA compromise if any of the
following happens: (i) DB-CA's signature is no longer safe (e.g.,
due to advanced collision attacks); (ii) DB-CA loses its signature
key; (iii) DB-CA ceases its operation or business; or (iv) any CA
who certifies the DB-CA's public key is compromised (the public
key is used to verify the DB-CA's signature in our scheme). In
the case of DB-CA compromise, all related watermark certificates
must be revoked and re-examined by a valid DB-CA and recertified
with new validity periods but unchanged original times.
Due to the similarity between the watermark certificate and the
traditional identity certificate, many existing standards and mechanisms
regarding certificate management, such as certification path
constraints and CRL distribution points, can be borrowed from PKI
with appropriate adaptations. For simplicity and convenience, the
functionality of a DB-CA may be performed by a CA in traditional
PKI.
3.4 Efficient Revocation of Watermark Certificate
Micali proposed an efficient public key certificate revocation scheme
[23] called CRS (for certificate revocation status). Compared with
the CRL-based solution, CRS substantially reduces the cost of management
of certificates in traditional PKI. This scheme can easily
be adapted to our scheme for efficient revocation of watermark certificates
.
As pointed out in [23], the costs of running a PKI are staggering
and most of the costs are due to CRL transmission. The major
reason is that each time a user queries the status of a single certificate
, he needs to query a directory, an agent receiving certificate
information from a CA and handling user queries about it, and the
directory sends him the whole CRL list that has been most recently
signed by the CA. Since the CRL list tends to be very long and
transmitted very often, the CRL solution is extremely expensive. In
CRS, however, the directory responds to a user's query by sending
a 100-bit value only, instead of the whole CRL. The 100-bit value
is employed by the user to verify whether the relative certificate is
valid or has been revoked.
In our watermarking scheme, the DB-CA selects a secret 100-bit
value Y
0
for a watermark certificate, and recursively applies on it
a one-way function F 365 times, assuming that the validity period
of the certificate is a normal year. The DB-CA then includes the
100-bit value Y
365
= F
365
(Y
0
) in the watermark certificate C =
ID,K,h(W),h(R),T,DB-CA,Y
365
, Sig
.
Assume that the current day is the i-th day in the validity period
of the certificate. The DB-CA generates a 100-bit value Y
365
-i
=
F
365
-i
(Y
0
) and gets it published through the directory. It is the DB
owner's responsibility to obtain Y
365
-i
from the directory and publish
it together with the watermark certificate C. Anyone can verify
the validity of the certificate by checking whether F
i
(Y
365
-i
) =
Y
365
, where i is the number of days since the start of the validity
period (i.e., T
start
in T ). If this is the case, the certificate is valid;
otherwise, it has been revoked before the i-th day, in which case
the DB-CA did not get Y
365
-i
published. Note that Y
365
-i
cannot
be computed from previously released Y
365
-j
(j &lt; i) due to the
one-way property of function F .
In this scheme, the DB owner needs to query the directory and
update Y
365
-i
every day. To make the transition from Y
365
-i
to
Y
364
-i
smooth, one more hour may be granted for the validity period
of Y
365
-i
(i.e., 25 hours). To avoid high query load at certain
hours, the validity period of Y
365
-i
should start at a different time
each day for a different certificate. A policy stating this may also
be included in the watermark certificate.
Note that Micali's original scheme requires a CA to (i) sign another
100-bit value besides Y
365
-i
to explicitly indicate a certificate
being revoked; and (ii) sign a updated list indicating all and
only the series numbers of issued and not-yet-expired certificates.
The signed value and list are sent to the directory so that any user


query can be answered by the directory. In our scheme, it is the DB
owner's responsibility (for his own benefit, namely anti-piracy) to
query the direct