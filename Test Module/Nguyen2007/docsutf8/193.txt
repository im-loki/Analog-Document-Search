Through Different Eyes ­ Assessing Multiple Conceptual Views for Querying Web Services
ABSTRACT
We present enhancements for UDDI / DAML-S registries allowing
cooperative discovery and selection of Web services with a 
focus on personalization. To find the most useful service in each 
instance of a request, not only explicit parameters of the request 
have to be matched against the service offers. Also user preferences
or implicit assumptions of a user with respect to common 
knowledge in a certain domain have to be considered to improve 
the quality of service provisioning. In the area of Web services 
the notion of service ontologies together with cooperative answering
techniques can take a lot of this responsibility. However, 
without quality assessments for the relaxation of service requests 
and queries a personalized service discovery and selection is virtually
impossible. This paper focuses on assessing the semantic 
meaning of query relaxation plans over multiple conceptual views 
of the service ontology, each one representing a soft query constraint
of the user request. Our focus is on the question what constitutes
a minimum amount of necessary relaxation to answer each 
individual request in a cooperative manner. Incorporating such 
assessments as early as possible we propose to integrate ontology-based
discovery directly into UDDI directories or query facilities 
in service provisioning portals. Using the quality assessments 
presented here, this integration promises to propel today's Web 
services towards an intuitive user-centered service provisioning.
Categories and Subject Descriptors
H.3.5 [Information Storage and Retrieval]: Online Information 
Services­ Web-based services.

General Terms
Algorithms, Human Factors, Design.

INTRODUCTION
Web services are expected to provide an open platform not only 
for electronic B2B interaction, but also for the provisioning of so-called
user-centered services, i.e. B2C services that can provide 
useful information and a variety of service offers to support users 
in a modern mobile lifestyle. Though the capabilities of such services
are still relatively simple, their sophistication will grow with 
the improvement of (wireless) networks, bandwidths, and client 
device capabilities. However, finding the adequate service for 
subsequent use of each individual user becomes a more and more 
demanding problem. Given the convergence of networks in forthcoming
(mobile) environments and the evolving innovative business
models for third party service deployment (e.g. NTT 
DoCoMo's i-mode service certification/licensing model for mobile
service portals<A href="193.html#10"> [19]) the variety of services is even expected 
to grow. Making an informed choice of the `right' service will 
therefore include matching individual users' preferences or dislikes
against the concepts and capabilities of the services offered.
Usually the interaction process for Web services consists of three 
distinct phases: a discovery of possible services, the selection of 
the most useful, and the subsequent execution. In understanding 
what a service actually offers the first two phases are crucial and 
the general acceptance of user-centered services will depend on 
the solutions of still demanding problems in interaction like cooperative
querying. As sh<A href="193.html#9">own in [4] and [5]<A href="193.html#10"> the discovery and selection
processes of user-centered Web services involves a high degree
of respect for user preferences to be flexible enough for real 
world use. In that respect providing user-centered services 
strongly differs from the well-defined capabilities of traditional 
B2B services. As a running example of a typical user-centered 
service we will use an extension of the cooperative restaurant 
booking Web service <A href="193.html#9">presented in [4]: restaurant booking services 
subscribe to the least general applicable node along a complex 
service ontology for a number of characteristics. A service request 
can then be performed including a choice of various individual 
categories. However, the individual services offered will usually 
only more or less match all the user's expectations. Ranking services
with respect to requests is thus an ongoing challenge, as is 
also evident from the research areas of IR or Web search engines 
for information provisioning.
Service providers almost always can anticipate some typical interactions
with their services. For our example typical tasks are 
for instance booking a certain restaurant for a specific evening, 
finding a suitable restaurant in the vicinity for lunch, etc. The 
characteristics and input parameters for Web services for restaurant
booking thus usually contain a number of general input values
that can be specified in a service request/query: the name of 
the restaurant, its location, its specific address, the type of cuisine, 
the date and time for a booking, its price range or even third party 
content like recommendations (e.g. the Zagat reviews). However, 
from a service provisioning point of view the nature of these parameters
strongly differs. A user expecting to book a certain restaurant
on a specific evening will expect that the request may be

Copyright is held by the author/owner(s). 
WWW 2004, May 17-22, 2004, New York, NY USA. 
ACM 1-58113-912-8/04/0005.

196
granted or may fail depending on current reservations of that restaurant
for the given date, but relaxing the constraints of the date 
given or booking a different restaurant for the evening might simply
not do. In contrast a user simply wishing for a close-by restaurant
to have lunch will rarely provide such fixed terms as a restaurants
name, but rather use descriptive terms like a preferred cuisine
and an approximate location.
service request
service providers
...
service n implementation
service 1 implementation
service providers
...
service n implementation
service 1 implementation
e
x
ecutio
n
UDDI registry
...
service 1 interface
service n interface
UDDI registry
...
service 1 interface
service n interface
quality
assessment
service
ontologies
choice
service descriptions
user
profile
matchmaking

Figure 1: Concept of enhanced UDDI service registries
Distinguishing such query stereotypes like `book a table at the 
`Chez Panisse' for the 12/3/03 8:00 pm' and `give me the name 
and address of a Chinese restaurant in the commercial district of 
San Francisco with medium price range' and the subsequent personalization
of service provisioning also needs different types of 
input parameters. Whereas simple variables like the restaurant's 
name or a certain category in a clear request can be handled in an 
exact match fashion, more fuzzy attributes in a somewhat tentative
request like an approximate location or the choice of cuisine 
have to be understood as a user`s preferences with respect to certain
concepts (soft constraints). In the area of the Semantic Web 
the management of such concepts is usually done by the very 
powerful tool of ontologies that describe a generalization hierarchy
of such concepts. In the course of this paper we will show 
how to open up service provisioning to the better understanding, 
adequate handling and quality assessment of each individual 
user's intentions and preferences. The contribution of the paper 
thus is twofold:
·

On one hand we relate the use of ontologies and the handling 
of conceptual views like given by the Semantic Web to co-operatively
evaluating preferences for each specific user
·

On the other hand we show how to effectively deal with the 
problem of relaxing multiple conceptual views for more 
complex queries and give quality measures to assess the 
most useful results for each specific user.
Both contributions can be expected to improve the service provisioning
of user-centered Web services and help to boost their 
usability and thus subsequently their acceptance.
SEMANTIC REGISTRY ENHANCE-MENTS
Today Web services are usually provided via an Internet wide 
network of services registries given by the Universal Description 
Discovery<A href="193.html#10"> and Integration (UDDI) [21]. UDDI builds on the Web 
Service Definition Language WSDL<A href="193.html#10"> [7] which features basic 
information about providers of a service and technical service 
invocation details. Even though UDDI has become the de facto 
standard in the field it suffers from a major shortcoming: the information
offered on individual services is rather limited. A yellow
-page-style lookup mechanism provides the service interface 
together with a short verbal description of what task the service 
performs. Mainly targeted a human Web service experts and developers
, advanced query capabilities and cooperative matchmaking
, however, are still lacking.  
Research in the area of the Semantic Web seeks a solution to this 
unsatisfy<A href="193.html#10">ing situation, e.g. [20][4]<A href="193.html#9">. Generally speaking, the Semantic
Web fosters a population of the Web with content and 
services having formal semantics and rich service descriptions. 
Several semantic frameworks for Web services are currently 
emerging <A href="193.html#9">with DAML-S [2] and W3C's recently established 
<A href="193.html#10">OWL-S [9], [10] initiative as the most prominent approaches. We
have built our previous work on DAML-S as a relatively mature 
ontology-based approach to the description of Web services that 
tries to provide a common ontology of services for the Semantic 
<A href="193.html#10">Web. Building on top of DAML+OIL [8] the Web service representations
in DAML-S consist of a service profile for advertising 
and discovering services, a process model giving a detailed description
of a service's operation and a service grounding providing
details on how to interoperate with services via message exchange
. 
Figure 1 shows a schematic view of our semantically enriched 
Web service provisioning concept. A user states personal needs 
and preferences in an enhanced service request. The enhanced 
UDDI registry matches this request against the descriptions of all 
registered services. The actual matching can be carried out using 
cooperative database technology like sh<A href="193.html#9">own in [4]. The query is 
split in hard and soft constraints where the hard constraints are 
processed as filter conditions, whereas the soft conditions can be 
relaxed if necessary. If no user-specific preferences are given with 
the service request, the relaxation follows the domain-specific 
conceptual views of the service ontology given by the service 
providers or portal operators. To distinguish between several possible
relaxations the quality assessment, which is the main aspect 
of this paper, will evaluate the degree of match for each service 
with respect to the original user query and offer all best matches. 
After a certain implementation has been chosen, the service provider
will execute the service and deliver the result. 
From a service provisioning viewpoint centralized and publicly 
available service ontologies can be understood as a default service 
conceptualization or the most common service concept hierarchy, 
i.e. encoding common and widely accepted knowledge or 
world/domain knowledge. Due to the hierarchical nature of ontologies
a user asking for a specific service will also be served 
with any more specific service concept subsumed by his request. 
On the other hand, in the case where a best match to his initial 
request is not available he/she might also be satisfied with more 
general services from a super-class of the requested one. This is 
determined by a relaxation step in the service ontology, i.e. a 
generalization of concepts along the lines of the ontology.
ONTOLOGY-BASED WEB SERVICE DISCOVERY AND SELECTION
In this section we provide a brief overview of the use of ontologies
for relaxation of soft query constraints and show how common
knowledge serves as a default for cooperative retrieval.
197
American
California
Seafood
Shopping
Commercial
Cajun
Texmex
Organic
Fusion
Center
Suburb
City
Cultural
...
...
...
Location
Thing
Restaurant
Akasaka
Chez Panisse
Avocado Garden
Cesar
The Walrus
...
Se
rvi
c
e
s
S
e
rvi
c
e O
n
t
o
lo
gy
,,Cuisine"

Figure 2: Service Ontology for restaurant booking.
3.1

Service Ontologies, User Preferences and
Usage Patterns
The purpose of a service ontology is to describe the kinds of entities
available in a service repository and how they are related. To 
this end service ontologies may include descriptions of service 
classes, properties and their instances (the actual services that are 
eventually selected for execution). A basic service ontology is 
depicted in Figure 2. Here restaurant booking services are classified
according to their cuisine and their location in a city. For 
instance the restaurant `Chez Panisse' serves `Organic' food with 
`Organic' being a specialization of the `Californian' cuisine (as 
well as of `American'). Furthermore the restaurant `Chez Panisse' 
is located in the `Shopping' district which itself is part of the city 
`Center'. We have used W3C's Web Ontology Language (OWL) 
and its predecessor DAML+OIL to enrich DAML-S service pro-<A
href="193.html#9">files in Web service repositories [4][5]<A href="193.html#10">. Modeled in OWL the 
most general `Restaurant' and `Location' concepts are anchored 
in `owl:Thing' ­ the most common concept of any ontology.
A restaurant booking service using the service ontology from 
Figure 2 might on one hand assume that a user asking for `a restaurant
featuring American cuisine' will be well served by all 
restaurants with e.g. Cajun, Californian or Texmex cuisine, since 
they are all instantiations of American cuisines. On the other 
hand, if a user asks for `a Californian fusion cuisine restaurant' 
and no such service should be registered, implicitly relaxing the 
query to all Californian restaurants and offering restaurants with 
organic cuisine or Californian seafood to our user will be more 
helpful than just stating the empty result. And even if a user has 
different conceptions (e.g. cuisines being related based on their 
flavors) or explicit preferences (a Chinese restaurant rather than 
an Italian one), an ontology-based discovery/selection model is 
<A href="193.html#9">still useful. [4] shows in detail how to deal with these cases by 
overwriting the default ontology with an explicitly provided (or 
implicitily derived) generalization hierarchy of a user somewhat 
similar to the view definitions proposed by<A href="193.html#10"> [14]. Since for our 
assessment framework here the exact kind and classes/values of 
an ontology do matter less than its actual structure in each instance
, such overwritings by user specified conceptions are always
possible to facilitate.
We advocate the use of service ontologies together with a proprietary
notion of basic user preferences and typical service usage 
patterns for the stepwise refinement of service requests in a cooperative
service provisioning environment. While the basic approach
and combination of ontologies, preferences and patterns is 
<A href="193.html#10">published elsewhere [5] we will now concentrate on enhancements
to the relaxation along the lines of ontologies alone: unlike 
the specialization of a request, a generalization can result in severe
changes of the initial query semantics. This is especially true, 
if several relaxation steps have to be performed until a match can 
be found. At the point of relaxing a constraint to the root of an 
ontology, the respective constraint can even be considered as 
entirely dropped. But nevertheless, since an ontology resembles 
common knowledge (and thus implicit preferences), for high 
quality service provisioning offering somewhat related features is 
usually still a better default than just returning an empty result set.
3.2

Multiple Conceptual Views
Individual users might have quite specific ideas about differing 
domain concepts (conceptions) or very clear expectations how to 
be served differing from the usual domain assumptions (explicit 
preferences), but also implicit preferences play an important part. 
Consider for instance location-based services, e.g. for restaurant 
booking. If a user asks to book `a Chinese restaurant for dinner', 
the common domain knowledge tells us that this restaurant should 
be in the vicinity (e.g. a 30 miles area) of his current or usual 
whereabouts and we can add this information as an implicit constraint
for better provisioning quality. A user in San Francisco 
would usually be annoyed by offers of Chinese restaurants in 
Hong Kong no matter how good their actual quality or rating is. If 
this general assumption would not hold, however, (e.g. if a user 
wants to fly to Hong Kong in the morning and then have dinner 
there) he or she would have stated this unusual detail already 
within the query and had asked for a `Chinese restaurant in Hong 
Kong for dinner'. Such explicit information within a service request
is provided due to the psychological notion that though 
users want a service to know what is sensible (like they expect to 
be served in human-human interaction), no user expects a service 
to be clairvoyant. Thus, not only having further (explicit) knowledge
of a user, but also assuming typical behavior, concept hier-198
archies given by ontologies can be used as good default relaxation 
hierarchies for user preferences. Should, however, some preferences
or a specific conception be given, the underlying ontology 
has to be exchanged against the user-provided terms or concepts.
We introduce the notion of conceptual views on a service ontology
to account for all the different interests a user wants to express
in a service request. Such a conceptual view is modeled as a 
clipping from the full service ontology that starts with the most 
general concept associable with a specific user interest. For this 
paper we will for the ease of understanding assume conceptual 
views to be non-overlapping, tree-shaped clippings from the full 
service ontology where each service is registered with the node 
that describes its value with respect to the most specific characteristics
. An example conceptual view is indicated as a grey shaping 
in figure 2: the view named `Cuisine' is basically a sub-ontology 
only concerned with the classification of restaurants according to 
the offered type of food. Whereas the restaurants `The Walrus', 
`Chez Panisse', `Avocado Garden' and Cesar are classified as 
being `Fusion' or `Organic' places the restaurant `Akasaka' is not 
reachable in this view as it is only classified as located in the cultural
district. As we will discuss in the remainder of this paper 
multiple conceptual views can be used to account for different 
interests a user wants to express in a service request and the relative
importance between them. In the case of the restaurant booking
example it is conceivable that a user values the fulfillment of 
location constraints over cuisine constraints if he/she is only up 
for a quick work lunch. However, for the ambitious `hobby gour-met'
this might be just the other way round on the weekend. Thus 
we will need ways to assess the respective quality of different 
relaxation schemes to allow users to make an informed choice.
RELAXING MULTIPLE ONTOLOGIES
Let us now focus on problems that arise when multiple soft constraints
have to be relaxed over the service ontology. We will first 
look at our sample scenario, investigate the relaxation of conceptual
views and then discuss some quality considerations.
4.1

Relaxation Plans for Multiple Selection
Predicates
Let us consider our restaurant booking service from above. A 
typical query would be "Find a Californian fusion cuisine restaurant
in the commercial district of Berkeley". Here we will have to 
deal with two soft constraints: the type of cuisine and the location. 
Assuming that we do not have more specific information about 
the user's preferences both constraints could be relaxed along the 
two default conceptual views of the service ontology of figure 2.


`The Walrus'

fusion

`Cesar'





`Chez Panisse'
californian
organic

`Avocado Garden'


`Cucina Calabrese'




seafood

`The Mediterraneum'

Figure 3: The cuisine ontology with respective instances
Figures 3 and 4 show the full first two concept levels of the respective
conceptual views with some instances. So in figure 3 we 
can for instance see that there is a service for a restaurant called 
`The Walrus' which is classified as offering fusion cuisine and as 
such, also offering Californian cuisine. The relaxation of query 
predicates over such a view is straightforward. If the query predicate
specifies `fusion cuisine' restaurants, we would have the 
choice between the respective instances, here `The Walrus' and 
`Cesar'. If for some reason there would be no fusion cuisine restaurants
registered, or the instances cannot satisfy some other 
constraints (like booking for a certain date), we will relax along 
the ontology to the more general concept of Californian cuisine 
and can also consider the restaurants that are registered under the 
`organic' and `seafood' characterizations of California cuisine.
The technical problem of how to relax single conceptual views 
with adequate query languages over cooperative database systems 
<A href="193.html#9">is in detail addressed e.g. in [4] and [5]<A href="193.html#10">. The beauty of the design 
is that all details of a UDDI or DAML-S style description for each 
service together with some more characteristics (e.g. taken from 
RDF statements of a restaurants homepage) can be stored in a 
classic relational database by the service provider and can be 
searched using a declarative query language extended by preference
constructors like sh<A href="193.html#10">own in e.g. [13]. Thus an added-value 
service using semantically meaningful content can be provided 
quite easily.


`Tom's Grill'

commercial
`Sushi and Soul'


`Avocado Garden'



city center    cultural

`The Mediterraneum'


`Akasaka'





`Chez Panisse'

shopping

`Cesar'


`Pizza My Heart'

Figure 4: The location ontology with respective instances
A more serious problem arises when several soft query constraints 
over various conceptual views have to be evaluated. Consider for 
instance the query on a `fusion cuisine restaurant in the commercial
district'. We can easily verify that in our example even 
though `The Walrus' and `Cesar' are fusion cuisine, they are not 
registered in the commercial district. Likewise `Tom's Grill', 
`Sushi and Soul' and `Avocado Garden' are in the commercial 
district, but they do not offer fusion cuisine. Aiming at a cooperative
retrieval behavior we are left with three choices: relaxing the 
constraint on the cuisine, relaxing the constraint on the location or 
relaxing both constraints. When relaxing the cuisine to `califor-nian'
we would retrieve the service of `Avocado Garden' the only 
Californian cuisine restaurant within the commercial district. Relaxing
the location-based ontology would result only in the service
of `Cesar' the only fusion cuisine restaurant in the city center
. Finally relaxing both constraints would result in all Californian
cuisine restaurant within the city center, i.e. `Avocado Garden'
, `The Mediterraneum', `Chez Panisse' and `Cesar'. Thus
199
different kinds of relaxation will usually result in essentially differing
answer sets. This problem will remain if more relaxation 
steps have to be taken. If we have relaxed only one constraint we 
could e.g. decide to relax this property even further or relax another
property of our service during the next step. Let us first 
define the task of finding the `best' service under relaxation
The Problem of Best-Matching Service Provisioning:    
Given various characteristics that describe all services in a service 
ontology, a concept hierarchy (conceptual view) for each characteristic
and a user request stating a number of hard and soft constraints
, the best-matching service is given by all services that:  
- fulfill all the hard constraints

- fulfill all soft constraints with a minimum amount of relaxation 
of characteristics with respect to a suitable quality measure
So given that each service is registered in one concept node for 
each characteristic given by the respective conceptual view, and 
all services not fulfilling the hard constraints have been filtered, 
the problem of selection over multiple constraints comes down to 
deciding what is `a minimum amount of relaxation'. Obviously 
the basic task is finding a service that is registered with all concepts
(or any of their respective sub-concepts) as specified by the 
query, a `perfect match'. But if there is no such service registered, 
the decision what soft constraints to relax and how far they are 
relaxed, is paramount for the quality of provisioning.
4.2

Basic Service Quality Considerations
Since the decision about the relaxation scheme is important for 
the output, some way of considering which scheme to follow is 
needed. Usually ontologies are of a qualitative nature. A superclass
/ subclass taxonomy is established, but there is no knowledge
of the `degree' or the relative distance between different 
concepts. However, such knowledge could crucially change the 
utility of certain relaxation plans. Relaxing more refined ontologies
or views will generally hurt the user preferences less than 
relaxing already coarse views or ontologies. The less general the 
concept, the more refined are the sets of objects that will be offered
to the user, and flooding the user with too much too general 
content is avoided. Let us first take a closer look at merely qualitative
views on ontologies of comparable granularity, etc. (i.e. 
relaxing one constraint is introducing the same amount of generalization
as relaxing any other) and then investigate ways to deal 
with quantitative measures in the following section.
For scenarios of merely qualitative preferences and their relaxation
for the restricted class of ceteris paribus preferences <A href="193.html#10">[16] 
proposes a scheme of ordering different objects in the result set 
according to the count of necessary relaxation steps from the top 
or the bottom of the hierarchy or simply the relative distance to all 
violated query constraints. Since we assumed symmetrical views 
on ontologies, also in our relaxation problem a similar concept 
will help us to understand what should be relaxed preferably and 
what this means for the objects in the result set. Let us first show 
the approach of simply counting the relaxation steps from the 
violated constraints. We will label the services we found in each 
step by the number of necessary steps to find them. But first we 
need to define the necessary concept of relaxation paths.
Given tree-shaped conceptual views of a service ontology that 
arranges concepts or values with respect to certain service characteristics
using a generalization semantics, a relaxation path is a 
path along the edges of each conceptual view that leads from a 
base concept to the respective root of the view. Usually this base
concept is specified in a service request or user query and relaxing 
along the relaxation path leads to an increasing generalization of 
this concept. Assuming that all services have been assigned to the 
node of their first appearance along the relaxation path (i.e. they 
are registered to any of the respective node's sub-trees of concepts
, but not to an earlier node of the relaxation path) we get a 
chain of concepts with all services registered under the aspect of 
least necessary level of generalization.
An example for a relaxation path can be easily derived from figures
2 and 4. If a user is primarily interested in the commercial 
district, the appropriate nodes of the relaxation path would be 
`commercial district', `city center', `city' and `location'. The 
services registered in the nodes are e.g. `Tom's Grill', `Sushi and 
Soul' and `Avocado Garden' for `commercial district'. The node 
`city center' would also contain all services registered to its sub-concepts
, (i.e. `The Mediterraneum', `Akasaka', `Chez Panisse', 
`Cesar' and `Pizza My Heart') and so on. Figure 5 shows the first 
two steps of respective relaxation paths for both conceptual views 
in figures 3 and 4 focusing only on the services registered in both 
views. As we pointed out we will always assume tree-shape views 
for the course of this paper. Please note that all the concepts easily
can be transferred to the case where sub-concepts can have 
multiple parent nodes. In this case the node along the relaxation 
path would consist of the intersection of the different parent concepts
, or the intersection of their registered services respectively. 
This generalization has already been successfully employed in a 
similar fashion for mapping queries between differing ontologies 
by<A href="193.html#10"> [18]. Distances then can simply be measured by the minimum 
distance, if multiple paths for relaxation should be available.
Let us now see, how relaxation can be done using an unlabeled 
relaxation graph (see figures 3 and 4). If we begin by either relaxing
the cuisine or the location constraint of our query we would 
have to assign a quality value of 1 to both the `Avocado Garden' 
and `Cesar'. Thus in terms of quality they are incomparable, 
which closely resembles our missing knowledge of what kind of 
relaxation the individual user would prefer. If there should be 
more ways to relax constraints to encounter a service, we will 
always count the minimum number of relaxation steps necessary. 
Relaxing both constraints again leads to quality values of 1 for 
`Avocado Garden' and `Cesar' and a value of 2 for `The Mediterraneum'
and `Chez Panisse', because they have only been seen by 
relaxing both constraints and thus are probably less desirable for 
the user. However, relaxing the cuisine ontology two steps (i.e. to 
all American cuisines) and sticking to the commercial center constraint
might result in `Tom's Grill' turning up also with a value 
of 2. This is because in the naïve model the semantic difference 
between `deep' relaxation and `broad' relaxation is considered the 
same. To be sensitive to the differing implications of broad and 
deep relaxation with respect to generality we will use our concept 
of relaxation paths and show how to use labels along this path to 
get to a more sophisticated relaxation paradigm.
fusion
californian
american
city center
commercial
city
1
2
1
2
fusion
californian
american
city center
commercial
city
1
2
1
2
Avocado Garden
Tom`s Grill
Cesar
Cesar
Avocado Garden
Tom`s Grill
Chez Panisse
Mediterraneum
Chez Panisse
Mediterraneum

Figure 5: Relaxation paths and assigned services
200
Usually the generalization throughout ontologies will become 
quickly rather unspecific with decreasing distance to the root. 
Hence a broad relaxation strategy (breadth first relaxation) often 
is preferred to deep relaxation steps. Summing up the distances 
like before, but weighing each relaxation step with the relative 
distance to the original query term can implement this. Consider 
our query for `fusion cuisine' restaurants in the `commercial district'
. So for example the `Avocado Garden' and `Cesar' need 
each only one relaxation step with a distance of one to the original 
constraint (cf. labels in figure 5), so their quality value is 1. `Chez 
Panisse' and `The Mediterraneum' both need two relaxation steps 
with a distance of 1 each resulting in a value of 2. In contrast 
`Tom's Grill' also needs only two relaxation steps, but whereas 
the first step has a distance of 1, the second step already shows a 
distance of 2. Thus the final value for `Tom's Grill' is 3 (i.e. 
1+2*1) and we can now effectively distinguish between deep and 
broad relaxation. Depending on the nature and granularities of the 
ontology or views we can of course also use higher weightings for 
the deep relaxations, for instance 10
(distance-1)
. So the first step will
be weighted by 1, the second deep step by 10, the third deep step 
by 100, and so on. Since the broad relaxation steps are still simply 
added up, this will `punish' deep relaxation and avoid too broad 
generalizations of constraints. If we always want to punish deep 
steps symmetrically until all constraints in turn are relaxed at least 
to the same level a factor of (number_of_ontologies)
(distance-1)
will
be adequate as shown in the following lemma.
Lemma 1: Weightings to Foster Broad Ontology Relaxation 
Given  n soft query constraints with their respective relaxation 
h