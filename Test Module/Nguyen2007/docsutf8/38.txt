Attack-Resilient Hierarchical Data Aggregation in Sensor Networks
ABSTRACT
In a large sensor network, in-network data aggregation, i.e., combining
partial results at intermediate nodes during message routing,
significantly reduces the amount of communication and hence the
energy consumed. Recently several researchers have proposed robust
aggregation frameworks, which combine multi-path routing
schemes with duplicate-insensitive algorithms, to accurately compute
aggregates (e.g., Sum, Count, Average) in spite of message
losses resulting from node and transmission failures. However,
these aggregation frameworks have been designed without security
in mind. Given the lack of hardware support for tamper-resistance
and the unattended nature of sensor nodes, sensor networks are
highly vulnerable to node compromises. We show that even if a
few compromised nodes contribute false sub-aggregate values, this
results in large errors in the aggregate computed at the root of the
hierarchy. We present modifications to the aggregation algorithms
that guard against such attacks, i.e., we present algorithms for resilient
hierarchical data aggregation despite the presence of compromised
nodes in the aggregation hierarchy. We evaluate the performance
and costs of our approach via both analysis and simulation
. Our results show that our approach is scalable and efficient.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General--Security
and protection
; C.2.1 [Computer-Communication Networks]:
Network Architecture and Design--Wireless communication; D.4.6
[Operating Systems]: Security and Protection--Cryptographic controls
; K.6.5 [Management of Computing and Information Systems
]: Security and Protection
General Terms
Algorithms, Design, Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
SASN'06,
October 30, 2006, Alexandria, Virginia, USA.
Copyright 2006 ACM 1-59593-554-1/06/0010 ...
$
5.00.

INTRODUCTION
In large sensor networks, computing aggregates in-network, i.e.,
combining partial results at intermediate nodes during message routing
, significantly reduces the amount of communication and hence
the energy consumed [11, 23]. An approach used by several data
acquisition systems for sensor networks is to construct a spanning
tree rooted at the querying node, and then perform in-network aggregation
along the tree. Partial results propagate level-by-level up
the tree, with each node awaiting messages from all its children
before sending a new partial result to its parent.
Tree-based aggregation approaches, however, are not resilient to
communication losses resulting from node and transmission failures
, which are relatively common in sensor networks [11, 22,
23]. Because each communication failure loses an entire subtree
of readings, a large fraction of sensor readings are potentially un-accounted
for at the querying node, leading to a significant error
in the query answer. To address this problem, researchers have
proposed the use of multi-path routing techniques for forwarding
sub-aggregates [11]. For aggregates such as Min and Max which
are duplicate-insensitive, this approach provides a fault-tolerant solution
. For duplicate-sensitive aggregates such as Count and Sum,
however, multi-path routing leads to double-counting of sensor readings
, resulting in an incorrect aggregate being computed.
Recently researchers [3, 12, 14] have presented clever algorithms
to solve the double-counting problem associated with multi-path
approaches. A robust and scalable aggregation framework called
Synopsis Diffusion
has been proposed for computing duplicate- sensitive
aggregates such as Count and Sum. There are two primary
elements of this approach - the use of a ring-based topology instead
of a tree-based topology for organizing the nodes in the aggregation
hierarchy, and the use of duplicate-insensitive algorithms for
computing aggregates based on Flajolet and Martin's algorithm for
counting distinct elements in a multi-set [5].
As presented, the Synopsis Diffusion aggregation framework does
not include any provisions for security. Although we can easily prevent
unauthorized nodes from launching attacks by augmenting the
aggregation framework with authentication and encryption protocols
[15, 24], compromised nodes present an entirely new set of security
challenges. The lack of tamper-resistance and the unattended
nature of many networks renders sensor nodes highly vulnerable to
compromise. Standard authentication mechanisms cannot prevent
a compromised node from launching attacks since all its keys are
also compromised. In this paper, we present novel mechanisms for
making the synopsis diffusion aggregation framework resilient to
attacks launched by compromised nodes.
We present counter-measures against attacks in which a compromised
node attempts to change the aggregate value computed at the
root of the hierarchy. In particular, we focus on an attack in which
71
a sensor node that is not a leaf node in the aggregation hierarchy
relays a false sub-aggregate value to its parents. We refer to this
attack as the falsified sub-aggregate attack.
We show that if the synopsis diffusion approach is used to compute
aggregates such as Count and Sum, an adversary can use the
falsified sub-aggregate attack to cause the answer computed at the
base station in response to a query to differ from the true value by
an arbitrary amount. Moreover, we show that this attack can be
launched with a high rate of success, even if only one or a small
number of nodes are compromised.
We present an approach in which the synopsis diffusion aggregation
frameork is augmented with a set of countermeasures that
mitigate the effect of the falsified sub-aggregate attack. In our approach
, a subset of the total number of nodes in the network include
an authentication code (MAC) along with their response to a query.
These MACs are propagated to the base station along with the partial
results that are computed at each level in the hierarchy. By verifying
these MACs, the base station can estimate the accuracy of
the final aggregate value it computes, and can filter out the effect of
any false sub-aggregates contributed by compromised nodes. Thus,
our approach can be used in conjunction with synopsis diffusion to
compute basic aggregates such as Count and Sum despite the presence
of compromised nodes in the aggregation hierarchy.
The communication overhead of our approach depends upon the
number of contributing nodes which send a MAC to the base station
. We evaluate the performance and costs of our approach via
both analysis and simulation. We show that our approach is scalable
since the number of contributing nodes (and hence the average
communication overhead) do not increase with network size. To
further reduce the communication overhead, we describe a variation
of our basic approach that trades communication costs for
latency.
BACKGROUND SYNOPSIS DIFFUSION FOR ROBUST AGGREGATION
In this section, we provide a brief overview of the synopsis diffusion
approach for robust aggregation [3, 14]. Figure 1 illustrates
how the synopsis diffusion approach uses a rings topology for aggregation
.
R0
R1
R2
q
C
B
A
D
Figure 1: Synopsis Diffusion over a rings topology
In the query distribution phase, nodes form a set of rings around
the querying node q based on their distance in hops from q. During
the subsequent query aggregation period, starting in the outermost
ring each node generates a local synopsis s
= SG(v) where v is the
sensor reading relevant to the query, and broadcasts it. (SG
() is
the synopsis generation function.) A node in ring R
i
will receive
broadcasts from all the nodes in its range in ring R
i
+1
. It will then
combine its own local synopsis with the synopses received from its
children using a synopsis fusion function SF
(), and then broadcast
the updated synopsis. Thus, the fused synopses propagate level-by
-level until they reach the querying node, who first combines the
received synopses with its local synopsis using SF
() and then uses
the synopsis evaluation function SE
() to translate the final synopsis
to the answer to the query.
The functions SG
(), SF(), and SE() depend upon the target aggregation
function, e.g. Count, Sum, etc. We now describe the
duplicate-insensitive synopsis diffusion algorithms for the Count
aggregate, i.e., the total number of nodes in the sensor network,
and the Sum aggregate, i.e., the sum of the sensor readings of the
nodes in the network. These algorithms are based on Flajolet and
Martin's well-known probablistic algorithm for counting the number
of distinct elements in a multi-set[5].
2.1
COUNT
In this algorithm, each node generates a local synopsis which is
a bit vector ls of length k
&gt; log n, where n is an upper bound on
the nodes in the network. To generate its local synopsis, each node
executes the function CT
(X, k) given below, where X is the node's
identifier and k is the length of ls in bits. CT
() can be interpreted
as a coin-tossing experiment (with a cryptographic hash function
h
(), modeled as a random oracle whose output is 0 or 1, simulating
a fair coin-toss), which returns the number of coin tosses until the
first heads occurs or k
+ 1 if k tosses have occurred with no heads
occurring. In the local synopsis ls of node X , a single bit i is set to
1, where i is the output of CT
(X, k). Thus ls is a bitmap of the form
0
i
-1
1
with probability 2
-i
.
Algorithm 1 CT
(X, k)
i=1;
while i
&lt; k + 1 AND h(X, i) = 0 do
i
= i + 1;
end while
return i;
The synopsis fusion function SF
() is simply the bitwise Boolean
OR of the synopses being combined. Each node fuses its local
synopsis ls with the synopses it receives from its children by computing
the bit-wise OR of all the synopses. Let S denote the final
synopsis computed by the querying node by combining all the synopses
received from its children and its local synopsis. We observe
that S will be a bitmap of length k of the form 1
r
-1
0
. The querying
node can estimate Count from S via the synopsis evaluation
function SE
(): if r is the lowest-order bit in S that is 0, the count
of nodes in the network is 2
r
-1
/0.7735. The synopsis evaluation
function SE
() is based on Property 2 below. Intuitively, the number
of sensor nodes is proportional to 2
r
-1
since no node has set the rth
bit while computing CT
(X, k).
We now present a few important properties of the final synopsis S
computed at the querying node that have been derived in [5, 3], and
that we will find useful in the rest of this paper. Let S
[i], 1  i  k
denote the ith bit of S, where bits are numbered starting at the left.
Property 1
For i
&lt; log
2
n
-2log
2
log
2
n
, S
[i] = 1 with probability
1. For i
3
2
log
2
n
, S
[i] = 0 with probability  1.
This result implies that for a network of n nodes, we expect that
S
has an initial prefix of all ones and a suffix of all zeros, while
only the bits around S
[log
2
n
] exhibit much variation. This provides
an estimate of the number of bits, k, required for a node's local
synopsis. In practice, k
= log
2
n
+ 4 bits are sufficient to represent
S
with high probability [5]. This result also indicates that the length
of the prefix of all ones in S can be used to estimate n. Let r
=
72
min
{i|S[i] = 0}, i.e., r is the location of the leftmost zero in S.
Then R
= r -1 is a random variable representing the length of the
prefix of all ones in the sketch. The following results hold for R.
Property 2
The expected value of R, E
(R)  log
2
(n) where the
constant
is approximately 0.7735.
This result implies that R can be used for an unbiased estimator
of log
2
(n), and it is the basis for the synopsis evaluation function
SE
() which estimates n as 2
R
/.
Property 3
The variance of R, denoted as

2
R
n
, satisfies

2
R
n
=
2
R

+ Q(log
2
n
) + o(1),
where constant

R

is approximately 1
.1213 and Q(x) is a periodic
function with mean value 0 and period 1.
This property implies that the standard deviation of R is approximately
1
.1213, i.e., the estimates of n derived from R will often
be off by a factor of two or more in either direction. To reduce
the standard deviation of R, Flajolet et al [5] proposed an algorithm
named PCSA, where m synopses are computed in parallel and the
new estimator ( ¯
R
) is the average of all individual R's of these synopses
. For PCSA, the standard error in the estimate of n, i.e.,

n
/n,
is equal to 0
.78/m [5].
Property 4
In a network of n nodes, the expected number of nodes
that will have the ith bit of their local synopsis ls
[i] = 1 is n/2
i
. This
result implies that the expected number of nodes that contribute a 1
to the ith bit of S and the bits to the right of the ith bit in S (i.e., bits
j
, where i
j  k) is n/2
i
-1
.
2.2
SUM
Considine et al. [3] extended the Count algorithm described above
for computing the Sum aggregate. The synopsis generation function
SG
() for Sum is a modification of that for Count while the
fusion function SF
() and the evaluation function SE() for Sum are
identical to those for Count.
To generate its local synopsis for a sensor reading v, a node X
invokes the function CT
() v times
1
and ORs the results. As a result,
the local synopsis of a node is a bitmap of length k
= log
2
u
s
+ 4
where u
s
is an upper bound on the value of Sum aggregate. Unlike
the local synopsis of a node for Count, more than one bit in the
local synopsis of a node for Sum will be equal to 1. Count can
be considered as a special case of Sum where each node's sensor
reading is equal to one unit.
Considine et al. [3] proposed an optimized version of SG
() for
Sum to make it suitable for a low-end sensor node, even if the
sensed value v is high. Moreover, they showed that Properties 14
described above for Count also hold for Sum (with appropriate
modifications). Similarly, as in the case of Count, the PCSA algorithm
can be used to reduce the standard deviation of the estimate
for Sum.
ATTACKS ON SYNOPSIS DIFFUSION
The Synopsis Diffusion aggregation framework does not include
any provisions for security; as a result, it is vulnerable to many attacks
that can be launched by unauthorized or compromised nodes.
To prevent unauthorized nodes from eavesdropping on or participating
in communications between legitimate nodes, we can augment
the aggregation framework with any one of several recently
proposed authentication and encryption protocols [15, 24]. However
, compromised nodes pose an entirely new set of security challenges
.
Sensor nodes are often deployed in unattended environments, so
they are vulnerable to physical tampering. Current sensor nodes
1
Each sensor reading is assumed to be an integer
lack hardware support for tamper-resistance. Consequently, it is
relatively easy for an adversary to compromise a node without being
detected. The adversary can obtain confidential information
(e.g., cryptographic keys) from the compromised sensor and repro-gram
it with malicious code.
A compromised node can be used to launch multiple attacks
against the sensor application. These attacks include jamming at
physical or link layer, other denial of service attacks like flooding,
route disruption, message dropping, message modification, false
data injection and many others. Standard authentication mechanisms
cannot prevent these insider attacks since the adversary knows
all the keying material possessed by the compromised nodes.
In this paper, we focus on defending against an important subclass
of these insider attacks which can potentially corrupt the final
result of the aggregation query. Below we describe these attacks in
the context of the Count and Sum aggregates.
A compromised node M can corrupt the aggregate value computed
at the root (i.e., the sink) of the hierarchical aggregation
framework in three ways. First, M can simply drop aggregation
messages that it is supposed to relay towards the sink. If M is located
at a relatively high position in the aggregation hierarchy, this
has the effect of omitting a large fraction of the set of sensor readings
being aggregated. Second, M can falsify its own sensor reading
with the goal of influencing the aggregate value. Third, M can
falsify the sub-aggregate which M is supposed to compute based
on the messages received from M's child nodes.
The effect of the first attack in which a node intentionally drops
aggregation messages is no different from the effect of transmission
and node failures, which are common in sensor networks [7].
The synopsis diffusion approach employs multi-path routing for addressing
these failures, and thus it also addresses message losses
due to compromised nodes [3, 12, 14]. We refer to the second attack
in which a sensor intentionally falsifies its own reading as the
falsified local value attack
. This attack is similar to the behavior of
nodes with faulty sensors and can be addressed by well-studied approaches
for fault tolerance such as majority voting and reputation-based
frameworks [10, 6]. The third attack, however, in which a
node falsifies the aggregate value it is relaying to its parents in the
hierarchy is much more difficult to address, and is the main focus
of this paper. We refer to this attack as the falsified sub-aggregate
attack
.
The Falsified Sub-Aggregate Attack
Since the sink estimates the
aggregate based on the lowest-order bit r that is 0 in the final fused
synopsis, a compromised node would need to falsify its own fused
synopsis such that it would affect the value of r. It can accomplish
this quite easily by simply inserting ones in one or more bits in positions
j, where r
j  k, in its own fused synopsis which it broadcasts
to its parents. Note that the compromised node does not need
to know the true value of r; it can simply set some higher-order bits
to 1 in the hope that this will affect the value of r computed by the
sink. Since the synopsis fusion function is a bitwise Boolean OR,
the resulting synopsis computed at the sink will reflect the contributions
of the compromised node.
Let r

be the lowest-order bit that is 0 in the corrupted synopsis,
whereas r is the lowest-order bit that is 0 in the correct synopsis.
Then the sink's estimate of the aggregate will be larger than the
correct estimate by a factor of 2
r

-r
. It is easy to see that, with the
above technique, the compromised node can inject a large amount
of error in the final estimate of the sink.
We also observe that even a single node can launch this attack
with a high rate of success because the use of multi-path routing
in the synopsis diffusion approach makes it highly likely that the
falsified synopsis will be propagated to the base station. If p is the
73
packet loss rate and if each node has
parents in the aggregation
hierarchy then the probability of success for this attack is
(1 - p

)
h
,
where the compromised node is h hops away from the sink. As an
example, if p
= 0.2,  = 3, and h = 5 then the probability that the
attack will succeed is 96%.
On the other hand, it is very hard to launch an attack which results
in the aggregate estimated at the sink being lower than the true
estimate. This is because setting a bit in the falsified synopsis to 0
has no effect if there is another node X that contributes a 1 to the
same position in the fused synopsis. To make this attack a success
the attacker has to compromise all the possible paths from node X
to the sink so that X 's 1 cannot reach the sink, which is hard to
achieve. If there is more than one node which contributes to the
same bit then it is even harder. As an example, in Count algorithm,
half of the nodes are likely to contribute to the leftmost bit of the
synopsis, one-fourth nodes of contribute to the second bit, and so
on. There are bits in the synopsis to which only one or two nodes
contribute but it is very hard to predict in advance which nodes will
be contributing to these particular bits if the sink broadcasts along
the query request a random seed to be used with the hash function
in the synopsis generation phase. Hence, we can safely assume that
this attack is extremely difficult to launch. In the rest of this paper,
we restrict our discussion to the previous attack where the goal of
the attacker is only to increase the estimate.
PROBLEM DESCRIPTION & ASSUMPTIONS
In a sensor network where some fraction of the nodes are potentially
compromised, there are three sources that contribute to the
error in the sink's estimate of the aggregate being computed: (i)
error due to packet losses, (ii) error due to the approximation algorithm
used, e.g., Flajolet and Martin's probabilistic algorithm [5],
and (iii) error injected by compromised nodes.
The first two types of error are already addressed by the synposis
diffusion aggregation framework. Our paper is complementary
to this previous work; our objective is to filter out the third
type of error. In particular, we aim to make the synopsis diffusion
approach resilient to the falsified local value attack and the falsified
sub-aggregate attack
, i.e., to enable the sink to get the "true"
estimate of the aggregate being computed despite the presence of
compromised nodes in the aggregation hierarchy. By "true" estimate
we mean the estimate of the aggregate which the sink would
compute if there were no compromised nodes.
4.2
Assumptions
We now discuss our assumptions with respect to the sensor network
and the adversary.
System Assumptions
We assume that the base station is located at
the center of the sensor network, and nodes are deployed around
the base station. However, our approach for attack-resilient aggregation
does not depend upon this assumption. We assume that
sensor nodes are similar to the current generation of sensor nodes,
e.g., Mica2 motes [13], in their computational and communication
capabilities and power resources, while the sink is a laptop class
device supplied with long-lasting power.
We assume that the sink has an estimate of the upper bound on
the value of the Count aggregate. If the sink does not have any
further knowledge, the upper bound of Count can be set to the total
number of nodes deployed. We also assume that there exists an
upper bound on the value of a sensor reading. The upper bound of
Sum can be conservatively set to be equal to product of the upper
bound of Count and the upper bound of a sensor reading. Previous
works on the synopsis diffusion approach [3, 14] have made the
same assumptions regarding the upper bounds for Count and Sum;
these bounds provide an estimate of the length of the synopsis.
Security Assumptions
We assume that the sink cannot be compromised
and it uses a protocol such as µTesla [15]) to authenticate its
broadcast messages. We also assume that each node shares a pairwise
key with the sink, which is used to authenticate the messages
it sends to the sink.
We assume that the adversary can compromise sensor nodes without
being detected. If a node is compromised, all the information it
holds will also be compromised. We use a Byzantine fault model,
where the adversary can inject malicious messages into the network
through the compromised nodes. We conservatively assume that all
compromised nodes can collude, or are under the control of a single
attacker.
Notations
The following notations are used in the description of
our attack-resilient aggregation algorithms.
· BS refers to the base station, i.e., the sink. X is the identifier
of a the sensor node whereas M represents a compromised
node.
· K
X
is the pair-wise key X shares with the sink.
· m1|m2 denotes the concatenation of two message fields m1
and m2.
· MAC(K,m) is the message authentication code (MAC) of the
message m generated using the key K.
· X  Y : m denotes a one-hop delivery of message m from X
to Y , while X
: m denotes that X broadcasts message m
to all of its one-hop neighbors, and X
: m denotes that
X
broadcasts message m to all nodes in the network.
ATTACK-RESILIENT AGGREGATION THE BASIC APPROACH
In this section, we present an attack-resilient approach for computing
the Count and Sum aggregates. In this approach we assume
that the BS has an estimate of the lower bound and the upper bound
of the aggregates. We will see that this approach is scalable only if
the ratio of the upper bound to the lower bound is small. Despite
this limitation, we discuss this approach in detail because it provides
the background and motivation for our extended approach,
which is discussed in Section 6. We first present the main idea underlying
the basic approach and then present the detailed protocol
for securing Count and Sum.
5.1
The Main Idea
In our approach, nodes execute the synopsis diffusion aggregation
algorithm as specified in [3, 14]. However, a subset of the
nodes include along with their synopses a message authentication
code (MAC) that can be used by the sink to verify the validity of
their contribution to the aggregate function.
The key observations behind the design of our approach are that
· In order to derive the correct estimate from the final synopsis
(say S) computed at the sink, we need only to figure out the
correct lowest order bit (say r) in S that is 0.
· The number of nodes contributing a 1 to bit j decreases exponentially
as we move from the lowest order bit ( j
= 1) to
higher order bits of the synopsis. For example, in the case
74
of Count, on average, half the nodes in the network will contribute
2
to the leftmost bit of the synopsis, one-fourth of the
nodes contribute to the second bit of the synposis, and so on.
Thus, we expect that only a small number of nodes will contribute
to the bits around the expected value of r. Each such node includes
along with its response to an aggregation query a MAC computed
using a pairwise key shared exclusively with sink. We demonstrate
that these MACs enable the sink to filter out the contributions of
the falsified sub-aggregates injected by the compromised nodes to
the final aggregate.
For our scheme to work, two issues need to be addressed. First,
since the the value of r is not known before the execution of the
query, we need to specify a criterion whereby a node can determine
if it needs to include a MAC along with its synopsis. Second, this
criterion should be designed so that the number of such nodes who
include a MAC is minimized.
In our basic approach, we assume that the BS has an estimate
of the lower bound and the upper bound of Count which are denoted
by l
c
and u
c
respectively. Based upon these bounds, the BS
knows that bit r will lie between a and b, which are the bit positions
in the synopsis S corresponding to l
c
and u
c
respectively,
i.e., a
= log
2
(l
c
) and b = log
2
(u
c
) (by Property 2 in Section
2). Thus, there is no need for the BS to verify the bits to the
left of a; only nodes contributing to bits in the range a to b need
to prove to the BS that their contribution to the synopsis S is valid.
We refer to the collection of bits in the range a to b in synopsis S
as the synopsis-edge as shown in Figure 2. It is easy to see that the
length of the synopsis-edge is
(log
2
(
u
c
l
c
)+1) bits. If we denote
the number of nodes contributing to the synopsis-edge by
, then,
by Property 4 in Section 2,
(
u
c
2
a
+ . . . +
u
c
2
b
)
1

(
2u
c
l
c
-1).
The upper bound for Count (u
c
) can be set to the total number
of nodes deployed. The lower bound for Count (l
c
) can be guessed
depending on the the energy reserve of the sensor nodes and rate
of energy expenditure. As an example, if 2000 nodes are deployed
then u
c
= 2000 and l
c
= 1000 may be a safe estimate at the time
of the Count query's execution. For this example, the length of the
synopsis-edge
is
u
c
l
c
= 2 and the expected number of nodes contributing
to synopsis-edge is less than 3.87.
synopsis-edge
corresponds to
Lower Bound
corresponds to
Upper Bound
Figure 2: Securing Count synopsis.
To securely compute
Count synopsis, the base station needs to verify only bits in the
synopsis-edge.
For the ease of presentation, we present the basic approach assuming
that only one synopsis is computed. We can easily extend
this approach to compute m synopses in parallel as in algorithm
PCSA.
5.2
Securing Count
To compute the Count aggregate securely, we extend the original
Count algorithm discussed in Section 2 as follows. For the sake
2
For convenience, henceforth, we say that a node "contributes" to
a position j in the synopsis S if bit j in its local synopsis is 1.
of completeness, we first briefly describe the query dissemination
phase, and then we present the aggregation procedure in detail.
In the query dissemination phase, the BS broadcasts the name
of the aggregation function, a random number (Seed) and the bit
positions of the start and the end of the synopsis-edge, which are
specified by a and b respectively. Each node will use the random
number, Seed, as an input to the hash function in the synopsis generation
procedure. In more concrete terms, a query packet that the
BS broadcasts is as follows:
BS
: F
agg
, Seed, a, b, s,t, h
where F
agg
is the name of the aggregation function (i.e. `Count'), s
denotes the time when the aggregation phase will start, t represents
the duration of one round i.e. t
=
T
h
, where h is the total number
of hops and T is the duration of the aggregation phase (also called
epoch
). Note that, as in the original Count algorithm discussed in
Section 2, the epoch is sub-divided into a series of rounds, one for
each hop, starting from the farthest hop. µTesla [15] can be used
for authenticating the broadcast packet.
In the aggregation phase, each node executes the synopsis generation
function SG
() and the synopsis fusion function SF() for
Count as discussed in Section 2. In addition, each node checks
whether it contributes to the synopsis-edge, and if so, it generates a
MAC and forwards the MAC along with its fused synopsis. Specifically
, if node X contributes to bit i in the synopsis-edge, it generates
a MAC, M
= MAC(K
X
, m) over the message m whose format
is
[X|i|Seed], where Seed is the random number which was dissem-inated
in the query distribution phase. Each node X forwards to
its parents its fused synopsis along with the set of MACs (
M
) it
received from its child nodes and its own MAC if it generated one.
The format of the message a node X forwards to its parents is as
follows:
X
: S
l
|
M
,
where S
l
is the fused synopsis computed by X . If the message does
not fit into one packet, node X breaks it into several packets and
forwards them. In Appendix A, we formally describe the algorithm
(SecureCount) executed by each node in response to an aggregation
query.
After the BS receives the MACs, it checks their validity. In particular
, for each message and MAC pair
[m|MAC(K
X
, m)] where
m
is
[X|i|Seed], the BS executes the synopsis generation function
SG
() of X and verifies whether node X really contributes to bit i
in the synopsis-edge, and then checks whether the attached MAC
is valid. If any of these tests fail, the corresponding MAC is discarded
.
After this verification step, the BS checks whether it has received
at least one valid MAC for each bit in the synopsis-edge. The bits in
the synopsis-edge for which the BS has not received a valid MAC
are reset to 0. The bits at positions to the left of the synopsis-edge
are set to 1. Finally, the BS computes the Count using the synopsis
evaluation function SE
().
Security Analysis
The security of our approach follows from two
facts:
· The sink can independently verify the output of SG() for a
particular node X . This is because the output of SG
() depends
only upon the node id X , and the random seed included
in the query message.
· Each bit that is set to 1 in the synopsis edge has an associated
MAC that can be verified by the sink. This MAC is computed
using a pairwise key that is known only to the contributing
node and the sink, thus the MAC cannot be fabricated by an
attacker (as long as it is reasonably long.)
75
Although a compromised node can falsely set some bits in its
fused synopsis and forward false MACs corresponding to those
bits, the sink will be able to discard any false MACs. This implies
that the attacker cannot falsely increase the Count. On the other
hand, the attacker may attempt to decrease the Count by dropping
a genuine MAC (or by corrupting a genuine MAC) sent by a contributing
node, but the genuine MAC is likely to reach BS via an
alternate path. If BS receives at lea