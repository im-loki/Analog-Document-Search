A Functional Correspondence between Evaluators and Abstract Machines
Abstract
We bridge the gap between functional evaluators and abstract machines
for the

-calculus, using closure conversion, transformation
into continuation-passing style, and defunctionalization.
We illustrate this approach by deriving Krivine's abstract machine
from an ordinary call-by-name evaluator and by deriving an ordinary
call-by-value evaluator from Felleisen et al.'s CEK machine.
The first derivation is strikingly simpler than what can be found in
the literature. The second one is new. Together, they show that
Krivine's abstract machine and the CEK machine correspond to the
call-by-name and call-by-value facets of an ordinary evaluator for
the

-calculus.
We then reveal the denotational content of Hannan and Miller's
CLS machine and of Landin's SECD machine. We formally compare
the corresponding evaluators and we illustrate some degrees of
freedom in the design spaces of evaluators and of abstract machines
for the

-calculus with computational effects.
Finally, we consider the Categorical Abstract Machine and the extent
to which it is more of a virtual machine than an abstract machine
Categories and Subject Descriptors
D.1.1 [Software]: Programming Techniques--applicative (functional
) programming; D.3.4 [Programming Languages]: Proces-sors
--interpreters
General Terms
Design, Languages.

Basic Research in Computer Science (
www.brics.dk
),
funded by the Danish National Research Foundation.

Ny Munkegade, Building 540, DK-8000 Aarhus C, Denmark.
Email:
mads,dabi,danvy,jmi @brics.dk
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior specific permission and/or a fee.
PPDP'03, August 27­29, 2003, Uppsala, Sweden.
Copyright 2003 ACM 1-58113-705-2/03/0008 ...$5.00

Introduction and related work
In Hannan and Miller's words [23, Section 7], there are fundamental
differences between denotational definitions and definitions of
abstract machines. While a functional programmer tends to be
familiar with denotational definitions [36], he typically wonders
about the following issues:
Design:
How does one design an abstract machine? How were
existing abstract machines, starting with Landin's SECD machine
, designed? How does one make variants of an existing
abstract machine? How does one extend an existing abstract
machine to a bigger source language? How does one go about
designing a new abstract machine? How does one relate two
abstract machines?
Correctness:
How does one prove the correctness of an abstract
machine?
Assuming it implements a reduction strategy,
should one prove that each of its transitions implements a part
of this strategy? Or should one characterize it in reference to
a given evaluator, or to another abstract machine?
A variety of answers to these questions can be found in the literature
. Landin invented the SECD machine as an implementation
model for functional languages [26], and Plotkin proved its
correctness in connection with an evaluation function [30, Section
2]. Krivine discovered an abstract machine from a logical
standpoint [25], and Cr´egut proved its correctness in reference to
a reduction strategy; he also generalized it from weak to strong
normalization [7]. Curien discovered the Categorical Abstract Machine
from a categorical standpoint [6, 8]. Felleisen et al. invented
the CEK machine from an operational standpoint [16, 17, 19].
Hannan and Miller discovered the CLS machine from a proof-theoretical
standpoint [23].
Many people derived, invented, or
(re-)discovered Krivine's machine. Many others proposed modifications
of existing machines. And recently, Rose presented a
method to construct abstract machines from reduction rules [32],
while Hardin, Maranget, and Pagano presented a method to extract
the reduction strategy of a machine by extracting axioms from its
transitions and structural rules from its architecture [24].
In this article, we propose one constructive answer to all the questions
above.
We present a correspondence between functional
evaluators and abstract machines based on a two-way derivation
consisting of closure conversion, transformation into continuation-passing
style (CPS), and defunctionalization. This two-way derivation
lets us connect each of the machines above with an evaluator,
and makes it possible to echo variations in the evaluator into variations
in the abstract machine, and vice versa. The evaluator clarifies
the reduction strategy of the corresponding machine. The abstract
machine makes the evaluation steps explicit in a transition system.
8
Some machines operate on

-terms directly whereas others operate
on compiled

-terms expressed with an instruction set. Accordingly
, we distinguish between abstract machines and virtual machines
in the sense that virtual machines have an instruction set and
abstract machines do not; instead, abstract machines directly operate
on source terms and do not need a compiler from source terms to
instructions. (Gr´egoire and Leroy make the same point when they
talk about a compiled implementation of strong reduction [21].)
Prerequisites: ML, observational equivalence, abstract
machines,

-interpreters, CPS transformation, defunctionalization
, and closure conversion.
We use ML as a meta-language, and we assume a basic familiarity
with Standard ML and reasoning about ML programs. In particular
, given two pure ML expressions
e
and
e'
we write
e
e'
to
express that
e
and
e'
are observationally equivalent. Most of our
implementations of the abstract machines raise compiler warnings
about non-exhaustive matches. These are inherent to programming
abstract machines in an ML-like language. The warnings could be
avoided with an option type or with an explicit exception, at the
price of readability and direct relation to the usual mathematical
specifications of abstract machines.
It would be helpful to the reader to know at least one of the machines
considered in the rest of this article, be it Krivine's machine
, the CEK machine, the CLS machine, the SECD machine,
or the Categorical Abstract Machine.
It would also be helpful
to have already seen a

-interpreter written in a functional language
[20, 31, 35, 39]. In particular, we make use of Strachey's
notions of expressible values, i.e., the values obtained by evaluating
an expression, and denotable values, i.e., the values denoted by
identifiers [38].
We make use of the CPS transformation [12, 33]: a term is CPS-transformed
by naming all its intermediate results, sequentializing
their computation, and introducing continuations. Plotkin was the
first to establish the correctness of the CPS transformation [30].
We also make use of Reynolds's defunctionalization [31]: defunctionalizing
a program amounts to replacing each of its function
spaces by a data type and an apply function; the data type enumerates
all the function abstractions that may give rise to inhabitants
of this function space in this program [15]. Nielsen, Banerjee,
Heintze, and Riecke have established the correctness of defunctionalization
[3, 29].
A particular case of defunctionalization is closure conversion: in
an evaluator, closure conversion amounts to replacing each of the
function spaces in expressible and denotable values by a tuple, and
inlining the corresponding apply function.
We would like to stress that all the concepts used here are elementary
ones, and that the significance of this article is the one-fits-all
derivation between evaluators and abstract machines.
Overview:
The rest of this article is organized as follows. We first consider
a call-by-name and a call-by-value evaluator, and we present the
corresponding machines, which are Krivine's machine and the CEK
machine. We then turn to the CLS machine and the SECD machine,
and we present the corresponding evaluators. We finally consider
the Categorical Abstract Machine. For simplicity, we do not cover
laziness and sharing, but they come for free by threading a heap of
updateable thunks in a call-by-name evaluator [2].
Call-by-name, call-by-value, and the calculus
We first go from a call-by-name evaluator to Krivine's abstract machine
(Section 2.1) and then from the CEK machine to a call-by-value
evaluator (Section 2.2). Krivine's abstract machine operates
on de Bruijn-encoded

-terms, and the CEK machine operates on

-terms with names. Starting from the corresponding evaluators, it
is simple to construct a version of Krivine's abstract machine that
operates on

-terms with names, and a version of the CEK machine
that operates on de Bruijn-encoded

-terms (Section 2.3).
The derivation steps consist of closure conversion, transformation
into continuation-passing style, and defunctionalization of continuations
. Closure converting expressible and denotable values makes
the evaluator first order. CPS transforming the evaluator makes its
control flow manifest as a continuation. Defunctionalizing the continuation
materializes the control flow as a first-order data structure.
The result is a transition function, i.e., an abstract machine.
2.1
From a call-by-name evaluator to Krivine's
machine
Krivine's abstract machine [7] operates on de Bruijn-encoded

terms
. In this representation, identifiers are represented by their
lexical offset, as traditional since Algol 60 [40].
datatype term = IND of int
(* de Bruijn index *)
| ABS of term
| APP of term * term
Programs are closed terms.
2.1.1
A higher-order and compositional call-by-name
evaluator
Our starting point is the canonical call-by-name evaluator for the

-calculus [35, 37]. This evaluator is compositional in the sense of
denotational semantics [34, 37, 41] and higher order (
Eval0.eval
).
It is compositional because it solely defines the meaning of each
term as a composition of the meaning of its parts. It is higher order
because the data types
Eval0.denval
and
Eval0.expval
contain
functions: denotable values (
denval
) are thunks and expressible values
(
expval
) are functions. An environment is represented as a list
of denotable values. A program is evaluated in an empty environment
(
Eval0.main
).
structure Eval0
= struct
datatype denval = THUNK of unit -&gt; expval
and expval = FUNCT of denval -&gt; expval
(*
eval : term * denval list -&gt; expval
*)
fun eval (IND n, e)
= let val (THUNK thunk) = List.nth (e, n)
in thunk ()
end
| eval (ABS t, e)
= FUNCT (fn v =&gt; eval (t, v :: e))
| eval (APP (t0, t1), e)
= let val (FUNCT f) = eval (t0, e)
in f (THUNK (fn () =&gt; eval (t1, e)))
end
(*
main : term -&gt; expval
*)
fun main t
= eval (t, nil)
end
9
An identifier denotes a thunk. Evaluating an identifier amounts
to forcing this thunk.
Evaluating an abstraction yields a function
. Evaluating an application requires the evaluation of the sub-expression
in position of function; the intermediate result is a function
, which is applied to a thunk.
2.1.2
From higher-order functions to closures
We now closure-convert the evaluator of Section 2.1.1.
In
Eval0
, the function spaces in the data types of denotable
and expressible values are only inhabited by instances of the

abstractions
fn v =&gt; eval (t, v :: e)
in the meaning of abstractions
, and
fn () =&gt; eval (t1, e)
in the meaning of applications.
Each of these

-abstractions has two free variables: a term and an
environment. We defunctionalize these function spaces into closures
[15, 26, 31], and we inline the corresponding apply functions.
structure Eval1
= struct
datatype denval = THUNK of term * denval list
and expval = FUNCT of term * denval list
(*
eval : term * denval list -&gt; expval
*)
fun eval (IND n, e)
= let val (THUNK (t, e')) = List.nth (e, n)
in eval (t, e')
end
| eval (ABS t, e)
= FUNCT (t, e)
| eval (APP (t0, t1), e)
= let val (FUNCT (t, e')) = eval (t0, e)
in eval (t, (THUNK (t1, e)) :: e')
end
(*
main : term -&gt; expval
*)
fun main t
= eval (t, nil)
end
The definition of an abstraction is now
Eval1.FUNCT (t, e)
instead
of
fn v =&gt; Eval0.eval (t, v :: e)
, and its use is now
Eval1.eval
(t, (Eval1.THUNK (t1, e)) :: e')
instead of
f (Eval0.THUNK
(fn () =&gt; Eval0.eval (t1, e)))
. Similarly, the definition of a
thunk is now
Eval1.THUNK (t1, e)
instead of
Eval0.THUNK (fn ()
=&gt; Eval0.eval (t1, e))
and its use is
Eval1.eval (t, e')
instead
of
thunk ()
.
The following proposition is a corollary of the correctness of defunctionalization
.
P
ROPOSITION
1
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program, evaluating
Eval0.main p
yields a value
FUNCT f
and evaluating
Eval1.main p
yields a value
FUNCT (t, e)
such that
f
fn v =&gt; Eval1.eval (t, v :: e)
2.1.3
CPS transformation
We transform
Eval1.eval
into continuation-passing style.
1
Doing
so makes it tail recursive.
1
Since programs are closed, applying
List.nth
cannot fail and
therefore it denotes a total function. We thus keep it in direct
style [14].
structure Eval2
= struct
datatype denval = THUNK of term * denval list
and expval = FUNCT of term * denval list
(*
eval : term * denval list * (expval -&gt; 'a)
*)
(*
-&gt; 'a
*)
fun eval (IND n, e, k)
= let val (THUNK (t, e')) = List.nth (e, n)
in eval (t, e', k)
end
| eval (ABS t, e, k)
= k (FUNCT (t, e))
| eval (APP (t0, t1), e, k)
= eval (t0, e, fn (FUNCT (t, e'))
=&gt; eval (t,
(THUNK (t1, e)) :: e',
k))
(*
main : term -&gt; expval
*)
fun main t
= eval (t, nil, fn v =&gt; v)
end
The following proposition is a corollary of the correctness of the
CPS transformation. (Here observational equivalence reduces to
structural equality over ML values of type
expval
.)
P
ROPOSITION
2
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program,
Eval1.main p
Eval2.main p
2.1.4
Defunctionalizing the continuations
The function space of the continuation is inhabited by instances of
two

-abstractions: the initial one in the definition of
Eval2.main
,
with no free variables, and one in the meaning of an application,
with three free variables. To defunctionalize the continuation, we
thus define a data type
cont
with two summands and the corresponding
apply cont
function to interpret these summands.
structure Eval3
= struct
datatype denval = THUNK of term * denval list
and expval = FUNCT of term * denval list
and
cont = CONT0
| CONT1 of term * denval list * cont
(*
eval : term * denval list * cont -&gt; expval
*)
fun eval (IND n, e, k)
= let val (THUNK (t, e')) = List.nth (e, n)
in eval (t, e', k)
end
| eval (ABS t, e, k)
= apply_cont (k, FUNCT (t, e))
| eval (APP (t0, t1), e, k)
= eval (t0, e, CONT1 (t1, e, k))
and apply_cont (CONT0, v)
= v
| apply_cont (CONT1 (t1, e, k), FUNCT (t, e'))
= eval (t, (THUNK (t1, e)) :: e', k)
(*
main : term -&gt; expval
*)
fun main t
= eval (t, nil, CONT0)
end
The following proposition is a corollary of the correctness of defunctionalization
. (Again, observational equivalence reduces here
to structural equality over ML values of type
expval
.)
10
P
ROPOSITION
3
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program,
Eval2.main p
Eval3.main p
We identify that
cont
is a stack of thunks, and that the transitions
are those of Krivine's abstract machine.
2.1.5
Krivine's abstract machine
To obtain the canonical definition of Krivine's abstract machine, we
abandon the distinction between denotable and expressible values
and we use thunks instead, we represent the defunctionalized continuation
as a list of thunks instead of a data type, and we inline
apply cont
.
structure Eval4
= struct
datatype thunk = THUNK of term * thunk list
(*
eval : term * thunk list * thunk list
*)
(*
-&gt; term * thunk list
*)
fun eval (IND n, e, s)
= let val (THUNK (t, e')) = List.nth (e, n)
in eval (t, e', s)
end
| eval (ABS t, e, nil)
= (ABS t, e)
| eval (ABS t, e, (t', e') :: s)
= eval (t, (THUNK (t', e')) :: e, s)
| eval (APP (t0, t1), e, s)
= eval (t0, e, (t1, e) :: s)
(*
main : term -&gt; term * thunk list
*)
fun main t
= eval (t, nil, nil)
end
The following proposition is straightforward to prove.
P
ROPOSITION
4
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program,
Eval3.main p
Eval4.main p
For comparison with
Eval4
, the canonical definition of Krivine's
abstract machine is as follows [7, 22, 25], where t denotes terms, v
denotes expressible values, e denotes environments, and s denotes
stacks of expressible values:
¯
Source syntax:
t
::
n

t
t
0
t
1
¯
Expressible values (closures):
v
::
t e
¯
Initial transition, transition rules, and final transition:
t
µ
t nil nil
n e s
µ
t e
¼
s
where t e
¼
nth
´
e n
µ

t e t
¼
e
¼
:: s
µ
t t
¼
e
¼
:: e s
t
0
t
1
e s
µ
t
0
e t
1
e :: s

t e nil
µ
t e
Variables n are represented by their de Bruijn index, and the abstract
machine operates on triples consisting of a term, an environment,
and a stack of expressible values.
Each line in the canonical definition matches a clause in
Eval4
. We
conclude that Krivine's abstract machine can be seen as a defunctionalized
, CPS-transformed, and closure-converted version of the
standard call-by-name evaluator for the

-calculus. This evaluator
evidently implements Hardin, Maranget, and Pagano's K strategy
[24, Section 3].
2.2
From the CEK machine to a call-by-value
evaluator
The CEK machine [16, 17, 19] operates on

-terms with names and
distinguishes between values and computations in their syntax (i.e.,
it distinguishes trivial and serious terms, in Reynolds's words [31]).
datatype term = VALUE of value
| COMP of comp
and value = VAR of string
(* name *)
| LAM of string * term
and
comp = APP of term * term
Programs are closed terms.
2.2.1
The CEK abstract machine
Our starting point reads as follows [19, Figure 2, page 239], where
t denotes terms, w denotes values, v denotes expressible values, k
denotes evaluation contexts, and e denotes environments:
¯
Source syntax:
t
::
w
t
0
t
1
w
::
x

x t
¯
Expressible values (closures) and evaluation contexts:
v
::
x t e
k
::
stop
fun
´
v k
µ
arg
´
t e k
µ
¯
Initial transition, transition rules (two kinds), and final transition
:
t
µ
init
t mt
stop
w e k
µ
eval
k

´
w e
µ
t
0
t
1
e k
µ
eval
t
0
e
arg
´
t
1
e k
µ
arg
´
t
1
e k
µ
v
µ
cont
t
1
e
fun
´
v k
µ
fun
´
x t e k
µ
v
µ
cont
t e x
v k
stop
v
µ
final
v
where

´
x e
µ
e
´
x
µ

´

x t e
µ
x t e
Variables x are represented by their name, and the abstract machine
consists of two mutually recursive transition functions. The first
transition function operates on triples consisting of a term, an environment
, and an evaluation context. The second operates on pairs
consisting of an evaluation context and an expressible value. Environments
are extended in the
fun
-transition, and consulted in

. The
empty environment is denoted by mt.
This specification is straightforward to program in ML:
11
signature ENV
= sig
type 'a env
val mt : 'a env
val lookup : 'a env * string -&gt; 'a
val extend : string * 'a * 'a env -&gt; 'a env
end
Environments are represented as a structure
Env : ENV
containing
a representation of the empty environment
mt
, an operation
lookup
to retrieve the value bound to a name in an environment, and an
operation
extend
to extend an environment with a binding.
structure Eval0
= struct
datatype expval
= CLOSURE of string * term * expval Env.env
datatype ev_context
= STOP
| ARG of term * expval Env.env * ev_context
| FUN of expval * ev_context
(*
eval : term * expval Env.env * ev_context
*)
(*
-&gt; expval
*)
fun eval (VALUE v, e, k)
= continue (k, eval_value (v, e))
| eval (COMP (APP (t0, t1)), e, k)
= eval (t0, e, ARG (t1, e, k))
and eval_value (VAR x, e)
= Env.lookup (e, x)
| eval_value (LAM (x, t), e)
= CLOSURE (x, t, e)
and continue (STOP, w)
= w
| continue (ARG (t1, e, k), w)
= eval (t1, e, FUN (w, k))
| continue (FUN (CLOSURE (x, t, e), k), w)
= eval (t, Env.extend (x, w, e), k)
(*
main : term -&gt; expval
*)
fun main t
= eval (t, Env.mt, STOP)
end
2.2.2
Refunctionalizing the evaluation contexts into
continuations
We identify that the data type
ev context
and the function
continue
are a defunctionalized representation. The corresponding higher-order
evaluator reads as follows.
As can be observed, it is in
continuation-passing style.
structure Eval1
= struct
datatype expval
= CLOSURE of string * term * expval Env.env
(*
eval : term * expval Env.env * (expval -&gt; 'a)
*)
(*
-&gt; 'a
*)
fun eval (VALUE v, e, k)
= k (eval_value (v, e))
| eval (COMP (APP (t0, t1)), e, k)
= eval (t0, e,
fn (CLOSURE (x, t, e'))
=&gt; eval (t1, e,
fn w
=&gt; eval (t, Env.extend (x, w, e'),
k)))
and eval_value (VAR x, e)
= Env.lookup (e, x)
| eval_value (LAM (x, t), e)
= CLOSURE (x, t, e)
(*
main : term -&gt; expval
*)
fun main t
= eval (t, Env.mt, fn w =&gt; w)
end
The following proposition is a corollary of the correctness of defunctionalization
. (Observational equivalence reduces here to structural
equality over ML values of type
expval
.)
P
ROPOSITION
5
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program,
Eval0.main p
Eval1.main p
2.2.3
Back to direct style
CPS-transforming the following direct-style evaluator yields the
evaluator of Section 2.2.2 [10].
structure Eval2
= struct
datatype expval
= CLOSURE of string * term * expval Env.env
(*
eval : term * expval Env.env -&gt; expval
*)
fun eval (VALUE v, e)
= eval_value (v, e)
| eval (COMP (APP (t0, t1)), e)
= let val (CLOSURE (x, t, e')) = eval (t0, e)
val w = eval (t1, e)
in eval (t, Env.extend (x, w, e'))
end
and eval_value (VAR x, e)
= Env.lookup (e, x)
| eval_value (LAM (x, t), e)
= CLOSURE (x, t, e)
(*
main : term -&gt; expval
*)
fun main t
= eval (t, Env.mt)
end
The following proposition is a corollary of the correctness of the
direct-style transformation. (Again, observational equivalence reduces
here to structural equality over ML values of type
expval
.)
P
ROPOSITION
6
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program,
Eval1.main p
Eval2.main p
2.2.4
From closures to higher-order functions
We observe that the closures, in
Eval2
, are defunctionalized representations
with an apply function inlined. The corresponding
higher-order evaluator reads as follows.
structure Eval3
= struct
datatype expval = CLOSURE of expval -&gt; expval
(*
eval : term * expval Env.env -&gt; expval
*)
fun eval (VALUE v, e)
= eval_value (v, e)
12
| eval (COMP (APP (t0, t1)), e)
= let val (CLOSURE f) = eval (t0, e)
val w = eval (t1, e)
in f w
end
and eval_value (VAR x, e)
= Env.lookup (e, x)
| eval_value (LAM (x, t), e)
= CLOSURE (fn w
=&gt; eval (t, Env.extend (x, w, e)))
(*
main : term -&gt; expval
*)
fun main t
= eval (t, Env.mt)
end
The following proposition is a corollary of the correctness of defunctionalization
.
P
ROPOSITION
7
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program, evaluating
Eval2.main p
yields a value
CLOSURE (x, t, e)
and evaluating
Eval3.main p
yields a value
CLOSURE f
such that
fn w =&gt; Eval2.eval (t, Env.extend (x, w, e))
f
2.2.5
A higher-order and compositional call-by-value
evaluator
The result in
Eval3
is a call-by-value evaluator that is compositional
and higher-order. This call-by-value evaluator is the canonical
one for the

-calculus [31, 35, 37]. We conclude that the CEK
machine can be seen as a defunctionalized, CPS-transformed, and
closure-converted version of the standard call-by-value evaluator
for

-terms.
2.3
Variants of Krivine's machine and of the
CEK machine
It is easy to construct a variant of Krivine's abstract machine for

terms
with names, by starting from a call-by-name evaluator for

-terms with names. Similarly, it is easy to construct a variant
of the CEK machine for

-terms with de Bruijn indices, by starting
from a call-by-value evaluator for

-terms with indices. It is
equally easy to start from a call-by-value evaluator for

-terms with
de Bruijn indices and no distinction between values and computations
; the resulting abstract machine coincides with Hankin's eager
machine [22, Section 8.1.2].
Abstract machines processing

-terms with de Bruijn indices often
resolve indices with transitions:
0 v :: e s
µ
v :: s
n
·
1 v :: e s
µ
n e s
Compared to the evaluator of Section 2.1.1, the evaluator corresponding
to this machine has
List.nth
inlined and is not compositional
:
fun eval (IND 0, denval :: e, s)
= ... denval ...
| eval (IND n, denval :: e, s)
= eval (IND (n - 1), e, s)
| ...
2.4
Conclusion
We have shown that Krivine's abstract machine and the CEK abstract
machine are counterparts of canonical evaluators for call-by-name
and for call-by-value

-terms, respectively. The derivation of
Krivine's machine is strikingly simpler than what can be found in
the literature. That the CEK machine can be derived is, to the best
of our knowledge, new. That these two machines are two sides of
the same coin is also new. We have not explored any other aspect
of this call-by-name/call-by-value duality [9].
Using substitutions instead of environments or inlining one of the
standard computational monads (state, continuations, etc. [39]) in
the call-by-value evaluator yields variants of the CEK machine that
have been documented in the literature [16, Chapter 8]. For example
, inlining the state monad in a monadic evaluator yields a
state-passing evaluator. The corresponding abstract machine has
one more component to represent the state. In general, inlining
monads provides a generic recipe to construct arbitrarily many new
abstract machines. It does not seem as straightforward, however, to
construct a "monadic abstract machine" and then to inline a monad;
we are currently studying the issue.
On another note, one can consider an evaluator for strictness-annotated

-terms--represented either with names or with indices,
and with or without distinction between values and computations.
One is then led to an abstract machine that generalizes Krivine's
machine and the CEK machine [13].
Finally, it is straightforward to extend Krivine's machine and the
CEK machine to bigger source languages (with literals, primitive
operations, conditional expressions, block structure, recursion,
etc.), by starting from evaluators for these bigger languages. For
example, all the abstract machines in "The essence of compiling
with continuations" [19] are defunctionalized continuation-passing
evaluators, i.e., interpreters.
In the rest of this article, we illustrate further the correspondence
between evaluators and abstract machines.
The CLS abstract machine
The CLS abstract machine is due to Hannan and Miller [23]. In the
following, t denotes terms, v denotes expressible values, c denotes
lists of directives (a term or the special tag
ap
), e denotes environments
, l denotes stacks of environments, and s denotes stacks of
expressible values.
¯
Source syntax:
t
::
n

t
t
0
t
1
¯
Expressible values (closures):
v
::
t e
¯
Initial transition, transition rules, and final transition:
t
µ
t :: nil nil :: nil nil

t :: c e :: l s
µ
c l t e :: s
´
t
0
t
1
µ
:: c e :: l s
µ
t
0
:: t
1
::
ap
:: c e :: e :: l s
0 :: c
´
v :: e
µ
:: l s
µ
c l v :: s
n
·
1 :: c
´
v :: e
µ
:: l s
µ
n :: c e :: l s
ap
:: c l v :: t e :: s
µ
t :: c
´
v :: e
µ
:: l s
nil nil v :: s
µ
v
13
Variables n are represented by their de Bruijn index, and the abstract
machine operates on triples consisting of a list of directives, a stack
of environments, and a stack of expressible values.
3.1
The CLS machine
Hannan and Miller's specification is straightforward to program in
ML:
datatype term = IND of int
(* de Bruijn index *)
| ABS of term
| APP of term * term
Programs are closed terms.
structure Eval0
= struct
datatype directive = TERM of term
| AP
datatype env = ENV of expval list
and expval = CLOSURE of term * env
(*
run : directive list * env list * expval list
*)
(*
-&gt; expval
*)
fun run (nil, nil, v :: s)
= v
| run ((TERM (IND 0)) :: c, (ENV (v :: e)) :: l, s)
= run (c, l, v :: s)
| run ((TERM (IND n)) :: c, (ENV (v :: e)) :: l, s)
= run ((TERM (IND (n - 1))) :: c,
(ENV e) :: l,
s)
| run ((TERM (ABS t)) :: c, e :: l, s)
= run (c, l, (CLOSURE (t, e)) :: s)
| run ((TERM (APP (t0, t1))) :: c, e :: l, s)
= run ((TERM t0) :: (TERM t1) :: AP :: c,
e :: e :: l,
s)
| run (AP :: c, l, v :: (CLOSURE (t, ENV e)) :: s)
= run ((TERM t) :: c, (ENV (v :: e)) :: l, s)
(*
main : term -&gt; expval *)
fun main t
= run ((TERM t) :: nil, (ENV nil) :: nil, nil)
end
3.2
A disentangled definition of the CLS machine
In the definition of Section 3.1, all the possible transitions are
meshed together in one recursive function,
run
. Instead, let us factor
run
into several mutually recursive functions, each of them with
one induction variable.
In this disentangled definition,
¯
run c
interprets the list of control directives, i.e., it specifies
which transition to take if the list is empty, starts with a term,
or starts with an apply directive. If the list is empty, the computation
terminates. If the list starts with a term,
run t
is
called, caching the term in the first parameter. If the list starts
with an apply directive,
run a
is called.
¯
run t
interprets the top term in the list of control directives.
¯
run a
interprets the top value in the current stack.
The disentangled definition reads as follows:
structure Eval1
= struct
datatype directive = TERM of term
| AP
datatype env = ENV of expval list
and expval = CLOSURE of term * env
(*
run_c : directive list * env list * expval list
*)
(*
-&gt; expval
*)
fun run_c (nil, nil, v :: s)
= v
| run_c ((TERM t) :: c, l, s)
= run_t (t, c, l, s)
| run_c (AP :: c, l, s)
= run_a (c, l, s)
and run_t (IND 0, c, (ENV (v :: e)) :: l, s)
= run_c (c, l, v :: s)
| run_t (IND n, c, (ENV (v :: e)) :: l, s)
= run_t (IND (n - 1), c, (ENV e) :: l, s)
| run_t (ABS t, c, e :: l, s)
= run_c (c, l, (CLOSURE (t, e)) :: s)
| run_t (APP (t0, t1), c, e :: l, s)
= run_t (t0,
(TERM t1) :: AP :: c,
e :: e :: l,
s)
and run_a (c, l, v :: (CLOSURE (t, ENV e)) :: s)
= run_t (t, c, (ENV (v :: e)) :: l, s)
(*
main : term -&gt; expval
*)
fun main t
= run_t (t, nil, (ENV nil) :: nil, nil)
end
P
ROPOSITION
8
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program,
Eval0.main p
Eval1.main p
P
ROOF
. By fold-unfold [5]. The invariants are as follows. For any
ML values
t : term
,
e : expval list
, and
s : expval list
,
Eval1.run c (c, l, s)
Eval0.run (c, l, s)
Eval1.run t (t, c, l, s)
Eval0.run ((TERM t) :: c, l, s)
Eval1.run a (c, l, s)
Eval0.run (AP :: c, l, s)
3.3
The evaluator corresponding to the CLS
machine
In the disentangled definition of Section 3.2, there are three possible
ways to construct a list of control directives (nil, cons'ing a term,
and cons'ing an apply directive). We could specify these constructions
as a data type rather than as a list. Such a data type, together
with
run c
, is in the image of defunctionalization (
run c
is the apply
functions of the data type). The corresponding higher-order evaluator
is in continuation-passing style. Transforming it back to direct
style yields the following evaluator:
structure Eval3
= struct
datatype env = ENV of expval list
and expval = CLOSURE of term * env
(*
run_t : term * env list * expval list
*)
(*
-&gt; env list * expval list
*)
fun run_t (IND 0, (ENV (v :: e)) :: l, s)
= (l, v :: s)
| run_t (IND n, (ENV (v :: e)) :: l, s)
= run_t (IND (n - 1), (ENV e) :: l, s)
| run_t (ABS t, e :: l, s)
= (l, (CLOSURE (t, e)) :: s)
14
| run_t (APP (t0, t1), e :: l, s)
= let val (l, s) = run_t (t0, e :: e :: l, s)
val (l, s) = run_t (t1, l, s)
in run_a (l, s)
end
and run_a (l, v :: (CLOSURE (t, ENV e)) :: s)
= run_t (t, (ENV (v :: e)) :: l, s)
(*
main : term -&gt; expval *)
fun main t
= let val (nil, v :: s)
= run_t (t, (ENV nil) :: nil, nil)
in v
end
end
The following proposition is a corollary of the correctness of defunctionalization
and of the CPS transformation. (Here observational
equivalence reduces to structural equality over ML values of
type
expval
.)
P
ROPOSITION
9
(
FULL CORRECTNESS
).
For any ML value
p : term
denoting a program,
Eval1.main p
Eval3.main p
As in Section 2, this evaluator can be made compositional by refunctionalizing
the closures into higher-order functions and by factoring
the resolution of de Bruijn indices into an auxiliary lookup
function.
We conclude that the evaluation model embodied in the CLS machine
is a call-by-value interpreter threading a stack of environments
and a stack of intermediate results with a caller-save strategy
(witness the duplication of environments on the stack in the meaning
of applications) and with a left-to-right evaluation of sub-terms.
In particular, the meaning of a term is a partial endofunction over a
stack of environments an