Modelling Adversaries and Security Objectives for Routing Protocols in Wireless Sensor Networks
ABSTRACT
The literature is very broad considering routing protocols
in wireless sensor networks (WSNs). However, security of
these routing protocols has fallen beyond the scope so far.
Routing is a fundamental functionality in wireless networks,
thus hostile interventions aiming to disrupt and degrade the
routing service have a serious impact on the overall operation
of the entire network. In order to analyze the security of
routing protocols in a precise and rigorous way, we propose
a formal framework encompassing the definition of an adversary
model as well as the "general" definition of secure routing
in sensor networks. Both definitions take into account
the feasible goals and capabilities of an adversary in sensor
environments and the variety of sensor routing protocols. In
spirit, our formal model is based on the simulation paradigm
that is a successfully used technique to prove the security of
various cryptographic protocols. However, we also highlight
some differences between our model and other models that
have been proposed for wired or wireless networks. Finally,
we illustrate the practical usage of our model by presenting
the formal description of a simple attack against an authenticated
routing protocol, which is based on the well-known
TinyOS routing.
Categories and Subject Descriptors
C.2.2 [Computer Systems Organization]: Computer-Communication
Networks--Network Protocols
General Terms
Algorithms, Design, Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
SASN'06, October 30, 2006, Alexandria, Virginia, USA.
Copyright 2006 ACM 1-59593-554-1/06/0010 ...
$
5.00.

INTRODUCTION
Routing is a fundamental function in every network that
is based on multi-hop communications, and wireless sensor
networks are no exceptions.
Consequently, a multitude
of routing protocols have been proposed for sensor
networks in the recent past. However, most of these protocols
have not been designed with security requirements in
mind. This means that they can badly fail in hostile environments
. Paradoxically, research on wireless sensor networks
have been mainly fuelled by their potential applications in
military settings where the environment is hostile. The natural
question that may arise is why then security of routing
protocols for sensor networks has fallen beyond the scope of
research so far.
We believe that one important reason for this situation
is that the design principles of secure routing protocols for
wireless sensor networks are poorly understood today. First
of all, there is no clear definition of what secure routing
should mean in this context. Instead, the usual approach,
exemplified in [10], is to list different types of possible attacks
against routing in wireless sensor networks, and to
define routing security implicitly as resistance to (some of)
these attacks. However, there are several problems with this
approach. For instance, a given protocol may resist a different
set of attacks than another one. How to compare these
protocols? Shall we call them both secure routing protocols
? Or on what grounds should we declare one protocol
more secure than another? Another problem is that it is
quite difficult to carry out a rigorous analysis when only a
list of potential attack types are given. How can we be sure
that all possible attacks of a given type has been considered
in the analysis? It is not surprising that when having such
a vague idea about what to achieve, one cannot develop the
necessary design principles. It is possible to come up instead
with some countermeasures, similar to the ones described in
[10], which are potentially usefully to thwart some specific
types of attacks, but it remains unclear how to put these
ingredients together in order to obtain a secure and efficient
routing protocol at the end.
In order to remedy this situation, we propose to base the
design of secure routing protocols for wireless sensor networks
on a formal security model.
While the benefit of
formal models is not always clear (indeed, in some cases,
they tend to be overly complicated compared to what they
achieve), we have already demonstrated their advantages
in the context of ad hoc network routing protocols. More
specifically, we developed formal security models in [4, 1, 2],
and we successfully used them to prove the security of some
49
ad hoc network routing protocols, and to find security holes
in others. The idea here is to use the same approach in the
context of wireless sensor networks. The rationale is that
routing protocols in sensor networks are somewhat similar
to those in ad hoc networks, hence they have similar pitfalls
and they can be modeled in a similar way.
Thus, in this paper, we present a formal model, in which
security of routing is precisely defined, and which can serve
as the basis for rigorous security analysis of routing protocols
proposed for wireless sensor networks. Our model is based
on the simulation paradigm, where security is defined in
terms of indistinguishability between an ideal-world model
of the system (where certain attacks are not possible by
definition) and the real-world model of the system (where
the adversary is not constrained, except that he must run in
time polynomial). This is a standard approach for defining
security, however, it must be adopted carefully to the specific
environment of wireless sensor networks.
Similar to [4], in this paper, we develop an adversary
model that is different from the standard Dolev-Yao model,
where the adversary can control all communications in the
system. In wireless sensor networks, the adversary uses wireless
devices to attack the systems, and it is more reasonable
to assume that the adversary can interfere with communications
only within its power range. In addition, we must
also model the broadcast nature of radio communications.
However, in addition to the model described in [4], here
we take into account that there are some attacks which exploit
the constraint energy supply of sensor nodes (e.g., the
adversary decreases the network lifetime by diverting the
traffic in order to overload, and thus, deplete some sensor
nodes). Hence, we explicitly model the energy consumption
caused by sending a message between each pair of nodes in
the network.
Another difference with respect to the model of [4] lies in
the definition of the outputs of the ideal-world and the real-world
models. It is tempting to consider the state stored
in the routing tables of the nodes as the output, but an
adversary can distort that state in unavoidable ways. This
means that if we based our definition of security on the indistinguishability
of the routing states in the ideal-world and
in the real-world models, then no routing protocol would
satisfy it. Hence, we define the output of the models as a
suitable function of the routing state, which hides the unavoidable
distortions in the states. This function may be different
for different types of routing protocols, but the general
approach of comparing the outputs of this function in the
ideal-world and in the real-world models remain the same.
For instance, this function could be the average length of the
shortest pathes between the sensor nodes and the base station
; then, even if the routing tables of the nodes would not
always be the same in the ideal-world and in the real-world
models, the protocol would still be secure given that the
difference between the distributions of the average length of
the shortest pathes in the two models is negligibly small.
The rest of the paper is organized as follows: In Section 2,
we present the elements of our formal model, which includes
the presentation of the adversary model adopted to wireless
sensor networks, the description of the ideal-world and the
real-world models, the general definition of the output of
these models, as well as the definition of routing security.
Then, in Section 3, we illustrate the usage of our model by
representing in it a known insecurity of an authenticated
version of the TinyOS routing protocol.
Finally, in Section
4, we report on some related work, and in Section 5, we
conclude the paper.
We must note that the work described in this paper is a
work in progress, and it should be considered as such. In
particular, the reader will not find security proofs in this
paper. There are two reasons for this: first, we are still
developing the proof techniques, and second, we have not
identified yet any routing protocols that would be secure in
our model.
THE MODEL OF WIRELESS SENSOR NETWORKS
The adversary is represented by adversarial nodes in the
network. An adversarial node can correspond to an ordinary
sensor node, or a more resourced laptop-class device.
In the former case, the adversary may deploy some corrupted
sensor-class devices or may capture some honest sensor
nodes. In the latter case, he has a laptop-class device
with a powerful antenna and unconstrained energy supply.
All of these adversarial nodes may be able to communicate in
out-of-band channels (e.g., other frequency channel or direct
wired connection), which may be used to create wormholes.
In general, when capturing honest sensor nodes, the adversary
may be able to compromise their cryptographic secrets
(assuming that such secrets are used in the system).
However, in this paper, we assume that the adversary cannot
compromise cryptographic material. This is certainly
a simplifying assumption, and we intend to relax it in our
future work.
The adversary attacking the routing protocol primarily
intends to shorten the network lifetime, degrade the packet
delivery ratio, increase his control over traffic, and increase
network delay. Some of these goals are highly correlated;
e.g., increasing hostile control over traffic may also cause
the network delay to be increased.
In order to achieve the aforementioned goals, the adversary
is able to perform simple message manipulations: fab-ricated
message injection, message deletion, message modification
and re-ordering of message sequences. In the followings
, we describe how the adversary can perform message
deletion and injection in a wireless sensor network.
Re-ordering of message sequences is straightforward using
message deletion and insertion, thus, we do not elaborate it
further.
Basically, an adversarial node can affect the communication
of two honest nodes in two cases: In the first case, an adversarial
node relays messages between honest nodes which
are not able to communicate directly with each other. In
the second case, the honest nodes can also reach each other,
and the adversarial node can also hear the nodes' communication
, i.e., he can send and receive messages to/from both
honest nodes. We further assume that communication range
implies interference range, and vice-versa.
In case of adversarial relaying of messages between the
nodes, all of the message manipulations are quite straightforward
. On the contrary, if the honest nodes can also communicate
with each other, message manipulations must be
performed in a very sophisticated way. The adversarial node
can inject messages easily, but deletion and modification re-50
quire jamming capability. Message deletion may be achieved
by employing various selective jamming techniques against
either the sender node or the receiver node. Message modification
is only feasible, if both the sender and the receiver
nodes are within the communication range of the adversarial
node. Here, we sketch two scenarios for message modification
, which are illustrated on Figure 1.
By these simple
examples, we intend to point out the feasibility of message
modification assuming even direct communication between
the sender and the receiver node.
Scenario 1: There are two honest nodes X and Y , and
node X intends to send a message m to node Y . A
1
and A
2
are adversarial nodes, where A
2
is able to interfere with Y 's
communication, but not with X's and A
1
's communication.
Let A
1
be in the communication range of X and Y , whereas
A
2
can only communicate with Y . When X transmits m to
Y , node A
1
overhears m, meanwhile A
2
performs jamming
to cause Y not to be able to receive m. In order to take
this action, A
1
and A
2
are connected by an out-of-band
channel, thus, A
1
can send a signal to A
2
when A
2
should
start jamming Y 's communication. It is also feasible that
A
2
performs constant jamming for a certain amount of time,
afterwards, A
1
can send the modified message m to Y .
Scenario 2: In this scenario, there is only one adversarial
node denoted by A. We assume that transmitting a message
from the routing sublayer consists of passing the message to
the data-link layer, which, after processing the message, also
passes it further to the physical layer. The data-link layer
uses CRC in order to provide some protection against faults
in noisy channels; a sender generally appends a frame check
sequence to each frame (e.g., see [7]). The adversary can
exploit this CRC mechanism to modify a message in the
following way (illustrated on Figure 1). When X transmits
message m to Y , node A also overhears m, in particular,
he can see the frame(s) belonging to m. A intends to modify
message m. Here, we must note that most messages
originated from the routing sublayer are composed of only
one frame per message in the data-link layer due to performance
reasons, especially when they are used to discover
routing topology. Upon reception of the frame corresponding
to the message, the adversary can corrupt the frame
check sequence by jamming once the data field of the frame
has been received. This causes node Y to drop the frame
(and the message), since Y detects that the last frame is incorrect
, and waits for retransmission. At this point, if some
acknowledgement mechanism is in use, A should send an acknowledgement
to X so that it does not re-send the original
frame. In addition, A retransmits message m in the name
of X, where m is the modified message.
The feasibility of jamming attacks is studied and demonstrated
in [17]. Although, the authors conclude in that paper
that the success of jamming attacks mainly depend on the
distance of the honest nodes and the jammer node, various
jamming techniques has been presented there that can
severely interfere with the normal operation of the network.
2.2
Network model
We assume that each honest device has exactly one antenna
in the network. If the adversary uses several antennas
we represent each of them by a distinct node. The network
nodes are considered to be static, and we further assume
that there is a single base station in the network.
Let us denote the honest nodes in the network by
v
0
, v
1
, . . . , v
k
, where v
0
denotes the base station. Similarly,
v
k+1
, . . . , v
k+m
represent the adversarial nodes. The set of
all nodes is denoted by V . Furthermore, n denotes the number
of all nodes in the network, i.e., n = |V | = k + m + 1.
For each pair of nodes v
i
and v
j
, we define e
v
i
,v
j
to be the
energy level needed to transmit a message from v
i
to v
j
,
where v
i
, v
j
V . This values can be ordered in a matrix
with size n × n, called reachability matrix, and it is denoted
by E.
1
In the rest, if we intend to emphasize the distinction
between the honest and the adversarial nodes in the notation
, we prefer to denote the adversarial nodes by v

1
, . . . , v

m
(where v

= v
k+
, 1
m).
For the sake of simplicity, we also assume that at least
energy e
v
i
,v
j
is needed for node v
i
to interfere with node
v
j
's packet reception. This means that if v
i
can reach v
j
,
then v
i
can also interfere with all the communication of v
j
.
Let us assume that each node uses a globally unique
identifier in the network, and these identifiers are authenticated
in some way (e.g., by symmetric keys).
We denote
the set of these identifiers by L, and there is a function
L : V  L  {undef} that assigns an identifier to
each node, where undef /
L. According to our adversary
model described in Subsection 2.1, we assume that the adversary
has no (authenticated) identifier in the network, i.e.,
L(v

j
) = undef for all 1
j  m.
We also introduce a cost function
C : V  R, which assigns
a cost to each node (e.g., the remaining energy in the
battery, or constant 1 to each node in order to represent
hop-count).
Configuration:
A configuration conf is a quadruple
(V, L, E, C) that consists of the set of nodes, the labelling
function, the reachability matrix, and the cost function of
nodes.
2.3
Security objective function
Diverse sensor applications entail different requirements
for routing protocols. For instance, remote surveillance applications
may require minimal delay for messages, while
sensor applications performing some statistical measurements
favour routing protocols prolonging network lifetime.
The diversity of routing protocols is caused by these conflicting
requirements: e.g., shortest-path routing algorithms
cannot maximize the network lifetime, since always choosing
the same nodes to forward messages causes these nodes to
run out of their energy supply sooner. Several sensor routing
protocols use a trade-off to satisfy conflicting requirements
[16, 11].
This small argument also points out that one cannot judge
the utility of all routing protocols uniformly. Without a unified
metric of utility we cannot refine our security objectives
for routing protocols. By the above argument, a routing
protocol that is secure against attacks aiming at decreasing
network-lifetime cannot be secure against attacks aiming at
increasing network delay. We model the negatively correlated
requirements of routing, and essentially, our security
objectives in a very general manner. We represent the output
of a routing protocol, which is actually the ensemble of
the routing entries of the honest nodes, with a given con-1
In this paper, the rows and the columns of all matrices are
numbered from zero.
51
Node X
Node A
2
Node A
1
Node Y
1: m
1: jam
1: m
2: m
Node X
Node Y
Node A
1: m
1: m
1: jam
2: m
Figure 1: Message modification performed by the cooperation of two adversarial nodes A
1
and A
2
(on the
right-hand side) in Scenario 1, and employing overhearing, jamming, and relaying with a single adversarial
node A (on the left-hand side) in Scenario 2. Honest nodes are labelled by X and Y . Arrows between nodes
illustrate the direction of communication, the sequence of message exchanges are also depicted on these
arrows. Dashed arrows illustrate failed message delivery caused by jamming.
figuration conf by a matrix T
conf
with size k + 1 × k + 1.
2
T
conf
i,j
= 1, if honest node v
i
sends every message to an honest
node identified by
L(v
j
) in order to deliver the message
to the base station, otherwise let T
conf
i,j
be 0. In the rest of
the paper, we shortly refer to the result of a routing protocol
with a given configuration as a routing topology, which can
be considered as a directed graph described by matrix T
conf
.
In the following, we will omit the index conf of T when the
configuration can be unambiguously determined in a given
context. In fact, T
conf
is a random variable, where the ran-domness
is caused by the sensor readings initiated randomly
by the environment, processing and transmission time of the
sensed data, etc.
Let us denote the set of all configurations by
G. Furthermore
,
T denotes the set of the routing topologies of all configurations
. The security objective function
F : G × T  R
assigns a real number to a random routing topology of a configuration
. This function intends to distinguish "attacked"
topologies from "non-attacked" topologies based on a well-defined
security objective. We note that the definition of
F
is protocol dependent. For example, let us consider routing
protocols that build a routing tree, where the root is
the base station. We can compare routing trees based on
network lifetime by the following security objective function
F(conf , T
conf
) = 1
k
k
X
i=1
E(v
i
, conf , T
conf
)
where
E : V × G × T  R assigns the overall energy consumption
of the path from a node v
i
to v
0
(the base station)
in a routing tree of a configuration. Since T
conf
is a random
variable, the output of
F is a random variable too. If the
distribution of this output in the presence of an attacker
non-negligibly differs from the distribution when there's no
attacker, then the protocol is not secure. If we intend to
compare routing trees based on network delay a simple security
objective function may be
F(conf , T
conf
) = 1
k
k
X
i=1
M(v
i
, conf , T
conf
)
where
M : V × G × T  R assigns the length of the path
from a node to v
0
in a routing topology of a configuration.
2
Of course, here we only consider the result of the protocol
with respect to the honest nodes, since the adversarial nodes
may not follow the protocol rules faithfully.
2.4
Dynamic model
Following the simulation paradigm, we define a real-world
model and an ideal-world model. The real-world model represents
the real operation of the protocol and the ideal-world
model describes how the system should work ideally. Both
models contain an adversary. The real-world adversary is
not constrained apart from requiring it to run in time polynomial
. This enables us to be concerned with arbitrary feasible
attacks. In addition, the ideal-world adversary is constrained
in a way that it cannot modify messages and inject
extra ones due to the construction of the ideal-world system
. In other words, all attacks that modify or inject any
messages is unsuccessful in the ideal-world system. However
, the ideal-world adversary can perform attacks that are
unavoidable or very costly to defend against (e.g., message
deletion).
Once the models are defined, the goal is to prove that
for any real-world adversary, there exist an ideal-world adversary
that can achieve essentially the same effects in the
ideal-world model as those achieved by the real-world adversary
in the real-world model (i.e., the ideal-world adversary
can simulate the real-world adversary).
2.4.1
Real-world model
The real-world model that corresponds to a configuration
conf = (V, L, E, C) and adversary A is denoted by sys
real
conf ,A
,
and it is illustrated on Figure 2. We model the operation
of the protocol participants by interactive and probabilistic
Turing machines. Correspondingly, we represent the adversary
, the honest sensor nodes, and the broadcast nature of
the radio communication by machines A, M
i
, and C, respectively
. These machines communicate with each other
via common tapes.
Each machine must be initialized with some input data
(e.g., cryptographic keys, reachability matrix, etc.), which
determines its initial state. Moreover, the machines are also
provided with some random input (the coin flips to be used
during the operation). Once the machines have been initialized
, the computation begins. The machines operate in
a reactive manner, i.e., they need to be activated in order
to perform some computation.
When a machine is activated
, it reads the content of its input tapes, processes the
received data, updates its internal state, writes some output
on its output tapes, and goes back to sleep. The machines
are activated in rounds by a hypothetic scheduler, and each
machine in each round is activated only once. The order of
activation is arbitrary with the only restriction that C must
be activated at the end of the rounds.
52
Now, we present the machines in more details:
· Machine C. This machine is intended to model the radio
communication. It has input tapes out
i
and out
j
,
from which it reads messages written by M
i
and A,
resp. It also has output tapes in
i
and in
j
, on which it
writes messages to M
i
and A, resp. C is also initialized
by matrix E at the beginning of the computation.
Messages
on
tape
out
i
can
have
the
format
(
sndr
, cont , e, dest), where
sndr
L is the identifier of
the sender, cont is the message content, e is the energy
level to be used to determine the range of transmission,
and dest is the identifier of the intended destination
dest
L  {}, where  indicates broadcast message.
Messages on tape out
j
can have the following formats:
­ (MSG,
sndr
, cont, e, dest ): MSG message models a
normal broadcast message sent by the adversary
to machine C with sender identifier
sndr
L,
message content cont , energy level e, and identifier
of the intended destination dest
L  {}.
­ (JAM, e): Special JAM message, that is sent by
the adversary to machine C, models the jamming
capability of the adversary. When machine C receives
a message JAM, it performs the requested
jamming by deleting all messages in the indicated
range e around the jamming node, which
means that those deleted messages are not delivered
to the nodes (including the jammer node
itself) within the jamming range.
­ (DEL,
tar
, e): Special DEL message, that is sent
by the adversary to machine C, models the modification
capability of the adversary. When receiving
a message DEL with identifier
tar
L,
machine C does not deliver any messages sent by
node v
V , where L(v ) =
tar
, if v is within
the indicated range e, except the adversarial node
itself that will receive the deleted messages. This
models the sophisticated jamming technique that
we described in Subsection 2.1.
In a more formal way, when reading a message msg
in
=
(MSG,
sndr
, cont, e, dest) from out
j
, C determines the
nodes which receive the message by calculating the set
of nodes V
e
V , such that for all v  V
e
e
v
j
,v
e.
Finally, C processes msg
in
as follows.
1. if dest
L  {}, then C writes
­ msg
out
= (
sndr
, cont, dest ) to the input tapes
of machines corresponding to honest nodes in
V
e
­ msg
out
= (MSG,
sndr
, cont, dest ) to the input
tapes of machines corresponding to adversarial
nodes in V
e
\ {v

j
}
2. otherwise C discards msg
in
When reading a message msg
in
= (JAM, e) from out
j
,
C determines the set of nodes which receive the message
by calculating V
e
V , such that for all v  V
e
e
v
j
,v
e. Afterwards, C does not write any messages
within the same round to the input tapes of machines
corresponding to V
e
.
When reading a message msg
in
= (DEL,
tar
, e) from
out
j
, C determines the set of nodes which receive the
message by calculating V
e
V , such that for all v
V
e
e
v
j
,v
e. Finally, C processes msg
in
as follows.
1. if there exists v
x
V
e
(1
x  k), such that
L(v
x
) =
tar
, then C does not write any messages
within the same round from tape out
x
to the input
tapes of machines corresponding to V
e
\ {v

j
}
2. otherwise C discards msg
in
When reading a message msg
in
= (
sndr
, cont, e, dest )
from out
i
, C determines the set of nodes which receive
the message by calculating V
e
V , such that for
all v  V
e
e
v
j
,v
e. Finally, C processes msg
in
as
follows.
1. if dest
L  {}, then C writes
­ msg
out
= (
sndr
, cont, dest) to the input tapes
of machines corresponding to honest nodes in
V
e
\ {v
i
}
­ msg
out
= (MSG,
sndr
, cont, dest ) to the input
tapes of machines corresponding to adversarial
nodes in V
e
2. otherwise C discards msg
in
· Machine M
i
. This machine models the operation of
honest sensor nodes, and it corresponds to node v
i
.
It has input tape in
i
and output tape out
i
, which
are shared with machine C.
The format of input
messages must be (
sndr
, cont, dest ), where dest
L  {}.
The format of output messages must be
(
sndr
, cont, e, dest ), where
sndr
must be
L(v
i
), dest

L  {}, and e indicates the transmission range of the
message for C. When this machine reaches one of its
final states or there is a time-out during the computation
process, it outputs its routing table.
· Machine A. This machine models the adversary logic.
Encapsulating each adversarial node into a single machine
allows us to model wormholes inside A. One can
imagine that the adversary deploy several antennas in
the network field, which are connected to a central adversary
logic. In this convention, node v

j
corresponds
to an adversarial antenna, which is modelled by input
tape in
j
and output tape out
j
. These tapes are shared
with machine C.
The format of input messages must be msg
in
=
(MSG,
sndr
, cont , e, dest), where dest  L  {}.
The format of output messages msg
out
can be
­ (MSG,
sndr
, cont, e, dest), where dest  L  {}
and e indicates the transmission range of the message
;
­ (JAM, e), where e indicates the range of jamming;
­ (DEL,
tar
, e), where e indicates the range of selective
jamming, and
tar
L.
The computation ends, when all machines M
i
reach their
final states, or there is a time-out. The output of sys
real
conf ,A
is the value of the security objective function
F applied to
the resulted routing topology defined in Subsection 2.3 and
configuration conf . The routing topology is represented by
53
C
M
0
...
in
0
out
0
in
1
out
1
in
2
out
2
A
M
1
out
1
in
1
M
k
out
k
in
k
in
m
out
m
...
C
M
0
...
in
0
out
0
in
1
out
1
in
2
out
2
M
1
out
1
in
1
M
k
out
k
in
k
in
m
out
m
...
A
Figure 2: The real-world model (on the left-hand side) and the ideal-world model (on the right-hand side).
the ensemble of the routing entries of machines M
i
. We
denote the output by Out
real,F
conf ,A
(r), where r is the random
input of the model. In addition, Out
real,F
conf ,A
will denote the
random variable describing Out
real,F
conf ,A
(r) when r is chosen
uniformly at random.
2.4.2
Ideal-world model
The ideal-world model (illustrated on Figure 2) that corresponds
to a configuration conf = (V, L, E, C) and adversary
A is denoted by sys
ideal
conf ,A
. The ideal-world model is identical
to the real-world model with the exception that the
ideal-world adversary cannot modify and inject extra messages
. However, he is allowed to simply drop any messages
or perform jamming, since these attacks are unavoidable, or
at least, they are too costly to defend against. Our model
is considered to be ideal in this sense. Comparing to the
real-world model, we replace machine C with machine C
and machine A with machine A in order to implement our
restricted ideal-world adversary. Hence, we only detail the
operation of C and A here, since M
i
are the same as in the
real-world model.
Receiving an MSG message from machines M
i
, C internally
stores that message with a unique message identifier
in its internal store. Delivering any MSG message to A ,
C also includes the message identifier into the message. A
can send an MSG message to C with a different format; it
only contains an identifier id and an energy level e. Upon
the reception of such a message, C searches for the original
message which is associated with identifier id in its internal
store, and delivers this stored message using the energy level
e. Although A also receives the original message with its
associated identifier from C , he is not able to modify that,
since C only accepts a message identifier issued by himself
and an energy level from A . In other words, A can only
delete messages, since A can also send special DEL and JAM
messages to C . We elaborate the operation of C and A in
a more formal way as follows.
A and C communicate via tapes in
j
and out
j
.
· Machine C . It has input tapes out
i
and out
j
, from
which it reads messages written by M
i
and A, resp. It
also has output tapes in
i
and in
j
, on which it writes
messages to M
i
and A, resp. C is also initialized by
matrix E. In addition, it sets its internal variable id
C
to 1 at the beginning of the computation.
C interacts with machines M
i
in a similar way as C
does in the real-world model; when reading a message
msg
in
= (
sndr
, cont, e, dest ) from out
i
, C processes
msg
in
identically to C in the real-world model
only with one exception:
Before writing msg
in
=
(MSG, id
C
,
sndr
, cont, dest) to output tapes in
j
, C
internally stores msg
in
in set S. After writing msg
in
to output tapes in
j
, C increments id
C
by one. Therefore
, C knows what messages are passed to A from M
i
.
Messages on out
j
can have the formats:
­ (MSG, id, e):
MSG message models a normal
broadcast message sent by the ideal-world adversary
to machine C , where e indicates the transmission
range of the message identified by id.
­ (JAM, e): Special JAM message, that is sent by
the adversary to machine C, models the jamming
capability of the ideal-world adversary, where e
indicates the range of jamming.
­ (DEL,
tar
, e): Special DEL message, that is sent
by the