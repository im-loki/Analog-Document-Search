Modeling
ABSTRACT
Object-oriented software development practices are being 
rapidly adopted within increasingly complex systems, including 
reactive, real-time and concurrent system applications. While 
data modeling is performed very well under current object-oriented
development practices, behavioral modeling necessary 
to capture critical information in real-time, reactive, and 
concurrent systems is often lacking.  Addressing this deficiency, 
we offer an approach for modeling and analyzing concurrent 
object-oriented software designs through the use of behavioral 
design patterns, allowing us to map stereotyped UML objects to 
colored Petri net (CPN) representations in the form of reusable 
templates.  The resulting CPNs are then used to model and 
analyze behavioral properties of the software architecture, 
applying the results of the analysis to the original software 
design.
Categories and Subject Descriptors
D.2.2 [Software Engineering]: Design Tools and Techniques ­ 
Object-oriented design methods, Petri nets.

General Terms
Performance, Design, Reliability

Introduction
Object-oriented software development practices are being 
rapidly adopted within increasingly complex systems, including 
reactive, real-time and concurrent system applications.  In 
practice, though, object-oriented software design techniques are 
still predominantly focused on the creation of static class 
models.  Dynamic architectural models capturing the overall 
behavioral properties of the software system are often 
constructed using ad hoc techniques with little consideration 
given to the resulting performance or reliability implications 
until the project reaches implementation. Efforts to analyze
behavioral issues of these architectures occur through 
opportunistic rather than systematic approaches and are 
inherently cumbersome, unreliable, and unrepeatable. 
One means of improving the behavioral modeling capabilities of 
object-oriented architecture designs is to integrate formalisms 
with the object-oriented specifications.  Using this technique, 
object-oriented design artifacts are captured in a format such as 
the Unified Modeling Language (UML) [1], which is intuitive to 
the software architect.  The native object-oriented design is then 
augmented by integrating an underlying formal representation 
capable of providing the necessary analytical tools.  The 
particular method used in this research [2] is to integrate colored 
Petri nets (CPNs) [3] with object-oriented architecture designs 
captured in terms of UML communication diagrams.

Specifically, this paper will present a method to systematically 
translate a UML software architecture design into an underlying 
CPN model using a set of pre-defined CPN templates based on a 
set of object behavioral roles.  These behavioral roles are based 
on the object structuring criteria found in the COMET method 
[4], but are not dependent on any given method and are 
applicable across application domains.  This paper will also 
demonstrate some of the analytical benefits provided by 
constructing a CPN representation of the UML software 
architecture.  After a survey of related research, Section 2 
descries the concept of behavioral design pattern templates for 
modeling concurrent objects.  Section 3 discusses how we 
construct an overall CPN model of the concurrent software 
architecture by interconnecting the individual behavioral design 
pattern templates.  Section 4 describes the validation of the 
approach.
1.1

Related Research
There are many existing works dealing with the use of Petri nets 
for describing software behavior.  As they relate to this paper, 
the existing works can be broadly categorized into the modeling 
of software code and the modeling of software designs.  In this 
research, the focus is on improving reliability of object-oriented 
software designs rather than delaying detection to the software 
code.  In terms of object-oriented design, the related Petri net 
research can be categorized as new development methodologies 
[5-8]; object-oriented extensions to Petri nets [9-12]; and the 
integration of Petri nets with existing object-oriented 
methodologies [13-20].  Since one of the goals of this research 
effort is to provide a method that requires no additional tools or 
language constructs beyond those currently available for the 
UML and CPN definitions, this approach [2,21-25] falls into the 
last category of integrating Petri nets with existing 
methodologies.  The main features that distinguish this approach 
from other related works are a focus on the concurrent software
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that 
copies bear this notice and the full citation on the first page. To copy 
otherwise, or republish, to post on servers or to redistribute to lists, 
requires prior specific permission and/or a fee. 
ICSE'06, May 20­28, 2006, Shanghai, China.                                               
Copyright 2006 ACM 1-59593-085-X/06/0005...$5.00.
202
architecture design and the use of consistent, reusable CPN 
templates to model the behavior of concurrent objects and their 
interactions.  This paper also extends our more recent works 
[25] by specifically focusing on the behavioral design patterns 
of individual concurrent objects and applying these patterns to 
construct an underlying representation of the concurrent 
software design architecture.

Modeling Behavioral Design Patterns
To model concurrent object behavioral design patterns with 
CPNs, our approach starts with a concurrent software 
architecture model captured in UML.  For the construction of 
this architecture model, we identify a set of behavioral design 
patterns used to categorize the objects along with a set of 
specification requirements necessary to correctly model the 
concurrent behavior with the underlying CPN model.  Each of 
the identified behavioral design patterns then has a 
corresponding template, represented as a CPN segment, which is 
paired with the UML object and is instantiated to capture 
specific behavioral characteristics based on the object 
specifications.  The following sections describe the object 
architecture definition along with the concept of behavioral 
pattern templates for modeling concurrent objects.  Section 3 
will then discuss how we construct an overall CPN model of the 
concurrent object architecture by connecting the individual 
behavioral pattern templates.
2.1

Concurrent Object Modeling
Our approach uses a UML communication diagram to capture 
the concurrent software architecture.  Depending on the desired 
level of modeling, this architecture model can be constructed for 
an entire software system or for one or more individual 
subsystems.  This communication diagram contains a collection 
of concurrent (active) and passive objects along with the 
message communication that occurs between the objects.  Using 
our approach, objects within the concurrent software 
architecture are organized using the notion of components and 
connectors.  Under this paradigm, concurrent objects are treated 
as components that can be connected through passive message 
communication objects and entity objects.  In keeping with the 
COMET object structuring criteria, each object is assigned a 
UML stereotype to indicate its behavioral design pattern.  
Objects are broadly divided into application objects, which 
perform the work, and connector objects, which provide the 
means of communicating between application objects.  For 
application objects, we use six stereotyped behavioral design 
patterns as illustrated in Figure 1:  interface, entity, coordinator, 
state-dependent, timer, and algorithm.  Additionally, connector 
objects can take the roles of: queue, buffer, or buffer-with-response
, corresponding to asynchronous, synchronous, and 
return messages.  These patterns are not intended to be an 
exhaustive list, but rather are intended to represent sufficient 
variety to model concurrent systems across a wide range of 
domains while also allowing these patterns to be extended as 
necessary for future applications. 
The identification of stereotyped behavioral roles allows us to 
select a specific CPN template to model each object (further 
described in Section 3.2).  These behavioral stereotypes are 
generic across applications, so we also capture specific 
application information using the following tagged values:

Execution  Type.  Each object must be declared as either 
passive or concurrent and for concurrent objects, further 
specified to be asynchronous or periodic.

IO Mapping.  Input-output message pairings must be 
specified for each object

Communication Type.  Indicate whether message 
communication occurs through asynchronous or synchronous 
means.

Activation Time.  The period of activation must be specified 
for each periodic concurrent object.

Processing Time.  Estimated processing times for completing 
an execution cycle should be assigned to each object if 
timing is to be accounted for in performance analysis.

Operation Type.  Indicate whether operations on entity 
objects perform "reader" or "writer" functionality.

Statechart.  For each state-dependent object, a UML 
statechart is used to capture the state behavior for that object.  
A detailed discussion of how the statechart is translated into 
the CPN model is provided in Pettit and Gomaa [24].
Figure 1.  Stereotype Hierarchy for Application Objects
2.2

Defining Behavioral Pattern Templates
The basis for our approach to modeling concurrent object 
behavior lies in the notion of a behavioral design pattern (BDP) 
template, which represents concurrent objects according to their 
role along with associated message communication constructs.  
For each BDP template, we employ a self-contained CPN 
segment that, through its places, transitions, and tokens, models 
a given stereotyped behavioral pattern.  Each template is generic 
in the sense that it provides us with the basic behavioral pattern 
and component connections for the stereotyped object but does 
not contain any application-specific information.  The 
connections provided by each template are consistent across the 
set of templates and allow concurrent objects to be connected to 
passive objects (entities or message communication) in any 
order.   
We provide a BDP template for each object type identified in 
the previous section.  Since each of these templates captures a 
generic behavioral design pattern, when a template is assigned 
to a specific object, we then augment that template with the 
information captured in the tagged values for the object.  For the 
resulting CPN representation, this affects the color properties of 
the tokens (e.g. to represent specific messages) and the rules for 
processing tokens (e.g. to account for periodic processing or 
special algorithms).  The following sections describe a subset of 
our behavioral templates for both concurrent object components 
and their connectors.
«application»
«interface»
«entity»
«control»
«algorithm»
«coordinator»
«timer»
«state dependent»
«application»
«interface»
«entity»
«control»
«algorithm»
«coordinator»
«timer»
«state dependent»
«application»
«interface»
«entity»
«control»
«algorithm»
«coordinator»
«timer»
«state dependent»
«application»
«interface»
«entity»
«control»
«algorithm»
«coordinator»
«timer»
«state dependent»
203
2.2.1

Asynchronous Interface Object Template
Consider the case of an asynchronous, input-only interface 
object.  The template for this behavioral design pattern is given 
in Figure 2.   
This template represents a concurrent object, that is, an object 
that executes its own thread of control concurrently with other 
objects in the software system.  While this template models 
relatively simple behavior (wait for input; process input; wait for 
next input), it features characteristics found throughout the 
concurrent object templates.  First, to model the thread of 
control within a concurrent object, a control token (CTRL) is 
assigned to each concurrent object.  For this template, a control 
token is initially present in the Ready place.  Thus, this template 
is initialized in a state whereby it is ready to receive an input at 
the ProcessInput transition.  As an input arrives (and given that 
the control token is in the Ready place), ProcessInput is allowed 
to fire, simulating the processing of the external input and the 
behavior of the asynchronous input interface object.

ProcessInput consumes both a token representing the external 
input as well as the control token representing the executable 
thread of control.  An output arc from ProcessInput uses a 
function, processInput (Input_event) to generate the appropriate 
token representing an internal message passed to another object 
within the system.  The exact behavior of the processInput 
function (as with any arc-inscription functions throughout the 
templates) is determined from the object specification when a 
template is instantiated for a specific object.  Finally, to 
complete the behavioral pattern for this template, the control 
token is passed to the MessageSent place and eventually back to 
the Ready place, enabling the template to process the next input.
2.2.2

Periodic Algorithm Object Template
The asynchronous interface template addressed asynchronous 
behavior for a concurrent object, where the object is activated 
on demand by the receipt of a message or an external stimulus 
(as in the case of the interface example).  For periodic behavior, 
where an object is activated on a regular periodic interval, 
consider the template for a concurrent periodic algorithm object 
given in Figure 3. 
Algorithm objects are internal concurrent objects that 
encapsulate algorithms, which may be activated or deactivated 
on demand. In the case of the periodic algorithm object, once 
the algorithm is enabled, it awakens on its activation period, 
performs the desired algorithmic task, and then returns to a sleep 
state until the next activation period.  
Looking at the periodic algorithm template from Figure 3, you 
should notice that, like the previous concurrent object template, 
there is Ready place with a control token that indicates when the 
object is ready to start its next processing cycle and models the 
thread of execution.  This is common across all concurrent 
object templates.  To model the ability for an algorithm object to 
be enabled or disabled, the input interface to this template 
occurs through the Enable_Alg and Disable_Alg transitions.  
(Note that we maintain the use of transitions as the interface 
points for all concurrent objects.)  Thus, in addition to the 
control token being present on the Ready place, an Enable token 
must also be present on the Alg_Enabled place in order for the 
Perform_Alg  transition to be enabled and subsequently fired.  
The actual behavior performed by the algorithm is captured by 
decomposing the Perform_Alg transition.
The resulting decomposition uses one or more place-transition 
paths to model the behavior performed within the algorithm.  
The information necessary to derive the CPN algorithm model 
may be contained in the UML class specification for the 
algorithm object or, for more complex algorithms, may be 
captured in supporting UML artifacts such as the activity 
diagram.  Multiple algorithms may be encapsulated within the 
same algorithm object.  In these cases, the enable/disable 
transitions, enabled place, and processing transition are repeated 
for each encapsulated algorithm.  However, there will only ever 
be one control token and ready place in a single concurrent 
object as our approach does not allow for multi-threaded 
concurrent objects. 
Finally, to capture the periodic nature of this template, a Sleep 
place along with Wakeup and Timeout transitions have been 
added to the basic asynchronous object template.  This place-transition
pair will be common to all periodic templates.  In this 
case, the periodic algorithm starts in the Sleep place rather than 
Ready.  After the desired sleep time (indicating the activation 
period of the object) has elapsed, the Wakeup transition is 
enabled and, when fired, removes the CTRL token from the 
Sleep place and places it in the Ready place.  This now enables 
the template to perform any enabled algorithms.  If one or more 
algorithms are enabled, the template proceeds in the same 
manner as the previous asynchronous algorithm template.  
However, if no algorithms are enabled when the template wakes 
up, the Timeout transition will fire and return the Control token 
to the Sleep place and wait for the next period of activation.
2.2.3

Entity Object Template
In contrast to concurrent objects, passive objects do not execute 
their own thread of control and must rely on operation calls 
from a concurrent object. Using our approach, the entity objects 
from Figure 1 are passive objects.  The purpose of an entity 
object is to store persistent data. Entities provide operations to 
access and manipulate the data stored within the object.  These 
operations provide the interface to the entity object. To account 
for the possibility of multiple concurrent objects accessing a 
single entity object, our approach stipulates that each operation 
be tagged as having "read" or "write" access and for the object 
to be tagged with "mutually exclusive" or "multiple-reader/single
-writer" rules for access control. This allows us to 
apply the appropriate template with the desired mutual exclusion 
protection for the encapsulated object attributes. The behavioral 
design pattern template representing an entity object with 
mutually exclusive access is shown in Figure 4.   
In this template, attributes are modeled with a CPN place 
containing tokens representing the attribute values.  The 
underlying functionality of each operation is captured in an 
"idmOperation" transition that can be further decomposed as 
necessary to implement more complex functions.  When 
instantiated for a specific entity object, the "idm" tag is replaced 
with a specific identifier for each operation.  Finally, the 
interface to each operation is provided by a pair of CPN places ­ 
one place for the operation call and another for the return.  
Collectively, these places form the interface to the entity object. 
As opposed to concurrent objects, all passive objects and 
message connectors will use CPN places for their interface, 
allowing concurrent objects to be connected through their 
transition interfaces.  Thus, for performing an operation call, a
204
concurrent object places its control token and any necessary 
parameter tokens on the calling place and then waits for the 
control token to be returned along with any additional operation 
results at the call return place.  Recall that entity objects do not 
have their own thread of control, thus they become part of the 
calling object's thread of control for the duration of the 
operation call.
2.2.4

Message Communication Templates
Finally, in addition to application object templates, our method 
also provides templates for connector objects representing 
message communication.  These connectors may represent 
asynchronous or synchronous message communication between 
two concurrent objects.

Figure 2.  Asynchronous Input-Only Interface Object:  (a) UML (2.0); (b) CPN Template

Figure 3. Periodic Algorithm Template: (a) UML; (b) CPN Representation
{Execution = async;
IO = input
Process Time = &lt;process time&gt;
}
asyncInput
Interface
&lt;&lt;interface&gt;&gt;
external
InputSource
&lt;&lt;external input device&gt;&gt;
inputEvent
asyncMsg
To internal
connector
object
(a)
(b)
{Execution = async;
IO = input
Process Time = &lt;process time&gt;
}
asyncInput
Interface
&lt;&lt;interface&gt;&gt;
external
InputSource
&lt;&lt;external input device&gt;&gt;
inputEvent
asyncMsg
To internal
connector
object
(a)
(b)
{Execution = periodic;
Activation Time = &lt;sleep time&gt;
Process Time = &lt;process time&gt;
}
periodic
Algorithm
Object
&lt;&lt;algorithm&gt;&gt;
enable
(a)
(b)
periodic
Algorithm
Object
{Execution = periodic;
Activation Time = &lt;sleep time&gt;
Process Time = &lt;process time&gt;
}
periodic
Algorithm
Object
&lt;&lt;algorithm&gt;&gt;
enable
(a)
(b)
periodic
Algorithm
Object
205

Figure 4. Passive Entity Template: (a) UML; (b) CPN Representation
Consider the message buffer template shown in Figure 5.  
Notice that, as with passive entity objects, the interface to 
connector objects always occurs through a place rather than a 
transition, thus allowing concurrent object interfaces to be 
linked with connector interfaces while still enforcing the Petri 
net connection rules of only allowing arcs to occur between 
transitions and places.  The message buffer template models 
synchronous message communication between two concurrent 
objects.  Thus, only one message may be passed through the 
buffer at a time and both the producer (sender) and consumer 
(receiver) are blocked until the message communication has 
completed.  The behavior of synchronous message 
communication is modeled through this template by first having 
the producer wait until the buffer is free as indicated by the 
presence of a "free" token in the buffer.  The producer then 
places a message token in the buffer and removes the free token, 
indicating that the buffer is in use.  Conversely, the consumer 
waits for a message token to appear in the buffer.  After 
retrieving the message token, the consumer sets the buffer once 
again to free and places a token in the "Return" place, indicating 
to the producer that the communication has completed.  
Asynchronous message connector templates continue to employ 
places for their interfaces.  However, asynchronous message 
communication, which involves the potential for queuing of 
messages, is more involved than the simple synchronous 
message buffer and must therefore add a transition to handle this 
behavior.  The corresponding template is shown in Figure 6. 
With asynchronous communication the sender is not blocked 
awaiting acknowledgement that the sent message has been 
received and a message queue is allowed to form for the object 
receiving the asynchronous messages.  In this template, the 
ManageQueue transition is decomposed into a subnet that 
implements the FIFO placement and retrieval of messages in the
queue [26].  To send an asynchronous message, a concurrent 
object places a message token on the Enqueue place.  The 
subnet under ManageQueue would then add this message token 
to the tail of the queue.  Another concurrent object receiving the 
asynchronous message would wait for a message token to be 
available in the Dequeue place (representing the head of the 
queue).  It would then remove the message token from Dequeue 
and signal DequeueComplete in a similar manner to the 
operation calls previously described for entities.  This signals 
the queue that a message token has been removed from the head 
of the queue and that the remaining messages need to be 
advanced.
Figure 5. Synchronous Message Buffer Connector Template:
(a) UML; (b) CPN Representation


(a)
(b)
anActiveObject
anotherActive
Object
anEntityObject
read()
write()
&lt;&lt;entity&gt;&gt;
{Access Control = mutually-exclusive}
(a)
(b)
anActiveObject
anotherActive
Object
anEntityObject
read()
write()
&lt;&lt;entity&gt;&gt;
{Access Control = mutually-exclusive}
(a)
(b)
producer
consumer
data
(a)
(b)
producer
consumer
data
206
Figure 6. Asynchronous Message Queue Template
Constructing CPN Models from UML
Up to this point, we have just discussed individual CPN 
templates being used to model behavioral design patterns of 
concurrent objects, passive «entity» objects, and message 
communication mechanisms. This section presents our method 
for constructing a CPN model of the concurrent software 
architecture by applying and interconnecting these templates.  
The basic construction process consists of the following steps: 
1.

Construct a concurrent software architecture model using a 
UML communication diagram to show all concurrent and 
passive objects participating in the (sub) system to be 
analyzed along with their message communication.
2.

Begin constructing the CPN model by first developing a 
context-level CPN model showing the system as a single 
CPN substitution (hierarchically structured) transition and 
the external interfaces as CPN places.  Using a series of 
hierarchically structured transitions allows us to work with 
the CPN representation at varying levels of abstraction, from 
a completely black-box view, a concurrent software 
architecture view (in the next step), or within an individual 
object as desired for the level of analysis being applied to the 
model.
3.

Decompose the system transition of the CPN context-level 
model, populating an architecture-level model with the 
appropriate CPN templates representing the objects from the 
concurrent software architecture.
4.

Elaborate each instance of CPN template to account for the 
specific behavioral properties of the object it models.
5.

Connect the templates, forming a connected graph between 
concurrent object templates and passive entity objects or 
message communication mechanisms.
To illustrate the application of this approach, consider a partial 
example from the well-known Cruise Control System [4].  This 
example was chosen for this paper as it requires little 
explanation for the UML model and allows us to focus on the 
use of behavioral design pattern templates and the CPN 
representations.  Figure 7 provides a partial communication 
diagram of the Cruise Control System concurrent software 
architecture.   
To begin, focus on the input events being provided by the 
Cruise Control Lever. (We will return to the brake and engine 
inputs later in this section.)  Cruise control lever events enter the 
system via a concurrent «interface» object that sends an 
asynchronous message to the «state dependent control» object to 
process the requests based on rules defined in a corresponding 
statechart.  Based on the state of the CruiseControl object, 
commands are given to a concurrent periodic «algorithm» object
enabling it to compare speed values from two passive «entity» 
objects and determine the correct throttle values, which are then 
passed on to the periodic output interface, ThrottleInterface. 
Given this concurrent software architecture, the second step in 
our process would construct the context-level CPN model 
shown in Figure 8.  At this level, we see the system as a black-box
represented as a single transition, "CruiseControlSystem".  
External input and output interfaces for the cruise control lever, 
brake, and engine devices are represented as places.  The 
purpose of this context-level CPN model is to provide a central 
starting point for our modeling and analysis.  By structuring the 
CPN model in this way, we can analyze the system as a black 
box, dealing only with external stimuli and observed results 
(corresponding to the tokens stored in these places) or we can 
use hierarchical decomposition to gain access to the individual 
object behavioral design pattern templates (and their detailed 
CPN implementation) by systematically decomposing the 
hierarchically structured transitions (indicated with the HS tag). 
In the third step, the CruiseControlSystem transition from the 
context-level model is decomposed into an architecture-level 
model populated with the appropriate CPN behavioral design 
pattern template for each of the cruise control objects.  Given 
the architecture design from Figure 7 (and continuing to ignore 
AutoSensors for the moment), we would need to instantiate two 
«interface» templates, two «entity» templates, one «state 
dependent control» template, and one «algorithm» template.  We 
would also need to use «queue» and «buffer» templates for the 
asynchronous and synchronous message communication 
respectively.  
Once the appropriate templates have been assigned to each 
object, the fourth step in the process is to elaborate each 
template to model a specific object.  To illustrate, consider 
CruiseControlLeverInterface.  This object is an asynchronous 
input-only interface that accepts events from the cruise control 
lever device and, based on the input event, generates the 
appropriate messages for the cruise control request queue.  
Applying the asynchronous input interface template from Figure 
2, we arrive at the elaborated CPN segment for 
CruiseControlLeverInterface shown in Figure 9. 
To elaborate the template for the CruiseControlLeverInterface, 
the place and transition names from the basic template have 
been appended with the object ID (1) for the specific object.  
The control token for this model has also been set to the specific 
control token for the CruiseControlLeverInterface object 
(CTRL1) and the time region for the PostProcessing_1 
transition has been set to "@+100" to reflect the Process Time 
tagged value.  The CruiseControlLeverInterface CPN 
representation is then connected to the software architecture by 
establishing an input arc from the CruiseControlLeverDevice 
place, representing the external input from the device, and an 
output arc to the Enqueue place, modeling the asynchronous 
message communication identified in the UML software 
architecture.  Token types (colors) are then specifically created 
to represent the incoming event and outgoing messages.  Finally, 
the processInput1() function is elaborated to generate the 
appropriate asynchronous message based on an incoming lever 
event.  This elaboration process is similar for all templates.
(a)
(b)
anActiveObject
anotherActive
Object
data
(a)
(b)
anActiveObject
anotherActive
Object
data
207

Figure 7. Partial Concurrent Software Architecture for Cruise Control
Figure 8. CPN Context-Level Model for Cruise Control
Figure 9. Asynchronous Input-Only Interface Template
Applied to CruiseControlLeverInterface
Once all templates have been elaborated, our fifth and final step 
connects the templates to form a connected graph of the 
concurrent software architecture.  The entire CPN architecture 
model for cruise control is too large for inclusion in this paper.  
However, Figure 10 illustrates the component connections 
between the CruiseControlLeverInterface and the CruiseControl 
templates using an asynchronous message queue connector.  As 
can be seen from this figure, the two concurrent object templates 
communicate via the queue connector by establishing arcs 
between the interface transitions of the concurrent objects and 
the interface places of the queue connector.  This component 
connection method applies to the entire software architecture 
using our approach of allowing concurrent objects to be 
connected to either passive entity objects or to a message 
communication connector. 
To further illustrate the component-based approach used for 
constructing these CPN let us now consider expanding the 
model to include input from the brake and engine devices.  In 
addition to the cruise control lever inputs, Figure 7 also shows 
brake and engine status messages arriving from the respective 
devices.  These status messages are handled by the AutoSensors 
periodic interface object and are passed to CruiseControl via an 
asynchronous message through the same cruise control request 
queue already being used by CruiseControlLeverInterface.  
Using our component-based modeling approach, the
AutoSensors object can be added to our CPN model by simply 
instantiating a CPN representation of the periodic input interface 
behavioral design pattern template using the specified 
characteristics for AutoSensors and then connecting it to the 
existing queue template.  The resulting CPN model is given in 
Figure 11.   
The addition of AutoSensors also illustrates another capability 
of the interface template.  Whereas the cruise control lever is an 
asynchronous device, providing interrupts to 
CruiseControlLeverInterface, the brake and engine devices are 
passive devices that must be polled for their status.  In Figure 
11, every time AutoSensors is activated, it retrieves the status 
token from the brake and engine device places.  After checking 
the status, the token is immediately returned to the device 
places, modeling persistence of device status information that 
can be polled as necessary.  The remainder of the AutoSensors 
template sho