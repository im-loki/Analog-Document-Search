Ranking Flows from Sampled Traffic
ABSTRACT
Most of the theoretical work on sampling has addressed the
inversion of general traffic properties such as flow size distribution
, average flow size, or total number of flows. In
this paper, we make a step towards understanding the impact
of packet sampling on individual flow properties. We
study how to detect and rank the largest flows on a link. To
this end, we develop an analytical model that we validate
on real traces from two networks. First we study a blind
ranking method where only the number of sampled packets
from each flow is known. Then, we propose a new method,
protocol-aware ranking, where we make use of the packet
sequence number (when available in transport header) to
infer the number of non-sampled packets from a flow, and
hence to improve the ranking. Surprisingly, our analytical
and experimental results indicate that a high sampling rate
(10% and even more depending on the number of top flows
to be ranked) is required for a correct blind ranking of the
largest flows. The sampling rate can be reduced by an order
of magnitude if one just aims at detecting these flows or by
using the protocol-aware method.
Categories and Subject Descriptors
C.4 [Computer Systems Organization]: PERFORMANCE
OF SYSTEMS--Measurement techniques

General Terms
Measurement, Performance, Experimentation

This work was done while the author was visiting Intel
Research Cambridge.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CoNEXT'05, October 24Â­27, 2005, Toulouse, France.
Copyright 2005 ACM 1-59593-197-X/05/0010 ...
$
5.00.

INTRODUCTION
The list of the top users or applications is one of the most
useful statistics to be extracted from network traffic.
Network operators use the knowledge of the most popular
destinations to identify emerging markets and applications
or to locate where to setup new Points of Presence. Content
delivery networks use the popularity of sites to define
caching and replication strategies. In traffic engineering, the
identification of heavy hitters in the network can be used to
treat and route them differently across the network [20, 17,
10]. Keeping track of the network prefixes that generate
most traffic is also of great importance for anomaly detection
. A variation in the pattern of the most common applications
may be used as a warning sign and trigger careful
inspection of the packet streams.
However, the ability to identify the top users in a packet
stream is limited by the network monitoring technology.
Capturing and processing all packets on high speed links still
remains a challenge for today's network equipment [16, 9].
In this context, a common solution is to sample the packet
stream to reduce the load on the monitoring system and to
simplify the task of sorting the list of items. The underlying
assumption in this approach is that the sampling process
does not alter the properties of the data distribution.
Sampled traffic data is then used to infer properties of the
original data (this operation is called inversion). The inversion
of sampled traffic is, however, an error-prone procedure
that often requires a deep study of the data distribution to
evaluate how the sampling rate impacts the accuracy of the
metric of interest. Although the inversion may be simple
for aggregate link statistics (e.g., to estimate the number
of packets transmitted on a link, it is usually sufficient to
multiply the number of sampled packets by the inverse of
the sampling rate), it is much harder for the properties of
individual connections or "flows" [9, 11, 8].
For these reasons, in this paper, we address this simple,
and so far unanswered, question: which sampling rate is
needed to correctly detect and rank the flows that carry the
most packets?
We define the problem as follows. Consider a traffic monitor
that samples packets independently of each other with
probability p (random sampling) and classifies them into
sampled flows. At the end of the measurement period, the
monitor processes the list of sampled flows, ranks them
based on their size in packets, and returns an ordered list of
the t largest flows.
We are interested in knowing (i) whether the ordered list
contains all the actual largest flows in the original packet
188
stream (detection), and (ii) if the items in the list appear in
the correct order (ranking).
We build an analytical model and define a performance
metric that evaluates the accuracy of identification and ranking
of the largest flows. We consider a flow to consist of a
single TCP connection. However, our results are general
and can be applied to alternative definitions of flow, as well.
We evaluate two approaches to sort the list of flows:
(i) Blind, where the sampled flows are ranked just based
on their sampled size. This method can be applied to any
definition of flow.
(ii) Protocol-aware, where we make use of additional information
in the packet header (e.g., the sequence number
in TCP packets) to infer the number of non-sampled packets
between sampled ones. This method can only be applied to
flow definitions that preserve the protocol level details.
The contributions of this work are the following: (1) We
perform an analytical study of the problem of ranking two
sampled flows and compute the probability that they are
misranked. We propose a Gaussian approximation to make
the problem numerically tractable. (2) We introduce the
protocol-aware ranking method that uses protocol level information
to complement the flow statistics and render the
detection and ranking of the largest flows more accurate. (3)
Based on the model for the ranking of two flows, we propose
a general model to study the detection and ranking problem,
given a generic flow size distribution. We define a performance
metric and evaluate the impact of several metric's
parameter on the accuracy of the ranking. (4) We validate
our findings on measurement data using publicly-available
packet-level traces. Our results indicate that a surprisingly
high sampling rate is required to obtain a good accuracy
with the blind approach (10% and even more depending on
the number of flows of interest). As for the protocol-aware
approach, it allows to reduce the required sampling rate by
an order of magnitude compared to the blind approach.
The paper is structured as follows. Next, we discuss the
related literature. In Section 3 and 4, we present our model.
Section 5 analyzes the model numerically and Section 6 validates
it on real packet-level traces. Section 7 concludes the
paper and provides perspectives for our future research.
RELATED WORK
The inversion of sampled traffic has been extensively studied
in the literature. The main focus has been on the inversion
of aggregate flow properties such as flow size distribution
[9, 11], average flow size or total number of flows [8] on
a given network link. Duffield et al. [8] study the problem of
flow splitting and propose estimators for the total number
of flows and for the average flow size in the original traffic
stream. [9, 11] study the inversion of the flow size distribution
with two different methods. They both show that the
major difficulty comes from the number of flows that are not
sampled at all and that need to be estimated with an auxiliary
method. As an auxiliary method, [8, 9] propose the use
of the SYN flag in the TCP header to mark the beginning of
a flow. [9] shows that periodic and random sampling provide
roughly the same result on high speed links, and so random
sampling can be used for mathematical analysis due to its
appealing features. [4] finds the sampling rate that assures
a bounded error on the estimation of the size of flows contributing
to more than some predefined percentage of the
traffic volume. [14] studies whether the number of sampled
packets is a good estimator for the detection of large flows
without considering its impact on the flow ranking.
Given the potential applications of finding the list of top
users, it does not come as a surprise that there has been a
significant effort in the research community to find ways to
track frequent items in a data stream [5, 7, 3, 10]. However,
this problem has usually been addressed from a memory requirement
standpoint. All the works in the literature assume
that if the algorithm and the memory size is well chosen, the
largest flows can be detected and ranked with a high precision
. However, in the presence of packet sampling, even if
the methods rank correctly the set of sampled flows, there
is no guarantee that the sampled rank corresponds to the
original rank. The problem we address in this paper complements
these works as it focuses on the impact of sampling
on the flow ranking.
BASIC MODEL RANKING TWO FLOWS
In this section, we study the probability to misrank two
flows of original sizes S
1
and S
2
in packets. This probability
is the basis for the general model for detecting and ranking
the largest flows that we will present later. Indeed, the
detection and ranking of the largest flows can be transformed
into a problem of ranking over a set of flow pairs.
Without loss of generality, we assume S
1
&lt; S
2
. We consider
a random sampling of rate p. Let s
1
and s
2
denote
the sizes in packets of both flows after sampling. The two
sampled flows are misranked if (i) s
1
is larger than s
2
, or
(ii) both flows are not sampled, i.e., their sampled sizes
equal to zero. By combining (i) and (ii), one can see that
the necessary condition for a good ranking is to sample at
least one packet from the larger flow (i.e., the smaller of
the two flows can disappear after sampling). The probability
to misrank the two flows can then be written as
P
m
(S
1
, S
2
) = P {s
1
s
2
}. For the case S
1
= S
2
, we consider
the two flows as misranked if s
1
= s
2
, or if both flows
are not sampled at all, i.e. s
1
= s
2
= 0.
We compute and study the misranking probability of two
flows of given sizes in the rest of this section. First, we consider
the blind ranking method where only the number of
sampled packets from a flow is known. For this method,
we express the misranking probability as a double sum of
binomials, then we present a Gaussian approximation to
make the problem tractable numerically. Second, we consider
the protocol-aware ranking method for which we calculate
a numerical-tractable closed-form expression of the
misraking probability. Note that the misranking probability
is a symmetric function, i.e., P
m
(S
1
, S
2
) = P
m
(S
2
, S
1
).
3.1
Blind ranking
With this method, s
1
and s
2
represent the number of
sampled packets from flows S
1
and S
2
. Under our assumptions
, these two variables are distributed according to a binomial
distribution of probability p. Hence, we can write
for S
1
&lt; S
2
,
P
m
(S
1
, S
2
) = P {s
1
s
2
} =
S
1
i=0
b
p
(i, S
1
)
i
j=0
b
p
(j, S
2
). (1)
b
p
(i, S) is the probability density function of a binomial distribution
of probability p, i.e., the probability of obtaining i
successes out of S trials. We have b
p
(i, S) =
S
i
p
i
(1 - p)
S-i
for i = 0, 1, ..., S, and b
p
(i, S) = 0 for i &lt; 0 and i &gt; S. The
189
probability to misrank two flows of equal sizes is given by
P {s
1
= s
2
or s
1
= s
2
= 0} = 1 - P {s
1
= s
2
= 0}
= 1 S
1
i=1
b
2
p
(i, S
1
).
Unfortunately, the above expression for the misranking
probability is numerically untractable since it involves two
sums of binomials. For large flows of order S packets, the
number of operations required to compute such a probability
is on the order of O(S
3
), assuming that the complexity of
the binomial computation is on the order of O(S). The
problem becomes much more complex if one has to sum
over all possible flow sizes (i.e., O(S
5
)). For this reason, we
propose next a Gaussian approximation to the problem of
blind ranking that is accurate and easy to compute. We use
this approximation to study the ranking performance as a
function of the sampling rate and the flow sizes.
3.1.1
Gaussian approximation to blind ranking
Consider a flow made of S packets and sampled at rate
p. The sampled size follows a binomial distribution. However
, it is well known that the binomial distribution can be
approximated by a Normal (or Gaussian) distribution when
p is small and when the product pS is on the order of one
(flows for which, on average, at least few packets are sampled
) [21, pages 108Â­109]. We assume that this is the case
for the largest flows, and we consider the sampled size of
a flow as distributed according to a Normal distribution of
average pS and of variance p(1 - p)S. Using this approximation
, one can express the misranking probability for the
blind ranking problem in the following simple form.
Proposition 1. For any two flows of sizes S
1
and S
2
packets (S
1
= S
2
), the Gaussian approximation gives,
P
m
(S
1
, S
2
)
1
2 erf c
|S
2
- S
1
|
2(1/p - 1)(S
1
+ S
2
)
,
(2)
where erfc(x) = (
2

)

x
e
-u
2
du is the complementary error
cumulative function.
Proof: Consider two flows of sizes S
1
and S
2
in packets
such that S
1
&lt; S
2
. Their sampled versions s
1
and s
2
both
follow Normal distributions of averages pS
1
and pS
2
, and
of variances p(1 - p)S
1
and p(1 - p)S
2
. We know that the
sum of two Normal variables is a Normal variable. So the
difference s
1
- s
2
follows a Normal distribution of average
p(S
1
- S
2
) and of variance p(1 - p)(S
1
+ S
2
). We have then
this approximation for the misranking probability:
P
m
(S
1
, S
2
) = P {s
1
- s
2
0}
P V &gt;
p(S
2
- S
1
)
p(1 - p)(S
1
+ S
2
)
=
1
2 erfc
S
2
- S
1
2(1/p - 1)(S
1
+ S
2
)
. (3)
V is a standard Normal random variable. Given the symmetry
of the misranking probability, one can take the absolute
value of S
2
- S
1
in (3) and get the expression stated in the
proposition, which is valid for all S
1
and S
2
.
For S
1
= S
2
, one can safely approximate the misranking
probability to be equal to 1. This approximation is however
of little importance given the very low probability of having
two flows of equal sizes, especially when they are large.
3.2
Protocol-aware ranking
Packets can carry in their transport header an increasing
sequence number. A typical example is the byte sequence
number in the TCP header. Another example could be the
sequence number in the header of the Real Time Protocol
(RTP) [19]. One can use this sequence number, when available
, to infer the number of non-sampled packets (or bytes
in the case of TCP) between sampled ones, and hence to improve
the accuracy of ranking. The size of the sampled flow
in this case is no longer the number of packets collected, but
rather the number of packets that exist between the first and
last sampled packets from the flow. Although this solution
is limited to flows whose packet carry a sequence number, we
believe that the study of this ranking method is important
given the widespread use of the TCP protocol. Our objective
is to understand how the use of protocol-level information
can supplement the simple, and more general, blind method
and if it is worth the additional overhead it introduces (i.e.,
storing two sequence numbers per flow record).
In the following, we calculate the misranking probability
of two flows of given sizes when using the protocol-aware
method. This probability will be used later in the general
ranking problem. The main contribution of this section is a
closed-form expression for the misranking probability that
is numerically tractable, without the need for any approximation
.
Let S be the size of a flow in packets. Let s
b
, s
b
=
1, 2, ..., S, denote the (packet) sequence number carried by
the first sampled packet, and let s
e
, s
e
= S, S - 1, ..., s
b
,
denote the sequence number carried by the last sampled
packet. Given s
b
and s
e
, one can estimate the size of the
sampled flow in packets to s = s
e
- s
b
+ 1. The error in
this estimation comes from the non-sampled packets that
are transmitted before s
b
and after s
e
. We give next the
distribution of s, which is needed for the computation of
the misranking probability, then we state our main result.
Before presenting the analysis, note that this new flow size
estimator only counts the packets that are transmitted with
distinct sequence numbers. In the case of TCP, this corresponds
to the number of bytes received at the application
layer, rather then the number of bytes carried over the network
. It is equivalent to assuming that the probability of
sampling a retransmitted (or duplicated) packet is negligible
. This is a reasonable assumption if the loss rate is low.
We will address this aspect in more detail in Section 6.
Consider a flow of size S  2 in packets. Using the above
definition for s, the sampled flow has a size of i packets,
i  2, with probability:
P {s = i} =
S-i+1
k=1
P {s
b
= k} P {s
e
= k + i - 1} .
We have P {s
b
= k} = (1 - p)
k-1
p, and P {s
e
= k + i - 1} =
(1 - p)
S-k-i+1
p. This gives
P {s = i} =
S-i+1
k=1
(1 - p)
k-1
p(1 - p)
S-k-i+1
p
= p
2
(1 - p)
S-i
(S - i + 1).
(4)
As for i = 0, we have P {s = 0} = (1 - p)
S
for S  1. And
for i = 1, we have P {s = 1} = p(1 - p)
S-1
S for S  1. It
is easy to prove that the cumulative distribution of s is the
190
following for all values of S:
P {s  i = 0} = p(1 - p)
S-i
(S - i + 1) + (1 - p)
S-i+1
. (5)
We come now to the misranking probability, which we recall
is a symmetric function. For S
1
&lt; S
2
, we have
P
m
(S
1
, S
2
) = P {s
2
s
1
} =
S
1
i=0
P {s
1
= i}
i
j=0
P {s
2
= j} .
(6)
And for S
1
= S
2
, we have
P
m
(S
1
, S
2
) = 1 S
1
i=1
P {s
1
= i}
2
.
(7)
Our main result is the following.
Proposition 2. For S
1
&lt; S
2
, the misranking probability
is equal to
P
m
(S
1
, S
2
) = (1 - p)
S
1
(1 - p)
S
2
+ p(1 - p)
S
1
-1
S
1
[p(1 - p)
S
2
-1
S
2
+ (1 - p)
S
2
]
+ p
3

2
F (1 - p, 1 - p)
xy
+ p
2
F (1 - p, 1 - p)
x
,
where
F (x, y) = xy
S
2
-S
1
+1
+ ... + x
S
1
-1
y
S
2
-1
= xy
S
2
-S
1
+1
(1 - (xy)
S
1
-1
)/(1 - xy).
For S
1
= S
2
= S, the misranking probability is equal to
P
m
(S, S) = 1 - p
2
(1 - p)
2(S-1)
S
2
- p
4

2
G(1 - p, 1 - p)
xy
,
where
G(x, y) = xy + x
2
y
2
+ x
S-1
y
S-1
= (xy - (xy)
S
)/(1 - xy).
Proof: One can validate the results by plugging (4) and (5)
into (6) and (7).
Note that the main gain of writing the misraking probability
in such a condensed form is a complexity that drops
from O(S
3
) in (6) to O(S) in our final result. This gain
comes from the closed-form expression for the cumulative
distribution in (5), and from introducing the two functions
F (x, y) and G(x, y). These two latter functions transform
two series whose complexity is O(S
2
) into a closed-form expression
whose complexity is O(S).
We solve the derivatives in the above equations using the
symbolic toolbox of matlab, which gives explicit expressions
for the misranking probability. These expressions are simple
to compute, but span on multiple lines, so we omit them for
lack of space.
3.3
Analysis of the misranking probability
3.3.1
The blind case
We use the Gaussian approximation to study how the misranking
probability varies with the sampling rate and with
the sizes of both flows, in particular their difference. The
study of the impact of the flow sizes is important to understand
the relation between flow size distribution and ranking
of the largest flows.
The misranking probability is a decreasing function of the
sampling rate. It moves to zero when p moves to 1 and to 0.5
when p approaches zero
1
. Therefore, there exists one sampling
rate that leads to some desired misranking probability,
and any lower sampling rate results in larger error.
We study now how the misranking probability varies with
the sizes of both flows. Take S
1
= S
2
- k, k a positive
integer. From (2) and for fixed k, the misranking probability
increases with S
1
and S
2
(erfc(x) is an increasing function in
x). This indicates that it is more difficult to rank correctly
two flows different by k packets as their sizes increase in
absolute terms. The result is different if we take the size of
one flow equal to  &lt; 1 times the size of the second, i.e.,
S
1
= S
2
. Here, (S
1
- S
2
)/S
1
+ S
2
is equal to S
1
(1 
)/1 + , which increases with S
1
. Hence, the misranking
probability given in (2) decreases when S
1
increases. We
conclude that, when the two flow sizes maintain the same
proportion, it is easier to obtain a correct ranking when they
are large in absolute terms.
We can now generalize the result above. One may think
that the larger the flows, the better the ranking of their
sampled versions. Our last two examples indicate that this
is not always the case. The ranking accuracy depends on
the relative difference of the flow sizes. In general, to have
a better ranking, the difference between the two flow sizes
must increase with the flow sizes and the increase must be
larger than a certain threshold. This threshold is given by
(2): the difference must increase at least as the square root
of the flow sizes. This is an interesting finding. In the context
of the general ranking problem, it can be interpreted
as follows. Suppose that the flow size has a cumulative distribution
function y = F (x). As we move to the tail of the
distribution
2
, the size of the flows to be ranked increases.
The ranking performance improves if the difference between
flow sizes increases faster than x. This is equivalent to
saying that dx/dy should increase with x faster than x.
All common distributions satisfy this condition, at least at
their tails. For example, with the exponential distribution
we have dx/dy  e
x
(1/ is the average), while for the
Pareto distribution we have dx/dy  x
+1
( is the shape).
3.3.2
The protocol-aware case
The first difference with the blind case is in the estimation
error (S - s = s
b
- 1 + S - s
e
), which can be safely assumed
to be independent of the flow size for large flows (only dependent
on p). This means that if two large flows keep the
same distance between them while their sizes increase, their
ranking maintains the same accuracy. Their ranking improves
if the difference between their sizes increases as well,
and it deteriorates if the difference between their sizes decreases
. So in contrast to the blind case, the threshold for
the ranking here to improve is that the larger flow should
have its size increasing a little faster than the smaller one. In
the context of the general ranking problem where flow sizes
are distributed according to a cumulative distribution function
y = F (x), and when the top flows become larger, the
protocol-aware ranking improves if the derivative dx/dy increases
with x. This is equivalent to saying that the function
F (x) should be concave, which is satisfied by most common
distributions at their tail. For blind ranking, concavity was
1
The Gaussian approximation does not account for the case
p = 0 where the misranking probability should be equal to
1 based on our definition.
2
Because we are more and more focusing on large flows or
because the number of available flows for ranking increases.
191
not enough to obtain a better ranking; the derivative dx/dy
had to increase faster than x. So in conclusion, the condition
to have a better ranking when we move to the tail of the
flow size distribution is less strict with the protocol-aware
method, which is an indication of its good performance.
The second difference with the blind case is in the relation
between the ranking accuracy and the sampling rate.
Consider two large flows of sizes S
1
and S
2
in packets, and
let s
1
and s
2
denote their sampled sizes. The coefficient of
variation of the difference s
2
- s
1
is an indication on how
well the ranking performs (a small coefficient of variation
results in better ranking
3
). It is easy to prove that this coefficient
of variation scales as 1/p for protocol-aware ranking
and as 1/p for blind ranking. This is again an important
finding. It tells that when the sampling rate is very small,
blind ranking could (asymptotically) perform better than
protocol-aware ranking. Our numerical and experimental
results will confirm this finding.
GENERAL MODEL DETECTING AND RANKING THE LARGEST FLOWS
We generalize the previous model from the ranking of
two flows to the detection and ranking of the top t flows,
t = 1, 2, . . . , N . The misranking probability P
m
(S
1
, S
2
) pre-viously
calculated is the basis for this generalization. Let
N  t denote the total number of flows available in the measurement
period before sampling. We want the sampled list
of top t flows to match the list of top t flows in the original
traffic. Two criteria are considered to decide whether this
match is accurate. First, we require the two lists to be identical
. This corresponds to the ranking problem. The second,
less constrained, criterion requires the two lists to contain
the same flows regardless of their relative order within the
list. This corresponds to the detection problem. For both
problems, the quality of the result is expressed as a function
of the sampling rate p, the flow size distribution, the number
of flows to rank t, and the total number of flows N .
4.1
Performance metric
In order to evaluate the accuracy of detection and ranking
, we need to define a performance metric that is easy
to compute and that focuses on the largest flows. A flow
at the top of the list can be misranked with a neighboring
large flow or a distant small flow. We want our metric to
differentiate between these two cases and to penalize more
the latter one; a top-10 flow replaced by the 100-th flow in
the sampled top list is worse than the top-10 flow being replaced
by the 11-th flow. We also want our metric to be zero
when the detection and ranking of the top flows are correct.
We introduce our performance metric using the ranking
problem. The performance metric for the detection problem
is a straightforward extension. Let's form all flow pairs
where the first element of a pair is a flow in the top t and
the second element is anywhere in the sorted list of the
N original flows. The number of these pairs is equal to
N - 1 + N - 2 + Â· Â· Â· + N - t = (2N - t - 1)t/2. We then count
the pairs in this set that are misranked after sampling and
we take the sum as our metric for ranking accuracy. This
3
For S
1
&lt; S
2
, we are interested in P {s
1
s
2
}. According
to Tchebychev inequality, this probability can be supposed
to behave like VAR[s
1
- s
2
]/E [s
1
- s
2
]
2
, which is the square
of the coefficient of variation.
sum indicates how good the ranking is at the top of the list.
It is equal to zero when the ranking is correct. When the
ranking is not correct, it takes a value proportional to the
original rank of the flows that have taken a slot in the top-t
list. For example, if the top flow is replaced by its immediate
successor in the list, the metric will return a ranking error
of 1. Instead, if the same flow is replaced by a distant flow,
say the 100-th, the metric will return an error of 99. Also,
note that our metric does not account for any misranking of
flows outside the list of top t flows. For any two flows n and
m, such that n &gt; m &gt; t, the fact that n takes the position
of m does not add anything to our performance metric since
our metric requires at least one element of a flow pair to be
in the original list of top t flows.
In the detection problem, we are no longer interested in
comparing flow pairs whose both elements are in the top t
list. We are only interested in the ranking between flows
in the top t list and those outside the list. Therefore, our
detection metric is defined as the number of misranked flow
pairs, where the first element of a pair is in the list of top t
flows and the second element is outside this list (non top t).
The above metrics return one value for each realization
of flow sizes and of sampled packets. Given that we want
to account for all realizations, we define the performance
metrics as the number of misranked flow pairs averaged over
all possible values of flow sizes in the original list of N flows
and over all sampling runs. We deem the ranking/detection
as acceptable when our metric takes a value below one (i.e.,
on average less than one flow pair is misranked).
In addition to the above, our metrics have the advantage
of being easily and exactly calculable. Performance metrics
based on probabilities (e.g.,[12]) require lot of assumptions
that make them only suitable for computing bounds, but
not exact values.
4.2
Computation of the performance metric
for the ranking problem
Consider a flow of i packets belonging to the list of top t
flows in the original traffic (before sampling). First, we compute
the probability that this flow is misranked with another
flow of general size and general position. Denote this probability
by P
mt
(i), where m stands for misranking and t for
top. Then, we average over all values of i to get Â¯
P
mt4
. This
latter function gives us the probability that, on average, the
top t-th flow is misranked with another flow. Thus, our performance
metric, which is defined as the average number of
misranked flow pairs where at least one element of a pair
is in the top t, is equal to (2N - t - 1)t Â¯
P
mt
/2. Next, we
compute the value of Â¯
P
mt
.
Let p
i
denote the probability that the size of a general
flow is equal to i packets, and P
i
denote the flow size complementary
cumulative distribution, i.e., P
i
=
j=i
p
j
. For
a large number of flows N and a high degree of multiplexing,
we consider safe to assume that flow sizes are independent
of each other (see [2] for a study of the flow size correlation
on a OC-12 IP backbone link). A flow of size i belongs to
the list of top t flows if the number of flows in the original
total list, with a size larger than i, is less or equal than t - 1.
Since each flow can be larger than i with probability P
i
independently
of the other flows, we can write the probability
that a flow of size i belongs to the list of the top t flows
4
Note that the distribution of the size of a flow at the top
of the list is different from that of a generic flow.
192
as P
t
(i, t, N ) =
t-1
k=0
b
P
i
(k, N - 1), where b
P
i
(k, N - 1)
is the probability to obtain k successes out of N - 1 trials
, P
i
being the probability of a success. The probability
that the t-th largest flow has a size of i packets is equal
to P
t
(i) = p
i
P
t
(i, t, N )/ Â¯
P
t
(t, N ). Â¯
P
t
(t, N ) is the probability
that a flow of general size is among the top t in the original
total list, which is simply equal to t/N .
Using the above notation, one can write the misranking
probability between a top t flow of original size i packets
and any other flow as follows
P
mt
(i) =
1
P
t
(i, t, N )
i-1
j=1
p
j
P
t
(i, t, N - 1)P
m
(j, i)+

j=i
p
j
P
t
(i, t - 1, N - 1)P
m
(i, j) .
(8)
In this expression, we sum over all possible original sizes
of the other flow (the variable j) and we separate the case
when this other flow is smaller than i from the case when it
is larger than i
5
. P
m
(i, j) is the misranking probability of
two flows of sizes i and j packets, which we calculated in the
previous section for the two ranking methods. Â¯
P
mt
is then
equal to
i=1
P
t
(i)P
mt
(i).
For protocol-aware ranking, P
m
(i, j) is given explicitly
in Proposition 2 and can be easily computed. For blind
ranking, we use the Gaussian approximation summarized in
Proposition 2, which we recall holds when at least one of the
two flows to be compared is large.
4.3
Computation of the performance metric
for the detection problem
Consider the probability that a flow among the top t is
swapped with a flow that does belong to the top t. Let
Â¯
P
mt
denote this probability. Following the same approach
described in Section 4, we can write
Â¯
P
mt
= 1
Â¯
P
t

i=1
i-1
j=1
p
i
p
j
P
t
(j, i, t, N )P
m
(j, i).
To get this expression for Â¯
P
mt
, we sum over all possible
values for the size of the flow in the top t (index i) and
all possible values for the size of the other flow not among
the top t (index j). In this expression, p
i
and p
j
represent
the probability that the size of a flow is equal to i or j
packets, respectively. P
m
(j, i) is the probability that two
flows of sizes i and j are misranked Â­ it is given by the
Gaussian approximation described in Proposition 1 for the
blind method and the result stated in Proposition 2 for the
protocol-aware method. P
t
(j, i, t, N ) is the joint probability
that a flow of size i belongs to the list of the top t flows while
another flow of size j does not